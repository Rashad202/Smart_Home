
SMART_HOME-SLAVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002614  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b4  00800060  00002614  000026a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800114  00800114  0000275c  2**0
                  ALLOC
  3 .stab         0000249c  00000000  00000000  0000275c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000de6  00000000  00000000  00004bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000059de  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005c8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000078d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000087c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009570  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000096d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000995d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a12b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e1       	ldi	r30, 0x14	; 20
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 31       	cpi	r26, 0x14	; 20
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e1       	ldi	r26, 0x14	; 20
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 31       	cpi	r26, 0x15	; 21
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <main>
      8a:	0c 94 08 13 	jmp	0x2610	; 0x2610 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d1 12 	jmp	0x25a2	; 0x25a2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e0       	ldi	r26, 0x0C	; 12
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ed 12 	jmp	0x25da	; 0x25da <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 dd 12 	jmp	0x25ba	; 0x25ba <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 dd 12 	jmp	0x25ba	; 0x25ba <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d1 12 	jmp	0x25a2	; 0x25a2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e0       	ldi	r24, 0x0C	; 12
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ed 12 	jmp	0x25da	; 0x25da <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 dd 12 	jmp	0x25ba	; 0x25ba <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 dd 12 	jmp	0x25ba	; 0x25ba <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 dd 12 	jmp	0x25ba	; 0x25ba <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e1 12 	jmp	0x25c2	; 0x25c2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 fd 12 	jmp	0x25fa	; 0x25fa <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidInit>:
#include <avr/io.h>
#include "ADC.h"


void ADC_voidInit (void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/* Select Vref = AVCC = 2.56V */
	CLR_BIT(ADMUX , REFS1);
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8f 77       	andi	r24, 0x7F	; 127
     b5a:	8c 93       	st	X, r24
	SET_BIT(ADMUX , REFS0);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	80 64       	ori	r24, 0x40	; 64
     b68:	8c 93       	st	X, r24
	/* 	2- Select Right Adjust*/
	CLR_BIT(ADMUX , ADLAR);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 7d       	andi	r24, 0xDF	; 223
     b76:	8c 93       	st	X, r24
	/* 	4- select CLK 'From 50 KHZ to 200 KHZ'---> Input CLK = 8 MHZ
	====> So We will select CLK / 64 */
	SET_BIT(ADCSRA , ADPS2);
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	84 60       	ori	r24, 0x04	; 4
     b84:	8c 93       	st	X, r24
	SET_BIT(ADCSRA , ADPS1);
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	82 60       	ori	r24, 0x02	; 2
     b92:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA , ADPS0);
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	8e 7f       	andi	r24, 0xFE	; 254
     ba0:	8c 93       	st	X, r24
	/* 	1- Enable ADC*/
	SET_BIT(ADCSRA , ADEN);
     ba2:	a6 e2       	ldi	r26, 0x26	; 38
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e6 e2       	ldi	r30, 0x26	; 38
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	80 68       	ori	r24, 0x80	; 128
     bae:	8c 93       	st	X, r24
}
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <ADC_u16GetDigitalValue>:

u16  ADC_u16GetDigitalValue(u8 Copy_u8ChannelNum)
{
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	00 d0       	rcall	.+0      	; 0xbbc <ADC_u16GetDigitalValue+0x6>
     bbc:	0f 92       	push	r0
     bbe:	cd b7       	in	r28, 0x3d	; 61
     bc0:	de b7       	in	r29, 0x3e	; 62
     bc2:	8b 83       	std	Y+3, r24	; 0x03
	u16 Local_u16ADCDigitalValue ;
	/*Clear MUX4......0*/
	ADMUX &= 0b11100000 ;
     bc4:	a7 e2       	ldi	r26, 0x27	; 39
     bc6:	b0 e0       	ldi	r27, 0x00	; 0
     bc8:	e7 e2       	ldi	r30, 0x27	; 39
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	80 81       	ld	r24, Z
     bce:	80 7e       	andi	r24, 0xE0	; 224
     bd0:	8c 93       	st	X, r24
	/*Select Channel*/
	ADMUX |= Copy_u8ChannelNum ;
     bd2:	a7 e2       	ldi	r26, 0x27	; 39
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	e7 e2       	ldi	r30, 0x27	; 39
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	90 81       	ld	r25, Z
     bdc:	8b 81       	ldd	r24, Y+3	; 0x03
     bde:	89 2b       	or	r24, r25
     be0:	8c 93       	st	X, r24
	/*Start conversion*/
	SET_BIT(ADCSRA , ADSC);
     be2:	a6 e2       	ldi	r26, 0x26	; 38
     be4:	b0 e0       	ldi	r27, 0x00	; 0
     be6:	e6 e2       	ldi	r30, 0x26	; 38
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	80 64       	ori	r24, 0x40	; 64
     bee:	8c 93       	st	X, r24
	/*Wait flag = 1*/
	while (GET_BIT(ADCSRA , ADIF) == 0);
     bf0:	e6 e2       	ldi	r30, 0x26	; 38
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	82 95       	swap	r24
     bf8:	8f 70       	andi	r24, 0x0F	; 15
     bfa:	88 2f       	mov	r24, r24
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	81 70       	andi	r24, 0x01	; 1
     c00:	90 70       	andi	r25, 0x00	; 0
     c02:	00 97       	sbiw	r24, 0x00	; 0
     c04:	a9 f3       	breq	.-22     	; 0xbf0 <ADC_u16GetDigitalValue+0x3a>
	/*Clear flag*/
	SET_BIT(ADCSRA , ADIF);
     c06:	a6 e2       	ldi	r26, 0x26	; 38
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	e6 e2       	ldi	r30, 0x26	; 38
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	80 61       	ori	r24, 0x10	; 16
     c12:	8c 93       	st	X, r24
	/* Read the digital value from ADC_REG ==> "High & Low" */
	Local_u16ADCDigitalValue = ADC_REG ;
     c14:	e4 e2       	ldi	r30, 0x24	; 36
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	80 81       	ld	r24, Z
     c1a:	91 81       	ldd	r25, Z+1	; 0x01
     c1c:	9a 83       	std	Y+2, r25	; 0x02
     c1e:	89 83       	std	Y+1, r24	; 0x01
	return Local_u16ADCDigitalValue ;
     c20:	89 81       	ldd	r24, Y+1	; 0x01
     c22:	9a 81       	ldd	r25, Y+2	; 0x02
}
     c24:	0f 90       	pop	r0
     c26:	0f 90       	pop	r0
     c28:	0f 90       	pop	r0
     c2a:	cf 91       	pop	r28
     c2c:	df 91       	pop	r29
     c2e:	08 95       	ret

00000c30 <DIO_voidSetPinDirection>:
#include"BIT_MATH.h"
#include<avr/io.h>
#include "DIO_interface.h"
//#include "DIO_private.h"
void DIO_voidSetPinDirection(u8 copy_u8port, u8 copy_u8pin, u8 copy_u8Direction)
{
     c30:	df 93       	push	r29
     c32:	cf 93       	push	r28
     c34:	cd b7       	in	r28, 0x3d	; 61
     c36:	de b7       	in	r29, 0x3e	; 62
     c38:	27 97       	sbiw	r28, 0x07	; 7
     c3a:	0f b6       	in	r0, 0x3f	; 63
     c3c:	f8 94       	cli
     c3e:	de bf       	out	0x3e, r29	; 62
     c40:	0f be       	out	0x3f, r0	; 63
     c42:	cd bf       	out	0x3d, r28	; 61
     c44:	89 83       	std	Y+1, r24	; 0x01
     c46:	6a 83       	std	Y+2, r22	; 0x02
     c48:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8Direction == 1)             
     c4a:	8b 81       	ldd	r24, Y+3	; 0x03
     c4c:	81 30       	cpi	r24, 0x01	; 1
     c4e:	09 f0       	breq	.+2      	; 0xc52 <DIO_voidSetPinDirection+0x22>
     c50:	6f c0       	rjmp	.+222    	; 0xd30 <DIO_voidSetPinDirection+0x100>
	{
		switch(copy_u8port)
     c52:	89 81       	ldd	r24, Y+1	; 0x01
     c54:	28 2f       	mov	r18, r24
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	3f 83       	std	Y+7, r19	; 0x07
     c5a:	2e 83       	std	Y+6, r18	; 0x06
     c5c:	8e 81       	ldd	r24, Y+6	; 0x06
     c5e:	9f 81       	ldd	r25, Y+7	; 0x07
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	91 05       	cpc	r25, r1
     c64:	49 f1       	breq	.+82     	; 0xcb8 <DIO_voidSetPinDirection+0x88>
     c66:	2e 81       	ldd	r18, Y+6	; 0x06
     c68:	3f 81       	ldd	r19, Y+7	; 0x07
     c6a:	22 30       	cpi	r18, 0x02	; 2
     c6c:	31 05       	cpc	r19, r1
     c6e:	2c f4       	brge	.+10     	; 0xc7a <DIO_voidSetPinDirection+0x4a>
     c70:	8e 81       	ldd	r24, Y+6	; 0x06
     c72:	9f 81       	ldd	r25, Y+7	; 0x07
     c74:	00 97       	sbiw	r24, 0x00	; 0
     c76:	61 f0       	breq	.+24     	; 0xc90 <DIO_voidSetPinDirection+0x60>
     c78:	d2 c0       	rjmp	.+420    	; 0xe1e <DIO_voidSetPinDirection+0x1ee>
     c7a:	2e 81       	ldd	r18, Y+6	; 0x06
     c7c:	3f 81       	ldd	r19, Y+7	; 0x07
     c7e:	22 30       	cpi	r18, 0x02	; 2
     c80:	31 05       	cpc	r19, r1
     c82:	71 f1       	breq	.+92     	; 0xce0 <DIO_voidSetPinDirection+0xb0>
     c84:	8e 81       	ldd	r24, Y+6	; 0x06
     c86:	9f 81       	ldd	r25, Y+7	; 0x07
     c88:	83 30       	cpi	r24, 0x03	; 3
     c8a:	91 05       	cpc	r25, r1
     c8c:	e9 f1       	breq	.+122    	; 0xd08 <DIO_voidSetPinDirection+0xd8>
     c8e:	c7 c0       	rjmp	.+398    	; 0xe1e <DIO_voidSetPinDirection+0x1ee>
		{
			case 0 : SET_BIT(DDRA,copy_u8pin); break;    
     c90:	aa e3       	ldi	r26, 0x3A	; 58
     c92:	b0 e0       	ldi	r27, 0x00	; 0
     c94:	ea e3       	ldi	r30, 0x3A	; 58
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	80 81       	ld	r24, Z
     c9a:	48 2f       	mov	r20, r24
     c9c:	8a 81       	ldd	r24, Y+2	; 0x02
     c9e:	28 2f       	mov	r18, r24
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	02 2e       	mov	r0, r18
     ca8:	02 c0       	rjmp	.+4      	; 0xcae <DIO_voidSetPinDirection+0x7e>
     caa:	88 0f       	add	r24, r24
     cac:	99 1f       	adc	r25, r25
     cae:	0a 94       	dec	r0
     cb0:	e2 f7       	brpl	.-8      	; 0xcaa <DIO_voidSetPinDirection+0x7a>
     cb2:	84 2b       	or	r24, r20
     cb4:	8c 93       	st	X, r24
     cb6:	b3 c0       	rjmp	.+358    	; 0xe1e <DIO_voidSetPinDirection+0x1ee>
			case 1 : SET_BIT(DDRB,copy_u8pin); break; 
     cb8:	a7 e3       	ldi	r26, 0x37	; 55
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e7 e3       	ldi	r30, 0x37	; 55
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	48 2f       	mov	r20, r24
     cc4:	8a 81       	ldd	r24, Y+2	; 0x02
     cc6:	28 2f       	mov	r18, r24
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	02 2e       	mov	r0, r18
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <DIO_voidSetPinDirection+0xa6>
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	0a 94       	dec	r0
     cd8:	e2 f7       	brpl	.-8      	; 0xcd2 <DIO_voidSetPinDirection+0xa2>
     cda:	84 2b       	or	r24, r20
     cdc:	8c 93       	st	X, r24
     cde:	9f c0       	rjmp	.+318    	; 0xe1e <DIO_voidSetPinDirection+0x1ee>
			case 2 : SET_BIT(DDRC,copy_u8pin); break; 
     ce0:	a4 e3       	ldi	r26, 0x34	; 52
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	e4 e3       	ldi	r30, 0x34	; 52
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	48 2f       	mov	r20, r24
     cec:	8a 81       	ldd	r24, Y+2	; 0x02
     cee:	28 2f       	mov	r18, r24
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	02 2e       	mov	r0, r18
     cf8:	02 c0       	rjmp	.+4      	; 0xcfe <DIO_voidSetPinDirection+0xce>
     cfa:	88 0f       	add	r24, r24
     cfc:	99 1f       	adc	r25, r25
     cfe:	0a 94       	dec	r0
     d00:	e2 f7       	brpl	.-8      	; 0xcfa <DIO_voidSetPinDirection+0xca>
     d02:	84 2b       	or	r24, r20
     d04:	8c 93       	st	X, r24
     d06:	8b c0       	rjmp	.+278    	; 0xe1e <DIO_voidSetPinDirection+0x1ee>
			case 3 : SET_BIT(DDRD,copy_u8pin); break; 
     d08:	a1 e3       	ldi	r26, 0x31	; 49
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e1 e3       	ldi	r30, 0x31	; 49
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	48 2f       	mov	r20, r24
     d14:	8a 81       	ldd	r24, Y+2	; 0x02
     d16:	28 2f       	mov	r18, r24
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	02 2e       	mov	r0, r18
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <DIO_voidSetPinDirection+0xf6>
     d22:	88 0f       	add	r24, r24
     d24:	99 1f       	adc	r25, r25
     d26:	0a 94       	dec	r0
     d28:	e2 f7       	brpl	.-8      	; 0xd22 <DIO_voidSetPinDirection+0xf2>
     d2a:	84 2b       	or	r24, r20
     d2c:	8c 93       	st	X, r24
     d2e:	77 c0       	rjmp	.+238    	; 0xe1e <DIO_voidSetPinDirection+0x1ee>
		}
		
	}
	else if(copy_u8Direction == 0)   
     d30:	8b 81       	ldd	r24, Y+3	; 0x03
     d32:	88 23       	and	r24, r24
     d34:	09 f0       	breq	.+2      	; 0xd38 <DIO_voidSetPinDirection+0x108>
     d36:	73 c0       	rjmp	.+230    	; 0xe1e <DIO_voidSetPinDirection+0x1ee>
	{
		switch(copy_u8port)
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	28 2f       	mov	r18, r24
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	3d 83       	std	Y+5, r19	; 0x05
     d40:	2c 83       	std	Y+4, r18	; 0x04
     d42:	8c 81       	ldd	r24, Y+4	; 0x04
     d44:	9d 81       	ldd	r25, Y+5	; 0x05
     d46:	81 30       	cpi	r24, 0x01	; 1
     d48:	91 05       	cpc	r25, r1
     d4a:	59 f1       	breq	.+86     	; 0xda2 <DIO_voidSetPinDirection+0x172>
     d4c:	2c 81       	ldd	r18, Y+4	; 0x04
     d4e:	3d 81       	ldd	r19, Y+5	; 0x05
     d50:	22 30       	cpi	r18, 0x02	; 2
     d52:	31 05       	cpc	r19, r1
     d54:	2c f4       	brge	.+10     	; 0xd60 <DIO_voidSetPinDirection+0x130>
     d56:	8c 81       	ldd	r24, Y+4	; 0x04
     d58:	9d 81       	ldd	r25, Y+5	; 0x05
     d5a:	00 97       	sbiw	r24, 0x00	; 0
     d5c:	69 f0       	breq	.+26     	; 0xd78 <DIO_voidSetPinDirection+0x148>
     d5e:	5f c0       	rjmp	.+190    	; 0xe1e <DIO_voidSetPinDirection+0x1ee>
     d60:	2c 81       	ldd	r18, Y+4	; 0x04
     d62:	3d 81       	ldd	r19, Y+5	; 0x05
     d64:	22 30       	cpi	r18, 0x02	; 2
     d66:	31 05       	cpc	r19, r1
     d68:	89 f1       	breq	.+98     	; 0xdcc <DIO_voidSetPinDirection+0x19c>
     d6a:	8c 81       	ldd	r24, Y+4	; 0x04
     d6c:	9d 81       	ldd	r25, Y+5	; 0x05
     d6e:	83 30       	cpi	r24, 0x03	; 3
     d70:	91 05       	cpc	r25, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <DIO_voidSetPinDirection+0x146>
     d74:	40 c0       	rjmp	.+128    	; 0xdf6 <DIO_voidSetPinDirection+0x1c6>
     d76:	53 c0       	rjmp	.+166    	; 0xe1e <DIO_voidSetPinDirection+0x1ee>
		{
			case 0 : CLR_BIT(DDRA,copy_u8pin); break; 
     d78:	aa e3       	ldi	r26, 0x3A	; 58
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	ea e3       	ldi	r30, 0x3A	; 58
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	48 2f       	mov	r20, r24
     d84:	8a 81       	ldd	r24, Y+2	; 0x02
     d86:	28 2f       	mov	r18, r24
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	02 2e       	mov	r0, r18
     d90:	02 c0       	rjmp	.+4      	; 0xd96 <DIO_voidSetPinDirection+0x166>
     d92:	88 0f       	add	r24, r24
     d94:	99 1f       	adc	r25, r25
     d96:	0a 94       	dec	r0
     d98:	e2 f7       	brpl	.-8      	; 0xd92 <DIO_voidSetPinDirection+0x162>
     d9a:	80 95       	com	r24
     d9c:	84 23       	and	r24, r20
     d9e:	8c 93       	st	X, r24
     da0:	3e c0       	rjmp	.+124    	; 0xe1e <DIO_voidSetPinDirection+0x1ee>
			case 1 : CLR_BIT(DDRB,copy_u8pin); break; 
     da2:	a7 e3       	ldi	r26, 0x37	; 55
     da4:	b0 e0       	ldi	r27, 0x00	; 0
     da6:	e7 e3       	ldi	r30, 0x37	; 55
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	48 2f       	mov	r20, r24
     dae:	8a 81       	ldd	r24, Y+2	; 0x02
     db0:	28 2f       	mov	r18, r24
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	02 2e       	mov	r0, r18
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <DIO_voidSetPinDirection+0x190>
     dbc:	88 0f       	add	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	0a 94       	dec	r0
     dc2:	e2 f7       	brpl	.-8      	; 0xdbc <DIO_voidSetPinDirection+0x18c>
     dc4:	80 95       	com	r24
     dc6:	84 23       	and	r24, r20
     dc8:	8c 93       	st	X, r24
     dca:	29 c0       	rjmp	.+82     	; 0xe1e <DIO_voidSetPinDirection+0x1ee>
			case 2 : CLR_BIT(DDRC,copy_u8pin); break; 
     dcc:	a4 e3       	ldi	r26, 0x34	; 52
     dce:	b0 e0       	ldi	r27, 0x00	; 0
     dd0:	e4 e3       	ldi	r30, 0x34	; 52
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	48 2f       	mov	r20, r24
     dd8:	8a 81       	ldd	r24, Y+2	; 0x02
     dda:	28 2f       	mov	r18, r24
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	02 2e       	mov	r0, r18
     de4:	02 c0       	rjmp	.+4      	; 0xdea <DIO_voidSetPinDirection+0x1ba>
     de6:	88 0f       	add	r24, r24
     de8:	99 1f       	adc	r25, r25
     dea:	0a 94       	dec	r0
     dec:	e2 f7       	brpl	.-8      	; 0xde6 <DIO_voidSetPinDirection+0x1b6>
     dee:	80 95       	com	r24
     df0:	84 23       	and	r24, r20
     df2:	8c 93       	st	X, r24
     df4:	14 c0       	rjmp	.+40     	; 0xe1e <DIO_voidSetPinDirection+0x1ee>
			case 3 : CLR_BIT(DDRD,copy_u8pin); break; 
     df6:	a1 e3       	ldi	r26, 0x31	; 49
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	e1 e3       	ldi	r30, 0x31	; 49
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	48 2f       	mov	r20, r24
     e02:	8a 81       	ldd	r24, Y+2	; 0x02
     e04:	28 2f       	mov	r18, r24
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	02 2e       	mov	r0, r18
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <DIO_voidSetPinDirection+0x1e4>
     e10:	88 0f       	add	r24, r24
     e12:	99 1f       	adc	r25, r25
     e14:	0a 94       	dec	r0
     e16:	e2 f7       	brpl	.-8      	; 0xe10 <DIO_voidSetPinDirection+0x1e0>
     e18:	80 95       	com	r24
     e1a:	84 23       	and	r24, r20
     e1c:	8c 93       	st	X, r24
		}
	}
}
     e1e:	27 96       	adiw	r28, 0x07	; 7
     e20:	0f b6       	in	r0, 0x3f	; 63
     e22:	f8 94       	cli
     e24:	de bf       	out	0x3e, r29	; 62
     e26:	0f be       	out	0x3f, r0	; 63
     e28:	cd bf       	out	0x3d, r28	; 61
     e2a:	cf 91       	pop	r28
     e2c:	df 91       	pop	r29
     e2e:	08 95       	ret

00000e30 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 copy_u8port, u8 copy_u8pin, u8 copy_u8Value)
{
     e30:	df 93       	push	r29
     e32:	cf 93       	push	r28
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	27 97       	sbiw	r28, 0x07	; 7
     e3a:	0f b6       	in	r0, 0x3f	; 63
     e3c:	f8 94       	cli
     e3e:	de bf       	out	0x3e, r29	; 62
     e40:	0f be       	out	0x3f, r0	; 63
     e42:	cd bf       	out	0x3d, r28	; 61
     e44:	89 83       	std	Y+1, r24	; 0x01
     e46:	6a 83       	std	Y+2, r22	; 0x02
     e48:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8Value == 1)           
     e4a:	8b 81       	ldd	r24, Y+3	; 0x03
     e4c:	81 30       	cpi	r24, 0x01	; 1
     e4e:	09 f0       	breq	.+2      	; 0xe52 <DIO_voidSetPinValue+0x22>
     e50:	6f c0       	rjmp	.+222    	; 0xf30 <DIO_voidSetPinValue+0x100>
	{
		switch(copy_u8port)
     e52:	89 81       	ldd	r24, Y+1	; 0x01
     e54:	28 2f       	mov	r18, r24
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	3f 83       	std	Y+7, r19	; 0x07
     e5a:	2e 83       	std	Y+6, r18	; 0x06
     e5c:	8e 81       	ldd	r24, Y+6	; 0x06
     e5e:	9f 81       	ldd	r25, Y+7	; 0x07
     e60:	81 30       	cpi	r24, 0x01	; 1
     e62:	91 05       	cpc	r25, r1
     e64:	49 f1       	breq	.+82     	; 0xeb8 <DIO_voidSetPinValue+0x88>
     e66:	2e 81       	ldd	r18, Y+6	; 0x06
     e68:	3f 81       	ldd	r19, Y+7	; 0x07
     e6a:	22 30       	cpi	r18, 0x02	; 2
     e6c:	31 05       	cpc	r19, r1
     e6e:	2c f4       	brge	.+10     	; 0xe7a <DIO_voidSetPinValue+0x4a>
     e70:	8e 81       	ldd	r24, Y+6	; 0x06
     e72:	9f 81       	ldd	r25, Y+7	; 0x07
     e74:	00 97       	sbiw	r24, 0x00	; 0
     e76:	61 f0       	breq	.+24     	; 0xe90 <DIO_voidSetPinValue+0x60>
     e78:	d2 c0       	rjmp	.+420    	; 0x101e <DIO_voidSetPinValue+0x1ee>
     e7a:	2e 81       	ldd	r18, Y+6	; 0x06
     e7c:	3f 81       	ldd	r19, Y+7	; 0x07
     e7e:	22 30       	cpi	r18, 0x02	; 2
     e80:	31 05       	cpc	r19, r1
     e82:	71 f1       	breq	.+92     	; 0xee0 <DIO_voidSetPinValue+0xb0>
     e84:	8e 81       	ldd	r24, Y+6	; 0x06
     e86:	9f 81       	ldd	r25, Y+7	; 0x07
     e88:	83 30       	cpi	r24, 0x03	; 3
     e8a:	91 05       	cpc	r25, r1
     e8c:	e9 f1       	breq	.+122    	; 0xf08 <DIO_voidSetPinValue+0xd8>
     e8e:	c7 c0       	rjmp	.+398    	; 0x101e <DIO_voidSetPinValue+0x1ee>
		{
			case 0 : SET_BIT(PORTA,copy_u8pin); break; 
     e90:	ab e3       	ldi	r26, 0x3B	; 59
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	eb e3       	ldi	r30, 0x3B	; 59
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	48 2f       	mov	r20, r24
     e9c:	8a 81       	ldd	r24, Y+2	; 0x02
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	02 2e       	mov	r0, r18
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <DIO_voidSetPinValue+0x7e>
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	0a 94       	dec	r0
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <DIO_voidSetPinValue+0x7a>
     eb2:	84 2b       	or	r24, r20
     eb4:	8c 93       	st	X, r24
     eb6:	b3 c0       	rjmp	.+358    	; 0x101e <DIO_voidSetPinValue+0x1ee>
			case 1 : SET_BIT(PORTB,copy_u8pin); break; 
     eb8:	a8 e3       	ldi	r26, 0x38	; 56
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e8 e3       	ldi	r30, 0x38	; 56
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	48 2f       	mov	r20, r24
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	02 2e       	mov	r0, r18
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <DIO_voidSetPinValue+0xa6>
     ed2:	88 0f       	add	r24, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	0a 94       	dec	r0
     ed8:	e2 f7       	brpl	.-8      	; 0xed2 <DIO_voidSetPinValue+0xa2>
     eda:	84 2b       	or	r24, r20
     edc:	8c 93       	st	X, r24
     ede:	9f c0       	rjmp	.+318    	; 0x101e <DIO_voidSetPinValue+0x1ee>
			case 2 : SET_BIT(PORTC,copy_u8pin); break; 
     ee0:	a5 e3       	ldi	r26, 0x35	; 53
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	e5 e3       	ldi	r30, 0x35	; 53
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	48 2f       	mov	r20, r24
     eec:	8a 81       	ldd	r24, Y+2	; 0x02
     eee:	28 2f       	mov	r18, r24
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	02 2e       	mov	r0, r18
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <DIO_voidSetPinValue+0xce>
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	0a 94       	dec	r0
     f00:	e2 f7       	brpl	.-8      	; 0xefa <DIO_voidSetPinValue+0xca>
     f02:	84 2b       	or	r24, r20
     f04:	8c 93       	st	X, r24
     f06:	8b c0       	rjmp	.+278    	; 0x101e <DIO_voidSetPinValue+0x1ee>
			case 3 : SET_BIT(PORTD,copy_u8pin); break; 
     f08:	a2 e3       	ldi	r26, 0x32	; 50
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	e2 e3       	ldi	r30, 0x32	; 50
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	48 2f       	mov	r20, r24
     f14:	8a 81       	ldd	r24, Y+2	; 0x02
     f16:	28 2f       	mov	r18, r24
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	02 2e       	mov	r0, r18
     f20:	02 c0       	rjmp	.+4      	; 0xf26 <DIO_voidSetPinValue+0xf6>
     f22:	88 0f       	add	r24, r24
     f24:	99 1f       	adc	r25, r25
     f26:	0a 94       	dec	r0
     f28:	e2 f7       	brpl	.-8      	; 0xf22 <DIO_voidSetPinValue+0xf2>
     f2a:	84 2b       	or	r24, r20
     f2c:	8c 93       	st	X, r24
     f2e:	77 c0       	rjmp	.+238    	; 0x101e <DIO_voidSetPinValue+0x1ee>
		}
		
	}
	else if(copy_u8Value == 0)
     f30:	8b 81       	ldd	r24, Y+3	; 0x03
     f32:	88 23       	and	r24, r24
     f34:	09 f0       	breq	.+2      	; 0xf38 <DIO_voidSetPinValue+0x108>
     f36:	73 c0       	rjmp	.+230    	; 0x101e <DIO_voidSetPinValue+0x1ee>
	{
		switch(copy_u8port)
     f38:	89 81       	ldd	r24, Y+1	; 0x01
     f3a:	28 2f       	mov	r18, r24
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	3d 83       	std	Y+5, r19	; 0x05
     f40:	2c 83       	std	Y+4, r18	; 0x04
     f42:	8c 81       	ldd	r24, Y+4	; 0x04
     f44:	9d 81       	ldd	r25, Y+5	; 0x05
     f46:	81 30       	cpi	r24, 0x01	; 1
     f48:	91 05       	cpc	r25, r1
     f4a:	59 f1       	breq	.+86     	; 0xfa2 <DIO_voidSetPinValue+0x172>
     f4c:	2c 81       	ldd	r18, Y+4	; 0x04
     f4e:	3d 81       	ldd	r19, Y+5	; 0x05
     f50:	22 30       	cpi	r18, 0x02	; 2
     f52:	31 05       	cpc	r19, r1
     f54:	2c f4       	brge	.+10     	; 0xf60 <DIO_voidSetPinValue+0x130>
     f56:	8c 81       	ldd	r24, Y+4	; 0x04
     f58:	9d 81       	ldd	r25, Y+5	; 0x05
     f5a:	00 97       	sbiw	r24, 0x00	; 0
     f5c:	69 f0       	breq	.+26     	; 0xf78 <DIO_voidSetPinValue+0x148>
     f5e:	5f c0       	rjmp	.+190    	; 0x101e <DIO_voidSetPinValue+0x1ee>
     f60:	2c 81       	ldd	r18, Y+4	; 0x04
     f62:	3d 81       	ldd	r19, Y+5	; 0x05
     f64:	22 30       	cpi	r18, 0x02	; 2
     f66:	31 05       	cpc	r19, r1
     f68:	89 f1       	breq	.+98     	; 0xfcc <DIO_voidSetPinValue+0x19c>
     f6a:	8c 81       	ldd	r24, Y+4	; 0x04
     f6c:	9d 81       	ldd	r25, Y+5	; 0x05
     f6e:	83 30       	cpi	r24, 0x03	; 3
     f70:	91 05       	cpc	r25, r1
     f72:	09 f4       	brne	.+2      	; 0xf76 <DIO_voidSetPinValue+0x146>
     f74:	40 c0       	rjmp	.+128    	; 0xff6 <DIO_voidSetPinValue+0x1c6>
     f76:	53 c0       	rjmp	.+166    	; 0x101e <DIO_voidSetPinValue+0x1ee>
		{
			case 0 : CLR_BIT(PORTA,copy_u8pin); break; 
     f78:	ab e3       	ldi	r26, 0x3B	; 59
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	eb e3       	ldi	r30, 0x3B	; 59
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	48 2f       	mov	r20, r24
     f84:	8a 81       	ldd	r24, Y+2	; 0x02
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	02 2e       	mov	r0, r18
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <DIO_voidSetPinValue+0x166>
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	0a 94       	dec	r0
     f98:	e2 f7       	brpl	.-8      	; 0xf92 <DIO_voidSetPinValue+0x162>
     f9a:	80 95       	com	r24
     f9c:	84 23       	and	r24, r20
     f9e:	8c 93       	st	X, r24
     fa0:	3e c0       	rjmp	.+124    	; 0x101e <DIO_voidSetPinValue+0x1ee>
			case 1 : CLR_BIT(PORTB,copy_u8pin); break; 
     fa2:	a8 e3       	ldi	r26, 0x38	; 56
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e8 e3       	ldi	r30, 0x38	; 56
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	48 2f       	mov	r20, r24
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	02 2e       	mov	r0, r18
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <DIO_voidSetPinValue+0x190>
     fbc:	88 0f       	add	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	0a 94       	dec	r0
     fc2:	e2 f7       	brpl	.-8      	; 0xfbc <DIO_voidSetPinValue+0x18c>
     fc4:	80 95       	com	r24
     fc6:	84 23       	and	r24, r20
     fc8:	8c 93       	st	X, r24
     fca:	29 c0       	rjmp	.+82     	; 0x101e <DIO_voidSetPinValue+0x1ee>
			case 2 : CLR_BIT(PORTC,copy_u8pin); break; 
     fcc:	a5 e3       	ldi	r26, 0x35	; 53
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	e5 e3       	ldi	r30, 0x35	; 53
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	48 2f       	mov	r20, r24
     fd8:	8a 81       	ldd	r24, Y+2	; 0x02
     fda:	28 2f       	mov	r18, r24
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	02 2e       	mov	r0, r18
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <DIO_voidSetPinValue+0x1ba>
     fe6:	88 0f       	add	r24, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	0a 94       	dec	r0
     fec:	e2 f7       	brpl	.-8      	; 0xfe6 <DIO_voidSetPinValue+0x1b6>
     fee:	80 95       	com	r24
     ff0:	84 23       	and	r24, r20
     ff2:	8c 93       	st	X, r24
     ff4:	14 c0       	rjmp	.+40     	; 0x101e <DIO_voidSetPinValue+0x1ee>
			case 3 : CLR_BIT(PORTD,copy_u8pin); break; 
     ff6:	a2 e3       	ldi	r26, 0x32	; 50
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e2 e3       	ldi	r30, 0x32	; 50
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	48 2f       	mov	r20, r24
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	02 2e       	mov	r0, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <DIO_voidSetPinValue+0x1e4>
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	0a 94       	dec	r0
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <DIO_voidSetPinValue+0x1e0>
    1018:	80 95       	com	r24
    101a:	84 23       	and	r24, r20
    101c:	8c 93       	st	X, r24
		}
	}
	
	
}
    101e:	27 96       	adiw	r28, 0x07	; 7
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	cd bf       	out	0x3d, r28	; 61
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	08 95       	ret

00001030 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 copy_u8port, u8 copy_u8pin)
{
    1030:	df 93       	push	r29
    1032:	cf 93       	push	r28
    1034:	00 d0       	rcall	.+0      	; 0x1036 <DIO_u8GetPinValue+0x6>
    1036:	00 d0       	rcall	.+0      	; 0x1038 <DIO_u8GetPinValue+0x8>
    1038:	00 d0       	rcall	.+0      	; 0x103a <DIO_u8GetPinValue+0xa>
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
    103e:	89 83       	std	Y+1, r24	; 0x01
    1040:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8port)
    1042:	89 81       	ldd	r24, Y+1	; 0x01
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	3d 83       	std	Y+5, r19	; 0x05
    104a:	2c 83       	std	Y+4, r18	; 0x04
    104c:	4c 81       	ldd	r20, Y+4	; 0x04
    104e:	5d 81       	ldd	r21, Y+5	; 0x05
    1050:	41 30       	cpi	r20, 0x01	; 1
    1052:	51 05       	cpc	r21, r1
    1054:	49 f1       	breq	.+82     	; 0x10a8 <DIO_u8GetPinValue+0x78>
    1056:	8c 81       	ldd	r24, Y+4	; 0x04
    1058:	9d 81       	ldd	r25, Y+5	; 0x05
    105a:	82 30       	cpi	r24, 0x02	; 2
    105c:	91 05       	cpc	r25, r1
    105e:	34 f4       	brge	.+12     	; 0x106c <DIO_u8GetPinValue+0x3c>
    1060:	2c 81       	ldd	r18, Y+4	; 0x04
    1062:	3d 81       	ldd	r19, Y+5	; 0x05
    1064:	21 15       	cp	r18, r1
    1066:	31 05       	cpc	r19, r1
    1068:	61 f0       	breq	.+24     	; 0x1082 <DIO_u8GetPinValue+0x52>
    106a:	57 c0       	rjmp	.+174    	; 0x111a <DIO_u8GetPinValue+0xea>
    106c:	4c 81       	ldd	r20, Y+4	; 0x04
    106e:	5d 81       	ldd	r21, Y+5	; 0x05
    1070:	42 30       	cpi	r20, 0x02	; 2
    1072:	51 05       	cpc	r21, r1
    1074:	61 f1       	breq	.+88     	; 0x10ce <DIO_u8GetPinValue+0x9e>
    1076:	8c 81       	ldd	r24, Y+4	; 0x04
    1078:	9d 81       	ldd	r25, Y+5	; 0x05
    107a:	83 30       	cpi	r24, 0x03	; 3
    107c:	91 05       	cpc	r25, r1
    107e:	d1 f1       	breq	.+116    	; 0x10f4 <DIO_u8GetPinValue+0xc4>
    1080:	4c c0       	rjmp	.+152    	; 0x111a <DIO_u8GetPinValue+0xea>
	{   
		case 0 : return GET_BIT(PINA,copy_u8pin); break; 
    1082:	e9 e3       	ldi	r30, 0x39	; 57
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	8a 81       	ldd	r24, Y+2	; 0x02
    108e:	88 2f       	mov	r24, r24
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	a9 01       	movw	r20, r18
    1094:	02 c0       	rjmp	.+4      	; 0x109a <DIO_u8GetPinValue+0x6a>
    1096:	55 95       	asr	r21
    1098:	47 95       	ror	r20
    109a:	8a 95       	dec	r24
    109c:	e2 f7       	brpl	.-8      	; 0x1096 <DIO_u8GetPinValue+0x66>
    109e:	ca 01       	movw	r24, r20
    10a0:	58 2f       	mov	r21, r24
    10a2:	51 70       	andi	r21, 0x01	; 1
    10a4:	5b 83       	std	Y+3, r21	; 0x03
    10a6:	3a c0       	rjmp	.+116    	; 0x111c <DIO_u8GetPinValue+0xec>
		case 1 : return GET_BIT(PINB,copy_u8pin); break; 
    10a8:	e6 e3       	ldi	r30, 0x36	; 54
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	8a 81       	ldd	r24, Y+2	; 0x02
    10b4:	88 2f       	mov	r24, r24
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	a9 01       	movw	r20, r18
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <DIO_u8GetPinValue+0x90>
    10bc:	55 95       	asr	r21
    10be:	47 95       	ror	r20
    10c0:	8a 95       	dec	r24
    10c2:	e2 f7       	brpl	.-8      	; 0x10bc <DIO_u8GetPinValue+0x8c>
    10c4:	ca 01       	movw	r24, r20
    10c6:	58 2f       	mov	r21, r24
    10c8:	51 70       	andi	r21, 0x01	; 1
    10ca:	5b 83       	std	Y+3, r21	; 0x03
    10cc:	27 c0       	rjmp	.+78     	; 0x111c <DIO_u8GetPinValue+0xec>
		case 2 : return GET_BIT(PINC,copy_u8pin); break; 
    10ce:	e3 e3       	ldi	r30, 0x33	; 51
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	8a 81       	ldd	r24, Y+2	; 0x02
    10da:	88 2f       	mov	r24, r24
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	a9 01       	movw	r20, r18
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <DIO_u8GetPinValue+0xb6>
    10e2:	55 95       	asr	r21
    10e4:	47 95       	ror	r20
    10e6:	8a 95       	dec	r24
    10e8:	e2 f7       	brpl	.-8      	; 0x10e2 <DIO_u8GetPinValue+0xb2>
    10ea:	ca 01       	movw	r24, r20
    10ec:	58 2f       	mov	r21, r24
    10ee:	51 70       	andi	r21, 0x01	; 1
    10f0:	5b 83       	std	Y+3, r21	; 0x03
    10f2:	14 c0       	rjmp	.+40     	; 0x111c <DIO_u8GetPinValue+0xec>
		case 3 : return GET_BIT(PIND,copy_u8pin); break; 
    10f4:	e0 e3       	ldi	r30, 0x30	; 48
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1100:	88 2f       	mov	r24, r24
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	a9 01       	movw	r20, r18
    1106:	02 c0       	rjmp	.+4      	; 0x110c <DIO_u8GetPinValue+0xdc>
    1108:	55 95       	asr	r21
    110a:	47 95       	ror	r20
    110c:	8a 95       	dec	r24
    110e:	e2 f7       	brpl	.-8      	; 0x1108 <DIO_u8GetPinValue+0xd8>
    1110:	ca 01       	movw	r24, r20
    1112:	58 2f       	mov	r21, r24
    1114:	51 70       	andi	r21, 0x01	; 1
    1116:	5b 83       	std	Y+3, r21	; 0x03
    1118:	01 c0       	rjmp	.+2      	; 0x111c <DIO_u8GetPinValue+0xec>
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <DIO_u8GetPinValue+0xf0>
	}
	
}
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	8e 83       	std	Y+6, r24	; 0x06
    1120:	8e 81       	ldd	r24, Y+6	; 0x06
    1122:	26 96       	adiw	r28, 0x06	; 6
    1124:	0f b6       	in	r0, 0x3f	; 63
    1126:	f8 94       	cli
    1128:	de bf       	out	0x3e, r29	; 62
    112a:	0f be       	out	0x3f, r0	; 63
    112c:	cd bf       	out	0x3d, r28	; 61
    112e:	cf 91       	pop	r28
    1130:	df 91       	pop	r29
    1132:	08 95       	ret

00001134 <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection(u8 copy_u8port, u8 copy_u8Direction) 
{
    1134:	df 93       	push	r29
    1136:	cf 93       	push	r28
    1138:	00 d0       	rcall	.+0      	; 0x113a <DIO_voidSetPortDirection+0x6>
    113a:	00 d0       	rcall	.+0      	; 0x113c <DIO_voidSetPortDirection+0x8>
    113c:	cd b7       	in	r28, 0x3d	; 61
    113e:	de b7       	in	r29, 0x3e	; 62
    1140:	89 83       	std	Y+1, r24	; 0x01
    1142:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8port)
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	3c 83       	std	Y+4, r19	; 0x04
    114c:	2b 83       	std	Y+3, r18	; 0x03
    114e:	8b 81       	ldd	r24, Y+3	; 0x03
    1150:	9c 81       	ldd	r25, Y+4	; 0x04
    1152:	81 30       	cpi	r24, 0x01	; 1
    1154:	91 05       	cpc	r25, r1
    1156:	d1 f0       	breq	.+52     	; 0x118c <DIO_voidSetPortDirection+0x58>
    1158:	2b 81       	ldd	r18, Y+3	; 0x03
    115a:	3c 81       	ldd	r19, Y+4	; 0x04
    115c:	22 30       	cpi	r18, 0x02	; 2
    115e:	31 05       	cpc	r19, r1
    1160:	2c f4       	brge	.+10     	; 0x116c <DIO_voidSetPortDirection+0x38>
    1162:	8b 81       	ldd	r24, Y+3	; 0x03
    1164:	9c 81       	ldd	r25, Y+4	; 0x04
    1166:	00 97       	sbiw	r24, 0x00	; 0
    1168:	61 f0       	breq	.+24     	; 0x1182 <DIO_voidSetPortDirection+0x4e>
    116a:	1e c0       	rjmp	.+60     	; 0x11a8 <DIO_voidSetPortDirection+0x74>
    116c:	2b 81       	ldd	r18, Y+3	; 0x03
    116e:	3c 81       	ldd	r19, Y+4	; 0x04
    1170:	22 30       	cpi	r18, 0x02	; 2
    1172:	31 05       	cpc	r19, r1
    1174:	81 f0       	breq	.+32     	; 0x1196 <DIO_voidSetPortDirection+0x62>
    1176:	8b 81       	ldd	r24, Y+3	; 0x03
    1178:	9c 81       	ldd	r25, Y+4	; 0x04
    117a:	83 30       	cpi	r24, 0x03	; 3
    117c:	91 05       	cpc	r25, r1
    117e:	81 f0       	breq	.+32     	; 0x11a0 <DIO_voidSetPortDirection+0x6c>
    1180:	13 c0       	rjmp	.+38     	; 0x11a8 <DIO_voidSetPortDirection+0x74>
	{
		case 0 : DDRA = copy_u8Direction; break;
    1182:	ea e3       	ldi	r30, 0x3A	; 58
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	80 83       	st	Z, r24
    118a:	0e c0       	rjmp	.+28     	; 0x11a8 <DIO_voidSetPortDirection+0x74>
		case 1 : DDRB = copy_u8Direction; break;
    118c:	e7 e3       	ldi	r30, 0x37	; 55
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	80 83       	st	Z, r24
    1194:	09 c0       	rjmp	.+18     	; 0x11a8 <DIO_voidSetPortDirection+0x74>
		case 2 : DDRC = copy_u8Direction; break;
    1196:	e4 e3       	ldi	r30, 0x34	; 52
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	80 83       	st	Z, r24
    119e:	04 c0       	rjmp	.+8      	; 0x11a8 <DIO_voidSetPortDirection+0x74>
		case 3 : DDRD = copy_u8Direction; break;
    11a0:	e1 e3       	ldi	r30, 0x31	; 49
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	8a 81       	ldd	r24, Y+2	; 0x02
    11a6:	80 83       	st	Z, r24
	}
	
}
    11a8:	0f 90       	pop	r0
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    11ae:	0f 90       	pop	r0
    11b0:	cf 91       	pop	r28
    11b2:	df 91       	pop	r29
    11b4:	08 95       	ret

000011b6 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 copy_u8port, u8 copy_u8Value)
{
    11b6:	df 93       	push	r29
    11b8:	cf 93       	push	r28
    11ba:	00 d0       	rcall	.+0      	; 0x11bc <DIO_voidSetPortValue+0x6>
    11bc:	00 d0       	rcall	.+0      	; 0x11be <DIO_voidSetPortValue+0x8>
    11be:	cd b7       	in	r28, 0x3d	; 61
    11c0:	de b7       	in	r29, 0x3e	; 62
    11c2:	89 83       	std	Y+1, r24	; 0x01
    11c4:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8port)
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	3c 83       	std	Y+4, r19	; 0x04
    11ce:	2b 83       	std	Y+3, r18	; 0x03
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	9c 81       	ldd	r25, Y+4	; 0x04
    11d4:	81 30       	cpi	r24, 0x01	; 1
    11d6:	91 05       	cpc	r25, r1
    11d8:	d1 f0       	breq	.+52     	; 0x120e <DIO_voidSetPortValue+0x58>
    11da:	2b 81       	ldd	r18, Y+3	; 0x03
    11dc:	3c 81       	ldd	r19, Y+4	; 0x04
    11de:	22 30       	cpi	r18, 0x02	; 2
    11e0:	31 05       	cpc	r19, r1
    11e2:	2c f4       	brge	.+10     	; 0x11ee <DIO_voidSetPortValue+0x38>
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	9c 81       	ldd	r25, Y+4	; 0x04
    11e8:	00 97       	sbiw	r24, 0x00	; 0
    11ea:	61 f0       	breq	.+24     	; 0x1204 <DIO_voidSetPortValue+0x4e>
    11ec:	1e c0       	rjmp	.+60     	; 0x122a <DIO_voidSetPortValue+0x74>
    11ee:	2b 81       	ldd	r18, Y+3	; 0x03
    11f0:	3c 81       	ldd	r19, Y+4	; 0x04
    11f2:	22 30       	cpi	r18, 0x02	; 2
    11f4:	31 05       	cpc	r19, r1
    11f6:	81 f0       	breq	.+32     	; 0x1218 <DIO_voidSetPortValue+0x62>
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	9c 81       	ldd	r25, Y+4	; 0x04
    11fc:	83 30       	cpi	r24, 0x03	; 3
    11fe:	91 05       	cpc	r25, r1
    1200:	81 f0       	breq	.+32     	; 0x1222 <DIO_voidSetPortValue+0x6c>
    1202:	13 c0       	rjmp	.+38     	; 0x122a <DIO_voidSetPortValue+0x74>
	{
		case 0 : PORTA = copy_u8Value; break;
    1204:	eb e3       	ldi	r30, 0x3B	; 59
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	80 83       	st	Z, r24
    120c:	0e c0       	rjmp	.+28     	; 0x122a <DIO_voidSetPortValue+0x74>
		case 1 : PORTB = copy_u8Value; break;
    120e:	e8 e3       	ldi	r30, 0x38	; 56
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	8a 81       	ldd	r24, Y+2	; 0x02
    1214:	80 83       	st	Z, r24
    1216:	09 c0       	rjmp	.+18     	; 0x122a <DIO_voidSetPortValue+0x74>
		case 2 : PORTC = copy_u8Value; break;
    1218:	e5 e3       	ldi	r30, 0x35	; 53
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	8a 81       	ldd	r24, Y+2	; 0x02
    121e:	80 83       	st	Z, r24
    1220:	04 c0       	rjmp	.+8      	; 0x122a <DIO_voidSetPortValue+0x74>
		case 3 : PORTD = copy_u8Value; break;
    1222:	e2 e3       	ldi	r30, 0x32	; 50
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	8a 81       	ldd	r24, Y+2	; 0x02
    1228:	80 83       	st	Z, r24
	}
}
    122a:	0f 90       	pop	r0
    122c:	0f 90       	pop	r0
    122e:	0f 90       	pop	r0
    1230:	0f 90       	pop	r0
    1232:	cf 91       	pop	r28
    1234:	df 91       	pop	r29
    1236:	08 95       	ret

00001238 <DIO_voidTogglePinValue>:

void DIO_voidTogglePinValue(u8 copy_u8port,u8 copy_u8Pin)
{
    1238:	df 93       	push	r29
    123a:	cf 93       	push	r28
    123c:	00 d0       	rcall	.+0      	; 0x123e <DIO_voidTogglePinValue+0x6>
    123e:	00 d0       	rcall	.+0      	; 0x1240 <DIO_voidTogglePinValue+0x8>
    1240:	cd b7       	in	r28, 0x3d	; 61
    1242:	de b7       	in	r29, 0x3e	; 62
    1244:	89 83       	std	Y+1, r24	; 0x01
    1246:	6a 83       	std	Y+2, r22	; 0x02
	
	switch(copy_u8port)
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	3c 83       	std	Y+4, r19	; 0x04
    1250:	2b 83       	std	Y+3, r18	; 0x03
    1252:	8b 81       	ldd	r24, Y+3	; 0x03
    1254:	9c 81       	ldd	r25, Y+4	; 0x04
    1256:	81 30       	cpi	r24, 0x01	; 1
    1258:	91 05       	cpc	r25, r1
    125a:	49 f1       	breq	.+82     	; 0x12ae <DIO_voidTogglePinValue+0x76>
    125c:	2b 81       	ldd	r18, Y+3	; 0x03
    125e:	3c 81       	ldd	r19, Y+4	; 0x04
    1260:	22 30       	cpi	r18, 0x02	; 2
    1262:	31 05       	cpc	r19, r1
    1264:	2c f4       	brge	.+10     	; 0x1270 <DIO_voidTogglePinValue+0x38>
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	9c 81       	ldd	r25, Y+4	; 0x04
    126a:	00 97       	sbiw	r24, 0x00	; 0
    126c:	61 f0       	breq	.+24     	; 0x1286 <DIO_voidTogglePinValue+0x4e>
    126e:	5a c0       	rjmp	.+180    	; 0x1324 <DIO_voidTogglePinValue+0xec>
    1270:	2b 81       	ldd	r18, Y+3	; 0x03
    1272:	3c 81       	ldd	r19, Y+4	; 0x04
    1274:	22 30       	cpi	r18, 0x02	; 2
    1276:	31 05       	cpc	r19, r1
    1278:	71 f1       	breq	.+92     	; 0x12d6 <DIO_voidTogglePinValue+0x9e>
    127a:	8b 81       	ldd	r24, Y+3	; 0x03
    127c:	9c 81       	ldd	r25, Y+4	; 0x04
    127e:	83 30       	cpi	r24, 0x03	; 3
    1280:	91 05       	cpc	r25, r1
    1282:	e9 f1       	breq	.+122    	; 0x12fe <DIO_voidTogglePinValue+0xc6>
    1284:	4f c0       	rjmp	.+158    	; 0x1324 <DIO_voidTogglePinValue+0xec>
	{   
		case 0 :  TOG_BIT(PORTA,copy_u8Pin); break;
    1286:	ab e3       	ldi	r26, 0x3B	; 59
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	eb e3       	ldi	r30, 0x3B	; 59
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	48 2f       	mov	r20, r24
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	28 2f       	mov	r18, r24
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	02 2e       	mov	r0, r18
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <DIO_voidTogglePinValue+0x6c>
    12a0:	88 0f       	add	r24, r24
    12a2:	99 1f       	adc	r25, r25
    12a4:	0a 94       	dec	r0
    12a6:	e2 f7       	brpl	.-8      	; 0x12a0 <DIO_voidTogglePinValue+0x68>
    12a8:	84 27       	eor	r24, r20
    12aa:	8c 93       	st	X, r24
    12ac:	3b c0       	rjmp	.+118    	; 0x1324 <DIO_voidTogglePinValue+0xec>
		case 1 :  TOG_BIT(PORTB,copy_u8Pin); break;
    12ae:	a8 e3       	ldi	r26, 0x38	; 56
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	e8 e3       	ldi	r30, 0x38	; 56
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	48 2f       	mov	r20, r24
    12ba:	8a 81       	ldd	r24, Y+2	; 0x02
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	02 2e       	mov	r0, r18
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <DIO_voidTogglePinValue+0x94>
    12c8:	88 0f       	add	r24, r24
    12ca:	99 1f       	adc	r25, r25
    12cc:	0a 94       	dec	r0
    12ce:	e2 f7       	brpl	.-8      	; 0x12c8 <DIO_voidTogglePinValue+0x90>
    12d0:	84 27       	eor	r24, r20
    12d2:	8c 93       	st	X, r24
    12d4:	27 c0       	rjmp	.+78     	; 0x1324 <DIO_voidTogglePinValue+0xec>
		case 2 :  TOG_BIT(PORTC,copy_u8Pin); break;
    12d6:	a5 e3       	ldi	r26, 0x35	; 53
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	e5 e3       	ldi	r30, 0x35	; 53
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	48 2f       	mov	r20, r24
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	02 2e       	mov	r0, r18
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <DIO_voidTogglePinValue+0xbc>
    12f0:	88 0f       	add	r24, r24
    12f2:	99 1f       	adc	r25, r25
    12f4:	0a 94       	dec	r0
    12f6:	e2 f7       	brpl	.-8      	; 0x12f0 <DIO_voidTogglePinValue+0xb8>
    12f8:	84 27       	eor	r24, r20
    12fa:	8c 93       	st	X, r24
    12fc:	13 c0       	rjmp	.+38     	; 0x1324 <DIO_voidTogglePinValue+0xec>
		case 3 :  TOG_BIT(PORTD,copy_u8Pin); break;
    12fe:	a2 e3       	ldi	r26, 0x32	; 50
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	e2 e3       	ldi	r30, 0x32	; 50
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	48 2f       	mov	r20, r24
    130a:	8a 81       	ldd	r24, Y+2	; 0x02
    130c:	28 2f       	mov	r18, r24
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	02 2e       	mov	r0, r18
    1316:	02 c0       	rjmp	.+4      	; 0x131c <DIO_voidTogglePinValue+0xe4>
    1318:	88 0f       	add	r24, r24
    131a:	99 1f       	adc	r25, r25
    131c:	0a 94       	dec	r0
    131e:	e2 f7       	brpl	.-8      	; 0x1318 <DIO_voidTogglePinValue+0xe0>
    1320:	84 27       	eor	r24, r20
    1322:	8c 93       	st	X, r24
	}
}
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	0f 90       	pop	r0
    132c:	cf 91       	pop	r28
    132e:	df 91       	pop	r29
    1330:	08 95       	ret

00001332 <GIE_voidEnable>:
#include <avr/io.h>
#include "GIE_Interface.h"
#include "BIT_MATH.h"
#include "STD_TYPES.h"
void GIE_voidEnable(void)
{
    1332:	df 93       	push	r29
    1334:	cf 93       	push	r28
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, 7);
    133a:	af e5       	ldi	r26, 0x5F	; 95
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	ef e5       	ldi	r30, 0x5F	; 95
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	80 68       	ori	r24, 0x80	; 128
    1346:	8c 93       	st	X, r24
}
    1348:	cf 91       	pop	r28
    134a:	df 91       	pop	r29
    134c:	08 95       	ret

0000134e <GIE_voidDisable>:

void GIE_voidDisable(void)
{
    134e:	df 93       	push	r29
    1350:	cf 93       	push	r28
    1352:	cd b7       	in	r28, 0x3d	; 61
    1354:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG, 7);
    1356:	af e5       	ldi	r26, 0x5F	; 95
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	ef e5       	ldi	r30, 0x5F	; 95
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	8f 77       	andi	r24, 0x7F	; 127
    1362:	8c 93       	st	X, r24
}
    1364:	cf 91       	pop	r28
    1366:	df 91       	pop	r29
    1368:	08 95       	ret

0000136a <LCD_voidInit>:
#include "LCD_Interface.h"



void LCD_voidInit()
{
    136a:	df 93       	push	r29
    136c:	cf 93       	push	r28
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
    1372:	e8 97       	sbiw	r28, 0x38	; 56
    1374:	0f b6       	in	r0, 0x3f	; 63
    1376:	f8 94       	cli
    1378:	de bf       	out	0x3e, r29	; 62
    137a:	0f be       	out	0x3f, r0	; 63
    137c:	cd bf       	out	0x3d, r28	; 61
	/* SET DATA PORT OUTPUT */
	DIO_voidSetPortDirection(LCD_DATA_PORT, 0xff);
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	6f ef       	ldi	r22, 0xFF	; 255
    1382:	0e 94 9a 08 	call	0x1134	; 0x1134 <DIO_voidSetPortDirection>
	
	/* SET PINS OF CONTROL OUTPUT */
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, RS, DIO_OUTPUT);
    1386:	80 e0       	ldi	r24, 0x00	; 0
    1388:	65 e0       	ldi	r22, 0x05	; 5
    138a:	41 e0       	ldi	r20, 0x01	; 1
    138c:	0e 94 18 06 	call	0xc30	; 0xc30 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, RW, DIO_OUTPUT);
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	66 e0       	ldi	r22, 0x06	; 6
    1394:	41 e0       	ldi	r20, 0x01	; 1
    1396:	0e 94 18 06 	call	0xc30	; 0xc30 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, EN, DIO_OUTPUT);
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	67 e0       	ldi	r22, 0x07	; 7
    139e:	41 e0       	ldi	r20, 0x01	; 1
    13a0:	0e 94 18 06 	call	0xc30	; 0xc30 <DIO_voidSetPinDirection>
    13a4:	80 e0       	ldi	r24, 0x00	; 0
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	a0 ef       	ldi	r26, 0xF0	; 240
    13aa:	b1 e4       	ldi	r27, 0x41	; 65
    13ac:	8d ab       	std	Y+53, r24	; 0x35
    13ae:	9e ab       	std	Y+54, r25	; 0x36
    13b0:	af ab       	std	Y+55, r26	; 0x37
    13b2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13b4:	6d a9       	ldd	r22, Y+53	; 0x35
    13b6:	7e a9       	ldd	r23, Y+54	; 0x36
    13b8:	8f a9       	ldd	r24, Y+55	; 0x37
    13ba:	98 ad       	ldd	r25, Y+56	; 0x38
    13bc:	20 e0       	ldi	r18, 0x00	; 0
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	4a ef       	ldi	r20, 0xFA	; 250
    13c2:	54 e4       	ldi	r21, 0x44	; 68
    13c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13c8:	dc 01       	movw	r26, r24
    13ca:	cb 01       	movw	r24, r22
    13cc:	89 ab       	std	Y+49, r24	; 0x31
    13ce:	9a ab       	std	Y+50, r25	; 0x32
    13d0:	ab ab       	std	Y+51, r26	; 0x33
    13d2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    13d4:	69 a9       	ldd	r22, Y+49	; 0x31
    13d6:	7a a9       	ldd	r23, Y+50	; 0x32
    13d8:	8b a9       	ldd	r24, Y+51	; 0x33
    13da:	9c a9       	ldd	r25, Y+52	; 0x34
    13dc:	20 e0       	ldi	r18, 0x00	; 0
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	40 e8       	ldi	r20, 0x80	; 128
    13e2:	5f e3       	ldi	r21, 0x3F	; 63
    13e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13e8:	88 23       	and	r24, r24
    13ea:	2c f4       	brge	.+10     	; 0x13f6 <LCD_voidInit+0x8c>
		__ticks = 1;
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	98 ab       	std	Y+48, r25	; 0x30
    13f2:	8f a7       	std	Y+47, r24	; 0x2f
    13f4:	3f c0       	rjmp	.+126    	; 0x1474 <LCD_voidInit+0x10a>
	else if (__tmp > 65535)
    13f6:	69 a9       	ldd	r22, Y+49	; 0x31
    13f8:	7a a9       	ldd	r23, Y+50	; 0x32
    13fa:	8b a9       	ldd	r24, Y+51	; 0x33
    13fc:	9c a9       	ldd	r25, Y+52	; 0x34
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	3f ef       	ldi	r19, 0xFF	; 255
    1402:	4f e7       	ldi	r20, 0x7F	; 127
    1404:	57 e4       	ldi	r21, 0x47	; 71
    1406:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    140a:	18 16       	cp	r1, r24
    140c:	4c f5       	brge	.+82     	; 0x1460 <LCD_voidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    140e:	6d a9       	ldd	r22, Y+53	; 0x35
    1410:	7e a9       	ldd	r23, Y+54	; 0x36
    1412:	8f a9       	ldd	r24, Y+55	; 0x37
    1414:	98 ad       	ldd	r25, Y+56	; 0x38
    1416:	20 e0       	ldi	r18, 0x00	; 0
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	40 e2       	ldi	r20, 0x20	; 32
    141c:	51 e4       	ldi	r21, 0x41	; 65
    141e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1422:	dc 01       	movw	r26, r24
    1424:	cb 01       	movw	r24, r22
    1426:	bc 01       	movw	r22, r24
    1428:	cd 01       	movw	r24, r26
    142a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    142e:	dc 01       	movw	r26, r24
    1430:	cb 01       	movw	r24, r22
    1432:	98 ab       	std	Y+48, r25	; 0x30
    1434:	8f a7       	std	Y+47, r24	; 0x2f
    1436:	0f c0       	rjmp	.+30     	; 0x1456 <LCD_voidInit+0xec>
    1438:	88 ec       	ldi	r24, 0xC8	; 200
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	9e a7       	std	Y+46, r25	; 0x2e
    143e:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1440:	8d a5       	ldd	r24, Y+45	; 0x2d
    1442:	9e a5       	ldd	r25, Y+46	; 0x2e
    1444:	01 97       	sbiw	r24, 0x01	; 1
    1446:	f1 f7       	brne	.-4      	; 0x1444 <LCD_voidInit+0xda>
    1448:	9e a7       	std	Y+46, r25	; 0x2e
    144a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    144c:	8f a5       	ldd	r24, Y+47	; 0x2f
    144e:	98 a9       	ldd	r25, Y+48	; 0x30
    1450:	01 97       	sbiw	r24, 0x01	; 1
    1452:	98 ab       	std	Y+48, r25	; 0x30
    1454:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1456:	8f a5       	ldd	r24, Y+47	; 0x2f
    1458:	98 a9       	ldd	r25, Y+48	; 0x30
    145a:	00 97       	sbiw	r24, 0x00	; 0
    145c:	69 f7       	brne	.-38     	; 0x1438 <LCD_voidInit+0xce>
    145e:	14 c0       	rjmp	.+40     	; 0x1488 <LCD_voidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1460:	69 a9       	ldd	r22, Y+49	; 0x31
    1462:	7a a9       	ldd	r23, Y+50	; 0x32
    1464:	8b a9       	ldd	r24, Y+51	; 0x33
    1466:	9c a9       	ldd	r25, Y+52	; 0x34
    1468:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    146c:	dc 01       	movw	r26, r24
    146e:	cb 01       	movw	r24, r22
    1470:	98 ab       	std	Y+48, r25	; 0x30
    1472:	8f a7       	std	Y+47, r24	; 0x2f
    1474:	8f a5       	ldd	r24, Y+47	; 0x2f
    1476:	98 a9       	ldd	r25, Y+48	; 0x30
    1478:	9c a7       	std	Y+44, r25	; 0x2c
    147a:	8b a7       	std	Y+43, r24	; 0x2b
    147c:	8b a5       	ldd	r24, Y+43	; 0x2b
    147e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1480:	01 97       	sbiw	r24, 0x01	; 1
    1482:	f1 f7       	brne	.-4      	; 0x1480 <LCD_voidInit+0x116>
    1484:	9c a7       	std	Y+44, r25	; 0x2c
    1486:	8b a7       	std	Y+43, r24	; 0x2b
	
	/* WAIT 30ms AFTER VDD RISES TO 4.5V */
	_delay_ms(30);
	
	/* FUNCTION SET */
	LCD_voidSendCommand (LCD_FUNC_SET);
    1488:	88 e3       	ldi	r24, 0x38	; 56
    148a:	0e 94 ac 0b 	call	0x1758	; 0x1758 <LCD_voidSendCommand>
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	a0 e8       	ldi	r26, 0x80	; 128
    1494:	bf e3       	ldi	r27, 0x3F	; 63
    1496:	8f a3       	std	Y+39, r24	; 0x27
    1498:	98 a7       	std	Y+40, r25	; 0x28
    149a:	a9 a7       	std	Y+41, r26	; 0x29
    149c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    149e:	6f a1       	ldd	r22, Y+39	; 0x27
    14a0:	78 a5       	ldd	r23, Y+40	; 0x28
    14a2:	89 a5       	ldd	r24, Y+41	; 0x29
    14a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    14a6:	20 e0       	ldi	r18, 0x00	; 0
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	4a ef       	ldi	r20, 0xFA	; 250
    14ac:	54 e4       	ldi	r21, 0x44	; 68
    14ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b2:	dc 01       	movw	r26, r24
    14b4:	cb 01       	movw	r24, r22
    14b6:	8b a3       	std	Y+35, r24	; 0x23
    14b8:	9c a3       	std	Y+36, r25	; 0x24
    14ba:	ad a3       	std	Y+37, r26	; 0x25
    14bc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    14be:	6b a1       	ldd	r22, Y+35	; 0x23
    14c0:	7c a1       	ldd	r23, Y+36	; 0x24
    14c2:	8d a1       	ldd	r24, Y+37	; 0x25
    14c4:	9e a1       	ldd	r25, Y+38	; 0x26
    14c6:	20 e0       	ldi	r18, 0x00	; 0
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	40 e8       	ldi	r20, 0x80	; 128
    14cc:	5f e3       	ldi	r21, 0x3F	; 63
    14ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14d2:	88 23       	and	r24, r24
    14d4:	2c f4       	brge	.+10     	; 0x14e0 <LCD_voidInit+0x176>
		__ticks = 1;
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	9a a3       	std	Y+34, r25	; 0x22
    14dc:	89 a3       	std	Y+33, r24	; 0x21
    14de:	3f c0       	rjmp	.+126    	; 0x155e <LCD_voidInit+0x1f4>
	else if (__tmp > 65535)
    14e0:	6b a1       	ldd	r22, Y+35	; 0x23
    14e2:	7c a1       	ldd	r23, Y+36	; 0x24
    14e4:	8d a1       	ldd	r24, Y+37	; 0x25
    14e6:	9e a1       	ldd	r25, Y+38	; 0x26
    14e8:	20 e0       	ldi	r18, 0x00	; 0
    14ea:	3f ef       	ldi	r19, 0xFF	; 255
    14ec:	4f e7       	ldi	r20, 0x7F	; 127
    14ee:	57 e4       	ldi	r21, 0x47	; 71
    14f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14f4:	18 16       	cp	r1, r24
    14f6:	4c f5       	brge	.+82     	; 0x154a <LCD_voidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14f8:	6f a1       	ldd	r22, Y+39	; 0x27
    14fa:	78 a5       	ldd	r23, Y+40	; 0x28
    14fc:	89 a5       	ldd	r24, Y+41	; 0x29
    14fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1500:	20 e0       	ldi	r18, 0x00	; 0
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	40 e2       	ldi	r20, 0x20	; 32
    1506:	51 e4       	ldi	r21, 0x41	; 65
    1508:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    150c:	dc 01       	movw	r26, r24
    150e:	cb 01       	movw	r24, r22
    1510:	bc 01       	movw	r22, r24
    1512:	cd 01       	movw	r24, r26
    1514:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1518:	dc 01       	movw	r26, r24
    151a:	cb 01       	movw	r24, r22
    151c:	9a a3       	std	Y+34, r25	; 0x22
    151e:	89 a3       	std	Y+33, r24	; 0x21
    1520:	0f c0       	rjmp	.+30     	; 0x1540 <LCD_voidInit+0x1d6>
    1522:	88 ec       	ldi	r24, 0xC8	; 200
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	98 a3       	std	Y+32, r25	; 0x20
    1528:	8f 8f       	std	Y+31, r24	; 0x1f
    152a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    152c:	98 a1       	ldd	r25, Y+32	; 0x20
    152e:	01 97       	sbiw	r24, 0x01	; 1
    1530:	f1 f7       	brne	.-4      	; 0x152e <LCD_voidInit+0x1c4>
    1532:	98 a3       	std	Y+32, r25	; 0x20
    1534:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1536:	89 a1       	ldd	r24, Y+33	; 0x21
    1538:	9a a1       	ldd	r25, Y+34	; 0x22
    153a:	01 97       	sbiw	r24, 0x01	; 1
    153c:	9a a3       	std	Y+34, r25	; 0x22
    153e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1540:	89 a1       	ldd	r24, Y+33	; 0x21
    1542:	9a a1       	ldd	r25, Y+34	; 0x22
    1544:	00 97       	sbiw	r24, 0x00	; 0
    1546:	69 f7       	brne	.-38     	; 0x1522 <LCD_voidInit+0x1b8>
    1548:	14 c0       	rjmp	.+40     	; 0x1572 <LCD_voidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    154a:	6b a1       	ldd	r22, Y+35	; 0x23
    154c:	7c a1       	ldd	r23, Y+36	; 0x24
    154e:	8d a1       	ldd	r24, Y+37	; 0x25
    1550:	9e a1       	ldd	r25, Y+38	; 0x26
    1552:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1556:	dc 01       	movw	r26, r24
    1558:	cb 01       	movw	r24, r22
    155a:	9a a3       	std	Y+34, r25	; 0x22
    155c:	89 a3       	std	Y+33, r24	; 0x21
    155e:	89 a1       	ldd	r24, Y+33	; 0x21
    1560:	9a a1       	ldd	r25, Y+34	; 0x22
    1562:	9e 8f       	std	Y+30, r25	; 0x1e
    1564:	8d 8f       	std	Y+29, r24	; 0x1d
    1566:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1568:	9e 8d       	ldd	r25, Y+30	; 0x1e
    156a:	01 97       	sbiw	r24, 0x01	; 1
    156c:	f1 f7       	brne	.-4      	; 0x156a <LCD_voidInit+0x200>
    156e:	9e 8f       	std	Y+30, r25	; 0x1e
    1570:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	
	/* DISPLAY ON/OFF */
	LCD_voidSendCommand (LCD_ONOF);
    1572:	8f e0       	ldi	r24, 0x0F	; 15
    1574:	0e 94 ac 0b 	call	0x1758	; 0x1758 <LCD_voidSendCommand>
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	a0 e8       	ldi	r26, 0x80	; 128
    157e:	bf e3       	ldi	r27, 0x3F	; 63
    1580:	89 8f       	std	Y+25, r24	; 0x19
    1582:	9a 8f       	std	Y+26, r25	; 0x1a
    1584:	ab 8f       	std	Y+27, r26	; 0x1b
    1586:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1588:	69 8d       	ldd	r22, Y+25	; 0x19
    158a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    158c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    158e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1590:	20 e0       	ldi	r18, 0x00	; 0
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	4a ef       	ldi	r20, 0xFA	; 250
    1596:	54 e4       	ldi	r21, 0x44	; 68
    1598:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    159c:	dc 01       	movw	r26, r24
    159e:	cb 01       	movw	r24, r22
    15a0:	8d 8b       	std	Y+21, r24	; 0x15
    15a2:	9e 8b       	std	Y+22, r25	; 0x16
    15a4:	af 8b       	std	Y+23, r26	; 0x17
    15a6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15a8:	6d 89       	ldd	r22, Y+21	; 0x15
    15aa:	7e 89       	ldd	r23, Y+22	; 0x16
    15ac:	8f 89       	ldd	r24, Y+23	; 0x17
    15ae:	98 8d       	ldd	r25, Y+24	; 0x18
    15b0:	20 e0       	ldi	r18, 0x00	; 0
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	40 e8       	ldi	r20, 0x80	; 128
    15b6:	5f e3       	ldi	r21, 0x3F	; 63
    15b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15bc:	88 23       	and	r24, r24
    15be:	2c f4       	brge	.+10     	; 0x15ca <LCD_voidInit+0x260>
		__ticks = 1;
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	9c 8b       	std	Y+20, r25	; 0x14
    15c6:	8b 8b       	std	Y+19, r24	; 0x13
    15c8:	3f c0       	rjmp	.+126    	; 0x1648 <LCD_voidInit+0x2de>
	else if (__tmp > 65535)
    15ca:	6d 89       	ldd	r22, Y+21	; 0x15
    15cc:	7e 89       	ldd	r23, Y+22	; 0x16
    15ce:	8f 89       	ldd	r24, Y+23	; 0x17
    15d0:	98 8d       	ldd	r25, Y+24	; 0x18
    15d2:	20 e0       	ldi	r18, 0x00	; 0
    15d4:	3f ef       	ldi	r19, 0xFF	; 255
    15d6:	4f e7       	ldi	r20, 0x7F	; 127
    15d8:	57 e4       	ldi	r21, 0x47	; 71
    15da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15de:	18 16       	cp	r1, r24
    15e0:	4c f5       	brge	.+82     	; 0x1634 <LCD_voidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15e2:	69 8d       	ldd	r22, Y+25	; 0x19
    15e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15ea:	20 e0       	ldi	r18, 0x00	; 0
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	40 e2       	ldi	r20, 0x20	; 32
    15f0:	51 e4       	ldi	r21, 0x41	; 65
    15f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15f6:	dc 01       	movw	r26, r24
    15f8:	cb 01       	movw	r24, r22
    15fa:	bc 01       	movw	r22, r24
    15fc:	cd 01       	movw	r24, r26
    15fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1602:	dc 01       	movw	r26, r24
    1604:	cb 01       	movw	r24, r22
    1606:	9c 8b       	std	Y+20, r25	; 0x14
    1608:	8b 8b       	std	Y+19, r24	; 0x13
    160a:	0f c0       	rjmp	.+30     	; 0x162a <LCD_voidInit+0x2c0>
    160c:	88 ec       	ldi	r24, 0xC8	; 200
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	9a 8b       	std	Y+18, r25	; 0x12
    1612:	89 8b       	std	Y+17, r24	; 0x11
    1614:	89 89       	ldd	r24, Y+17	; 0x11
    1616:	9a 89       	ldd	r25, Y+18	; 0x12
    1618:	01 97       	sbiw	r24, 0x01	; 1
    161a:	f1 f7       	brne	.-4      	; 0x1618 <LCD_voidInit+0x2ae>
    161c:	9a 8b       	std	Y+18, r25	; 0x12
    161e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1620:	8b 89       	ldd	r24, Y+19	; 0x13
    1622:	9c 89       	ldd	r25, Y+20	; 0x14
    1624:	01 97       	sbiw	r24, 0x01	; 1
    1626:	9c 8b       	std	Y+20, r25	; 0x14
    1628:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    162a:	8b 89       	ldd	r24, Y+19	; 0x13
    162c:	9c 89       	ldd	r25, Y+20	; 0x14
    162e:	00 97       	sbiw	r24, 0x00	; 0
    1630:	69 f7       	brne	.-38     	; 0x160c <LCD_voidInit+0x2a2>
    1632:	14 c0       	rjmp	.+40     	; 0x165c <LCD_voidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1634:	6d 89       	ldd	r22, Y+21	; 0x15
    1636:	7e 89       	ldd	r23, Y+22	; 0x16
    1638:	8f 89       	ldd	r24, Y+23	; 0x17
    163a:	98 8d       	ldd	r25, Y+24	; 0x18
    163c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1640:	dc 01       	movw	r26, r24
    1642:	cb 01       	movw	r24, r22
    1644:	9c 8b       	std	Y+20, r25	; 0x14
    1646:	8b 8b       	std	Y+19, r24	; 0x13
    1648:	8b 89       	ldd	r24, Y+19	; 0x13
    164a:	9c 89       	ldd	r25, Y+20	; 0x14
    164c:	98 8b       	std	Y+16, r25	; 0x10
    164e:	8f 87       	std	Y+15, r24	; 0x0f
    1650:	8f 85       	ldd	r24, Y+15	; 0x0f
    1652:	98 89       	ldd	r25, Y+16	; 0x10
    1654:	01 97       	sbiw	r24, 0x01	; 1
    1656:	f1 f7       	brne	.-4      	; 0x1654 <LCD_voidInit+0x2ea>
    1658:	98 8b       	std	Y+16, r25	; 0x10
    165a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	
	/* DISPLAY CLEAR */
	LCD_voidSendCommand (LCD_CLEAR);
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	0e 94 ac 0b 	call	0x1758	; 0x1758 <LCD_voidSendCommand>
    1662:	80 e0       	ldi	r24, 0x00	; 0
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	a0 e0       	ldi	r26, 0x00	; 0
    1668:	b0 e4       	ldi	r27, 0x40	; 64
    166a:	8b 87       	std	Y+11, r24	; 0x0b
    166c:	9c 87       	std	Y+12, r25	; 0x0c
    166e:	ad 87       	std	Y+13, r26	; 0x0d
    1670:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1672:	6b 85       	ldd	r22, Y+11	; 0x0b
    1674:	7c 85       	ldd	r23, Y+12	; 0x0c
    1676:	8d 85       	ldd	r24, Y+13	; 0x0d
    1678:	9e 85       	ldd	r25, Y+14	; 0x0e
    167a:	20 e0       	ldi	r18, 0x00	; 0
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	4a ef       	ldi	r20, 0xFA	; 250
    1680:	54 e4       	ldi	r21, 0x44	; 68
    1682:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1686:	dc 01       	movw	r26, r24
    1688:	cb 01       	movw	r24, r22
    168a:	8f 83       	std	Y+7, r24	; 0x07
    168c:	98 87       	std	Y+8, r25	; 0x08
    168e:	a9 87       	std	Y+9, r26	; 0x09
    1690:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1692:	6f 81       	ldd	r22, Y+7	; 0x07
    1694:	78 85       	ldd	r23, Y+8	; 0x08
    1696:	89 85       	ldd	r24, Y+9	; 0x09
    1698:	9a 85       	ldd	r25, Y+10	; 0x0a
    169a:	20 e0       	ldi	r18, 0x00	; 0
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	40 e8       	ldi	r20, 0x80	; 128
    16a0:	5f e3       	ldi	r21, 0x3F	; 63
    16a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16a6:	88 23       	and	r24, r24
    16a8:	2c f4       	brge	.+10     	; 0x16b4 <LCD_voidInit+0x34a>
		__ticks = 1;
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	9e 83       	std	Y+6, r25	; 0x06
    16b0:	8d 83       	std	Y+5, r24	; 0x05
    16b2:	3f c0       	rjmp	.+126    	; 0x1732 <LCD_voidInit+0x3c8>
	else if (__tmp > 65535)
    16b4:	6f 81       	ldd	r22, Y+7	; 0x07
    16b6:	78 85       	ldd	r23, Y+8	; 0x08
    16b8:	89 85       	ldd	r24, Y+9	; 0x09
    16ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	3f ef       	ldi	r19, 0xFF	; 255
    16c0:	4f e7       	ldi	r20, 0x7F	; 127
    16c2:	57 e4       	ldi	r21, 0x47	; 71
    16c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16c8:	18 16       	cp	r1, r24
    16ca:	4c f5       	brge	.+82     	; 0x171e <LCD_voidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    16d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    16d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    16d4:	20 e0       	ldi	r18, 0x00	; 0
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	40 e2       	ldi	r20, 0x20	; 32
    16da:	51 e4       	ldi	r21, 0x41	; 65
    16dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16e0:	dc 01       	movw	r26, r24
    16e2:	cb 01       	movw	r24, r22
    16e4:	bc 01       	movw	r22, r24
    16e6:	cd 01       	movw	r24, r26
    16e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ec:	dc 01       	movw	r26, r24
    16ee:	cb 01       	movw	r24, r22
    16f0:	9e 83       	std	Y+6, r25	; 0x06
    16f2:	8d 83       	std	Y+5, r24	; 0x05
    16f4:	0f c0       	rjmp	.+30     	; 0x1714 <LCD_voidInit+0x3aa>
    16f6:	88 ec       	ldi	r24, 0xC8	; 200
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	9c 83       	std	Y+4, r25	; 0x04
    16fc:	8b 83       	std	Y+3, r24	; 0x03
    16fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1700:	9c 81       	ldd	r25, Y+4	; 0x04
    1702:	01 97       	sbiw	r24, 0x01	; 1
    1704:	f1 f7       	brne	.-4      	; 0x1702 <LCD_voidInit+0x398>
    1706:	9c 83       	std	Y+4, r25	; 0x04
    1708:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    170a:	8d 81       	ldd	r24, Y+5	; 0x05
    170c:	9e 81       	ldd	r25, Y+6	; 0x06
    170e:	01 97       	sbiw	r24, 0x01	; 1
    1710:	9e 83       	std	Y+6, r25	; 0x06
    1712:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1714:	8d 81       	ldd	r24, Y+5	; 0x05
    1716:	9e 81       	ldd	r25, Y+6	; 0x06
    1718:	00 97       	sbiw	r24, 0x00	; 0
    171a:	69 f7       	brne	.-38     	; 0x16f6 <LCD_voidInit+0x38c>
    171c:	14 c0       	rjmp	.+40     	; 0x1746 <LCD_voidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    171e:	6f 81       	ldd	r22, Y+7	; 0x07
    1720:	78 85       	ldd	r23, Y+8	; 0x08
    1722:	89 85       	ldd	r24, Y+9	; 0x09
    1724:	9a 85       	ldd	r25, Y+10	; 0x0a
    1726:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    172a:	dc 01       	movw	r26, r24
    172c:	cb 01       	movw	r24, r22
    172e:	9e 83       	std	Y+6, r25	; 0x06
    1730:	8d 83       	std	Y+5, r24	; 0x05
    1732:	8d 81       	ldd	r24, Y+5	; 0x05
    1734:	9e 81       	ldd	r25, Y+6	; 0x06
    1736:	9a 83       	std	Y+2, r25	; 0x02
    1738:	89 83       	std	Y+1, r24	; 0x01
    173a:	89 81       	ldd	r24, Y+1	; 0x01
    173c:	9a 81       	ldd	r25, Y+2	; 0x02
    173e:	01 97       	sbiw	r24, 0x01	; 1
    1740:	f1 f7       	brne	.-4      	; 0x173e <LCD_voidInit+0x3d4>
    1742:	9a 83       	std	Y+2, r25	; 0x02
    1744:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	
}
    1746:	e8 96       	adiw	r28, 0x38	; 56
    1748:	0f b6       	in	r0, 0x3f	; 63
    174a:	f8 94       	cli
    174c:	de bf       	out	0x3e, r29	; 62
    174e:	0f be       	out	0x3f, r0	; 63
    1750:	cd bf       	out	0x3d, r28	; 61
    1752:	cf 91       	pop	r28
    1754:	df 91       	pop	r29
    1756:	08 95       	ret

00001758 <LCD_voidSendCommand>:

void LCD_voidSendCommand(u8 Copy_U8Command)
{
    1758:	df 93       	push	r29
    175a:	cf 93       	push	r28
    175c:	cd b7       	in	r28, 0x3d	; 61
    175e:	de b7       	in	r29, 0x3e	; 62
    1760:	2f 97       	sbiw	r28, 0x0f	; 15
    1762:	0f b6       	in	r0, 0x3f	; 63
    1764:	f8 94       	cli
    1766:	de bf       	out	0x3e, r29	; 62
    1768:	0f be       	out	0x3f, r0	; 63
    176a:	cd bf       	out	0x3d, r28	; 61
    176c:	8f 87       	std	Y+15, r24	; 0x0f
	/* RS = 0 */
	DIO_voidSetPinValue(LCD_CONTROL_PORT, RS, DIO_LOW);
    176e:	80 e0       	ldi	r24, 0x00	; 0
    1770:	65 e0       	ldi	r22, 0x05	; 5
    1772:	40 e0       	ldi	r20, 0x00	; 0
    1774:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_voidSetPinValue>
	/* RW = 0 */
	DIO_voidSetPinValue(LCD_CONTROL_PORT, RW, DIO_LOW);
    1778:	80 e0       	ldi	r24, 0x00	; 0
    177a:	66 e0       	ldi	r22, 0x06	; 6
    177c:	40 e0       	ldi	r20, 0x00	; 0
    177e:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_voidSetPinValue>
	/* PUT THE COMMAND ON DATA PINS */
	DIO_voidSetPortValue(LCD_DATA_PORT, Copy_U8Command);
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	6f 85       	ldd	r22, Y+15	; 0x0f
    1786:	0e 94 db 08 	call	0x11b6	; 0x11b6 <DIO_voidSetPortValue>
	/* E = 1 */
	DIO_voidSetPinValue(LCD_CONTROL_PORT, EN, DIO_HIGH);
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	67 e0       	ldi	r22, 0x07	; 7
    178e:	41 e0       	ldi	r20, 0x01	; 1
    1790:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_voidSetPinValue>
    1794:	80 e0       	ldi	r24, 0x00	; 0
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	a0 e0       	ldi	r26, 0x00	; 0
    179a:	b0 e4       	ldi	r27, 0x40	; 64
    179c:	8b 87       	std	Y+11, r24	; 0x0b
    179e:	9c 87       	std	Y+12, r25	; 0x0c
    17a0:	ad 87       	std	Y+13, r26	; 0x0d
    17a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    17a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    17a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    17aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	4a ef       	ldi	r20, 0xFA	; 250
    17b2:	54 e4       	ldi	r21, 0x44	; 68
    17b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17b8:	dc 01       	movw	r26, r24
    17ba:	cb 01       	movw	r24, r22
    17bc:	8f 83       	std	Y+7, r24	; 0x07
    17be:	98 87       	std	Y+8, r25	; 0x08
    17c0:	a9 87       	std	Y+9, r26	; 0x09
    17c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17c4:	6f 81       	ldd	r22, Y+7	; 0x07
    17c6:	78 85       	ldd	r23, Y+8	; 0x08
    17c8:	89 85       	ldd	r24, Y+9	; 0x09
    17ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	40 e8       	ldi	r20, 0x80	; 128
    17d2:	5f e3       	ldi	r21, 0x3F	; 63
    17d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17d8:	88 23       	and	r24, r24
    17da:	2c f4       	brge	.+10     	; 0x17e6 <LCD_voidSendCommand+0x8e>
		__ticks = 1;
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	9e 83       	std	Y+6, r25	; 0x06
    17e2:	8d 83       	std	Y+5, r24	; 0x05
    17e4:	3f c0       	rjmp	.+126    	; 0x1864 <LCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    17e6:	6f 81       	ldd	r22, Y+7	; 0x07
    17e8:	78 85       	ldd	r23, Y+8	; 0x08
    17ea:	89 85       	ldd	r24, Y+9	; 0x09
    17ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	3f ef       	ldi	r19, 0xFF	; 255
    17f2:	4f e7       	ldi	r20, 0x7F	; 127
    17f4:	57 e4       	ldi	r21, 0x47	; 71
    17f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17fa:	18 16       	cp	r1, r24
    17fc:	4c f5       	brge	.+82     	; 0x1850 <LCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1800:	7c 85       	ldd	r23, Y+12	; 0x0c
    1802:	8d 85       	ldd	r24, Y+13	; 0x0d
    1804:	9e 85       	ldd	r25, Y+14	; 0x0e
    1806:	20 e0       	ldi	r18, 0x00	; 0
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	40 e2       	ldi	r20, 0x20	; 32
    180c:	51 e4       	ldi	r21, 0x41	; 65
    180e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1812:	dc 01       	movw	r26, r24
    1814:	cb 01       	movw	r24, r22
    1816:	bc 01       	movw	r22, r24
    1818:	cd 01       	movw	r24, r26
    181a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    181e:	dc 01       	movw	r26, r24
    1820:	cb 01       	movw	r24, r22
    1822:	9e 83       	std	Y+6, r25	; 0x06
    1824:	8d 83       	std	Y+5, r24	; 0x05
    1826:	0f c0       	rjmp	.+30     	; 0x1846 <LCD_voidSendCommand+0xee>
    1828:	88 ec       	ldi	r24, 0xC8	; 200
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	9c 83       	std	Y+4, r25	; 0x04
    182e:	8b 83       	std	Y+3, r24	; 0x03
    1830:	8b 81       	ldd	r24, Y+3	; 0x03
    1832:	9c 81       	ldd	r25, Y+4	; 0x04
    1834:	01 97       	sbiw	r24, 0x01	; 1
    1836:	f1 f7       	brne	.-4      	; 0x1834 <LCD_voidSendCommand+0xdc>
    1838:	9c 83       	std	Y+4, r25	; 0x04
    183a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    183c:	8d 81       	ldd	r24, Y+5	; 0x05
    183e:	9e 81       	ldd	r25, Y+6	; 0x06
    1840:	01 97       	sbiw	r24, 0x01	; 1
    1842:	9e 83       	std	Y+6, r25	; 0x06
    1844:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1846:	8d 81       	ldd	r24, Y+5	; 0x05
    1848:	9e 81       	ldd	r25, Y+6	; 0x06
    184a:	00 97       	sbiw	r24, 0x00	; 0
    184c:	69 f7       	brne	.-38     	; 0x1828 <LCD_voidSendCommand+0xd0>
    184e:	14 c0       	rjmp	.+40     	; 0x1878 <LCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1850:	6f 81       	ldd	r22, Y+7	; 0x07
    1852:	78 85       	ldd	r23, Y+8	; 0x08
    1854:	89 85       	ldd	r24, Y+9	; 0x09
    1856:	9a 85       	ldd	r25, Y+10	; 0x0a
    1858:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    185c:	dc 01       	movw	r26, r24
    185e:	cb 01       	movw	r24, r22
    1860:	9e 83       	std	Y+6, r25	; 0x06
    1862:	8d 83       	std	Y+5, r24	; 0x05
    1864:	8d 81       	ldd	r24, Y+5	; 0x05
    1866:	9e 81       	ldd	r25, Y+6	; 0x06
    1868:	9a 83       	std	Y+2, r25	; 0x02
    186a:	89 83       	std	Y+1, r24	; 0x01
    186c:	89 81       	ldd	r24, Y+1	; 0x01
    186e:	9a 81       	ldd	r25, Y+2	; 0x02
    1870:	01 97       	sbiw	r24, 0x01	; 1
    1872:	f1 f7       	brne	.-4      	; 0x1870 <LCD_voidSendCommand+0x118>
    1874:	9a 83       	std	Y+2, r25	; 0x02
    1876:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/* E = 0 */
	DIO_voidSetPinValue(LCD_CONTROL_PORT, EN, DIO_LOW);
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	67 e0       	ldi	r22, 0x07	; 7
    187c:	40 e0       	ldi	r20, 0x00	; 0
    187e:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_voidSetPinValue>
	
}
    1882:	2f 96       	adiw	r28, 0x0f	; 15
    1884:	0f b6       	in	r0, 0x3f	; 63
    1886:	f8 94       	cli
    1888:	de bf       	out	0x3e, r29	; 62
    188a:	0f be       	out	0x3f, r0	; 63
    188c:	cd bf       	out	0x3d, r28	; 61
    188e:	cf 91       	pop	r28
    1890:	df 91       	pop	r29
    1892:	08 95       	ret

00001894 <LCD_voidSendChar>:

void LCD_voidSendChar (u8 Copy_U8Data)
{
    1894:	df 93       	push	r29
    1896:	cf 93       	push	r28
    1898:	cd b7       	in	r28, 0x3d	; 61
    189a:	de b7       	in	r29, 0x3e	; 62
    189c:	6d 97       	sbiw	r28, 0x1d	; 29
    189e:	0f b6       	in	r0, 0x3f	; 63
    18a0:	f8 94       	cli
    18a2:	de bf       	out	0x3e, r29	; 62
    18a4:	0f be       	out	0x3f, r0	; 63
    18a6:	cd bf       	out	0x3d, r28	; 61
    18a8:	8d 8f       	std	Y+29, r24	; 0x1d
	/* RS = 1 */
	DIO_voidSetPinValue(LCD_CONTROL_PORT, RS, DIO_HIGH);
    18aa:	80 e0       	ldi	r24, 0x00	; 0
    18ac:	65 e0       	ldi	r22, 0x05	; 5
    18ae:	41 e0       	ldi	r20, 0x01	; 1
    18b0:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_voidSetPinValue>
    /* RW = 0 */
    DIO_voidSetPinValue(LCD_CONTROL_PORT, RW, DIO_LOW);
    18b4:	80 e0       	ldi	r24, 0x00	; 0
    18b6:	66 e0       	ldi	r22, 0x06	; 6
    18b8:	40 e0       	ldi	r20, 0x00	; 0
    18ba:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_voidSetPinValue>
    /* PUT THE COMMAND ON DATA PINS */
    DIO_voidSetPortValue(LCD_DATA_PORT, Copy_U8Data);
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    18c2:	0e 94 db 08 	call	0x11b6	; 0x11b6 <DIO_voidSetPortValue>
    /* E = 1 */
    DIO_voidSetPinValue(LCD_CONTROL_PORT, EN, DIO_HIGH);
    18c6:	80 e0       	ldi	r24, 0x00	; 0
    18c8:	67 e0       	ldi	r22, 0x07	; 7
    18ca:	41 e0       	ldi	r20, 0x01	; 1
    18cc:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_voidSetPinValue>
    18d0:	80 e0       	ldi	r24, 0x00	; 0
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	a0 e0       	ldi	r26, 0x00	; 0
    18d6:	b0 e4       	ldi	r27, 0x40	; 64
    18d8:	89 8f       	std	Y+25, r24	; 0x19
    18da:	9a 8f       	std	Y+26, r25	; 0x1a
    18dc:	ab 8f       	std	Y+27, r26	; 0x1b
    18de:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18e0:	69 8d       	ldd	r22, Y+25	; 0x19
    18e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	4a ef       	ldi	r20, 0xFA	; 250
    18ee:	54 e4       	ldi	r21, 0x44	; 68
    18f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f4:	dc 01       	movw	r26, r24
    18f6:	cb 01       	movw	r24, r22
    18f8:	8d 8b       	std	Y+21, r24	; 0x15
    18fa:	9e 8b       	std	Y+22, r25	; 0x16
    18fc:	af 8b       	std	Y+23, r26	; 0x17
    18fe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1900:	6d 89       	ldd	r22, Y+21	; 0x15
    1902:	7e 89       	ldd	r23, Y+22	; 0x16
    1904:	8f 89       	ldd	r24, Y+23	; 0x17
    1906:	98 8d       	ldd	r25, Y+24	; 0x18
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	40 e8       	ldi	r20, 0x80	; 128
    190e:	5f e3       	ldi	r21, 0x3F	; 63
    1910:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1914:	88 23       	and	r24, r24
    1916:	2c f4       	brge	.+10     	; 0x1922 <LCD_voidSendChar+0x8e>
		__ticks = 1;
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	9c 8b       	std	Y+20, r25	; 0x14
    191e:	8b 8b       	std	Y+19, r24	; 0x13
    1920:	3f c0       	rjmp	.+126    	; 0x19a0 <LCD_voidSendChar+0x10c>
	else if (__tmp > 65535)
    1922:	6d 89       	ldd	r22, Y+21	; 0x15
    1924:	7e 89       	ldd	r23, Y+22	; 0x16
    1926:	8f 89       	ldd	r24, Y+23	; 0x17
    1928:	98 8d       	ldd	r25, Y+24	; 0x18
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	3f ef       	ldi	r19, 0xFF	; 255
    192e:	4f e7       	ldi	r20, 0x7F	; 127
    1930:	57 e4       	ldi	r21, 0x47	; 71
    1932:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1936:	18 16       	cp	r1, r24
    1938:	4c f5       	brge	.+82     	; 0x198c <LCD_voidSendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    193a:	69 8d       	ldd	r22, Y+25	; 0x19
    193c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    193e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1940:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1942:	20 e0       	ldi	r18, 0x00	; 0
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	40 e2       	ldi	r20, 0x20	; 32
    1948:	51 e4       	ldi	r21, 0x41	; 65
    194a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    194e:	dc 01       	movw	r26, r24
    1950:	cb 01       	movw	r24, r22
    1952:	bc 01       	movw	r22, r24
    1954:	cd 01       	movw	r24, r26
    1956:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    195a:	dc 01       	movw	r26, r24
    195c:	cb 01       	movw	r24, r22
    195e:	9c 8b       	std	Y+20, r25	; 0x14
    1960:	8b 8b       	std	Y+19, r24	; 0x13
    1962:	0f c0       	rjmp	.+30     	; 0x1982 <LCD_voidSendChar+0xee>
    1964:	88 ec       	ldi	r24, 0xC8	; 200
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	9a 8b       	std	Y+18, r25	; 0x12
    196a:	89 8b       	std	Y+17, r24	; 0x11
    196c:	89 89       	ldd	r24, Y+17	; 0x11
    196e:	9a 89       	ldd	r25, Y+18	; 0x12
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	f1 f7       	brne	.-4      	; 0x1970 <LCD_voidSendChar+0xdc>
    1974:	9a 8b       	std	Y+18, r25	; 0x12
    1976:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1978:	8b 89       	ldd	r24, Y+19	; 0x13
    197a:	9c 89       	ldd	r25, Y+20	; 0x14
    197c:	01 97       	sbiw	r24, 0x01	; 1
    197e:	9c 8b       	std	Y+20, r25	; 0x14
    1980:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1982:	8b 89       	ldd	r24, Y+19	; 0x13
    1984:	9c 89       	ldd	r25, Y+20	; 0x14
    1986:	00 97       	sbiw	r24, 0x00	; 0
    1988:	69 f7       	brne	.-38     	; 0x1964 <LCD_voidSendChar+0xd0>
    198a:	14 c0       	rjmp	.+40     	; 0x19b4 <LCD_voidSendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    198c:	6d 89       	ldd	r22, Y+21	; 0x15
    198e:	7e 89       	ldd	r23, Y+22	; 0x16
    1990:	8f 89       	ldd	r24, Y+23	; 0x17
    1992:	98 8d       	ldd	r25, Y+24	; 0x18
    1994:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	9c 8b       	std	Y+20, r25	; 0x14
    199e:	8b 8b       	std	Y+19, r24	; 0x13
    19a0:	8b 89       	ldd	r24, Y+19	; 0x13
    19a2:	9c 89       	ldd	r25, Y+20	; 0x14
    19a4:	98 8b       	std	Y+16, r25	; 0x10
    19a6:	8f 87       	std	Y+15, r24	; 0x0f
    19a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    19aa:	98 89       	ldd	r25, Y+16	; 0x10
    19ac:	01 97       	sbiw	r24, 0x01	; 1
    19ae:	f1 f7       	brne	.-4      	; 0x19ac <LCD_voidSendChar+0x118>
    19b0:	98 8b       	std	Y+16, r25	; 0x10
    19b2:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2);
    /* E = 0 */
    DIO_voidSetPinValue(LCD_CONTROL_PORT, EN, DIO_LOW);
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	67 e0       	ldi	r22, 0x07	; 7
    19b8:	40 e0       	ldi	r20, 0x00	; 0
    19ba:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_voidSetPinValue>
    19be:	80 e0       	ldi	r24, 0x00	; 0
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	a0 e0       	ldi	r26, 0x00	; 0
    19c4:	b0 e4       	ldi	r27, 0x40	; 64
    19c6:	8b 87       	std	Y+11, r24	; 0x0b
    19c8:	9c 87       	std	Y+12, r25	; 0x0c
    19ca:	ad 87       	std	Y+13, r26	; 0x0d
    19cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    19d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    19d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    19d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	4a ef       	ldi	r20, 0xFA	; 250
    19dc:	54 e4       	ldi	r21, 0x44	; 68
    19de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e2:	dc 01       	movw	r26, r24
    19e4:	cb 01       	movw	r24, r22
    19e6:	8f 83       	std	Y+7, r24	; 0x07
    19e8:	98 87       	std	Y+8, r25	; 0x08
    19ea:	a9 87       	std	Y+9, r26	; 0x09
    19ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19ee:	6f 81       	ldd	r22, Y+7	; 0x07
    19f0:	78 85       	ldd	r23, Y+8	; 0x08
    19f2:	89 85       	ldd	r24, Y+9	; 0x09
    19f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19f6:	20 e0       	ldi	r18, 0x00	; 0
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	40 e8       	ldi	r20, 0x80	; 128
    19fc:	5f e3       	ldi	r21, 0x3F	; 63
    19fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a02:	88 23       	and	r24, r24
    1a04:	2c f4       	brge	.+10     	; 0x1a10 <LCD_voidSendChar+0x17c>
		__ticks = 1;
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	9e 83       	std	Y+6, r25	; 0x06
    1a0c:	8d 83       	std	Y+5, r24	; 0x05
    1a0e:	3f c0       	rjmp	.+126    	; 0x1a8e <LCD_voidSendChar+0x1fa>
	else if (__tmp > 65535)
    1a10:	6f 81       	ldd	r22, Y+7	; 0x07
    1a12:	78 85       	ldd	r23, Y+8	; 0x08
    1a14:	89 85       	ldd	r24, Y+9	; 0x09
    1a16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a18:	20 e0       	ldi	r18, 0x00	; 0
    1a1a:	3f ef       	ldi	r19, 0xFF	; 255
    1a1c:	4f e7       	ldi	r20, 0x7F	; 127
    1a1e:	57 e4       	ldi	r21, 0x47	; 71
    1a20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a24:	18 16       	cp	r1, r24
    1a26:	4c f5       	brge	.+82     	; 0x1a7a <LCD_voidSendChar+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	40 e2       	ldi	r20, 0x20	; 32
    1a36:	51 e4       	ldi	r21, 0x41	; 65
    1a38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	bc 01       	movw	r22, r24
    1a42:	cd 01       	movw	r24, r26
    1a44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a48:	dc 01       	movw	r26, r24
    1a4a:	cb 01       	movw	r24, r22
    1a4c:	9e 83       	std	Y+6, r25	; 0x06
    1a4e:	8d 83       	std	Y+5, r24	; 0x05
    1a50:	0f c0       	rjmp	.+30     	; 0x1a70 <LCD_voidSendChar+0x1dc>
    1a52:	88 ec       	ldi	r24, 0xC8	; 200
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	9c 83       	std	Y+4, r25	; 0x04
    1a58:	8b 83       	std	Y+3, r24	; 0x03
    1a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a5e:	01 97       	sbiw	r24, 0x01	; 1
    1a60:	f1 f7       	brne	.-4      	; 0x1a5e <LCD_voidSendChar+0x1ca>
    1a62:	9c 83       	std	Y+4, r25	; 0x04
    1a64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a66:	8d 81       	ldd	r24, Y+5	; 0x05
    1a68:	9e 81       	ldd	r25, Y+6	; 0x06
    1a6a:	01 97       	sbiw	r24, 0x01	; 1
    1a6c:	9e 83       	std	Y+6, r25	; 0x06
    1a6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a70:	8d 81       	ldd	r24, Y+5	; 0x05
    1a72:	9e 81       	ldd	r25, Y+6	; 0x06
    1a74:	00 97       	sbiw	r24, 0x00	; 0
    1a76:	69 f7       	brne	.-38     	; 0x1a52 <LCD_voidSendChar+0x1be>
    1a78:	14 c0       	rjmp	.+40     	; 0x1aa2 <LCD_voidSendChar+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a7c:	78 85       	ldd	r23, Y+8	; 0x08
    1a7e:	89 85       	ldd	r24, Y+9	; 0x09
    1a80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	9e 83       	std	Y+6, r25	; 0x06
    1a8c:	8d 83       	std	Y+5, r24	; 0x05
    1a8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a90:	9e 81       	ldd	r25, Y+6	; 0x06
    1a92:	9a 83       	std	Y+2, r25	; 0x02
    1a94:	89 83       	std	Y+1, r24	; 0x01
    1a96:	89 81       	ldd	r24, Y+1	; 0x01
    1a98:	9a 81       	ldd	r25, Y+2	; 0x02
    1a9a:	01 97       	sbiw	r24, 0x01	; 1
    1a9c:	f1 f7       	brne	.-4      	; 0x1a9a <LCD_voidSendChar+0x206>
    1a9e:	9a 83       	std	Y+2, r25	; 0x02
    1aa0:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
}
    1aa2:	6d 96       	adiw	r28, 0x1d	; 29
    1aa4:	0f b6       	in	r0, 0x3f	; 63
    1aa6:	f8 94       	cli
    1aa8:	de bf       	out	0x3e, r29	; 62
    1aaa:	0f be       	out	0x3f, r0	; 63
    1aac:	cd bf       	out	0x3d, r28	; 61
    1aae:	cf 91       	pop	r28
    1ab0:	df 91       	pop	r29
    1ab2:	08 95       	ret

00001ab4 <LCD_voidSendString>:

void LCD_voidSendString (u8 *Copy_U8String)
{
    1ab4:	df 93       	push	r29
    1ab6:	cf 93       	push	r28
    1ab8:	cd b7       	in	r28, 0x3d	; 61
    1aba:	de b7       	in	r29, 0x3e	; 62
    1abc:	60 97       	sbiw	r28, 0x10	; 16
    1abe:	0f b6       	in	r0, 0x3f	; 63
    1ac0:	f8 94       	cli
    1ac2:	de bf       	out	0x3e, r29	; 62
    1ac4:	0f be       	out	0x3f, r0	; 63
    1ac6:	cd bf       	out	0x3d, r28	; 61
    1ac8:	98 8b       	std	Y+16, r25	; 0x10
    1aca:	8f 87       	std	Y+15, r24	; 0x0f
    1acc:	7c c0       	rjmp	.+248    	; 0x1bc6 <LCD_voidSendString+0x112>
	
	while((*Copy_U8String) !=NULL)
	{
		LCD_voidSendChar(*Copy_U8String);
    1ace:	ef 85       	ldd	r30, Y+15	; 0x0f
    1ad0:	f8 89       	ldd	r31, Y+16	; 0x10
    1ad2:	80 81       	ld	r24, Z
    1ad4:	0e 94 4a 0c 	call	0x1894	; 0x1894 <LCD_voidSendChar>
		Copy_U8String++;
    1ad8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ada:	98 89       	ldd	r25, Y+16	; 0x10
    1adc:	01 96       	adiw	r24, 0x01	; 1
    1ade:	98 8b       	std	Y+16, r25	; 0x10
    1ae0:	8f 87       	std	Y+15, r24	; 0x0f
    1ae2:	80 e0       	ldi	r24, 0x00	; 0
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	a0 ea       	ldi	r26, 0xA0	; 160
    1ae8:	b0 e4       	ldi	r27, 0x40	; 64
    1aea:	8b 87       	std	Y+11, r24	; 0x0b
    1aec:	9c 87       	std	Y+12, r25	; 0x0c
    1aee:	ad 87       	std	Y+13, r26	; 0x0d
    1af0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1af4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1af6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1af8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	4a ef       	ldi	r20, 0xFA	; 250
    1b00:	54 e4       	ldi	r21, 0x44	; 68
    1b02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b06:	dc 01       	movw	r26, r24
    1b08:	cb 01       	movw	r24, r22
    1b0a:	8f 83       	std	Y+7, r24	; 0x07
    1b0c:	98 87       	std	Y+8, r25	; 0x08
    1b0e:	a9 87       	std	Y+9, r26	; 0x09
    1b10:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b12:	6f 81       	ldd	r22, Y+7	; 0x07
    1b14:	78 85       	ldd	r23, Y+8	; 0x08
    1b16:	89 85       	ldd	r24, Y+9	; 0x09
    1b18:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	40 e8       	ldi	r20, 0x80	; 128
    1b20:	5f e3       	ldi	r21, 0x3F	; 63
    1b22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b26:	88 23       	and	r24, r24
    1b28:	2c f4       	brge	.+10     	; 0x1b34 <LCD_voidSendString+0x80>
		__ticks = 1;
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	9e 83       	std	Y+6, r25	; 0x06
    1b30:	8d 83       	std	Y+5, r24	; 0x05
    1b32:	3f c0       	rjmp	.+126    	; 0x1bb2 <LCD_voidSendString+0xfe>
	else if (__tmp > 65535)
    1b34:	6f 81       	ldd	r22, Y+7	; 0x07
    1b36:	78 85       	ldd	r23, Y+8	; 0x08
    1b38:	89 85       	ldd	r24, Y+9	; 0x09
    1b3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	3f ef       	ldi	r19, 0xFF	; 255
    1b40:	4f e7       	ldi	r20, 0x7F	; 127
    1b42:	57 e4       	ldi	r21, 0x47	; 71
    1b44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b48:	18 16       	cp	r1, r24
    1b4a:	4c f5       	brge	.+82     	; 0x1b9e <LCD_voidSendString+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b50:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b52:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b54:	20 e0       	ldi	r18, 0x00	; 0
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	40 e2       	ldi	r20, 0x20	; 32
    1b5a:	51 e4       	ldi	r21, 0x41	; 65
    1b5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b60:	dc 01       	movw	r26, r24
    1b62:	cb 01       	movw	r24, r22
    1b64:	bc 01       	movw	r22, r24
    1b66:	cd 01       	movw	r24, r26
    1b68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	cb 01       	movw	r24, r22
    1b70:	9e 83       	std	Y+6, r25	; 0x06
    1b72:	8d 83       	std	Y+5, r24	; 0x05
    1b74:	0f c0       	rjmp	.+30     	; 0x1b94 <LCD_voidSendString+0xe0>
    1b76:	88 ec       	ldi	r24, 0xC8	; 200
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	9c 83       	std	Y+4, r25	; 0x04
    1b7c:	8b 83       	std	Y+3, r24	; 0x03
    1b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b80:	9c 81       	ldd	r25, Y+4	; 0x04
    1b82:	01 97       	sbiw	r24, 0x01	; 1
    1b84:	f1 f7       	brne	.-4      	; 0x1b82 <LCD_voidSendString+0xce>
    1b86:	9c 83       	std	Y+4, r25	; 0x04
    1b88:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b8e:	01 97       	sbiw	r24, 0x01	; 1
    1b90:	9e 83       	std	Y+6, r25	; 0x06
    1b92:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b94:	8d 81       	ldd	r24, Y+5	; 0x05
    1b96:	9e 81       	ldd	r25, Y+6	; 0x06
    1b98:	00 97       	sbiw	r24, 0x00	; 0
    1b9a:	69 f7       	brne	.-38     	; 0x1b76 <LCD_voidSendString+0xc2>
    1b9c:	14 c0       	rjmp	.+40     	; 0x1bc6 <LCD_voidSendString+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba0:	78 85       	ldd	r23, Y+8	; 0x08
    1ba2:	89 85       	ldd	r24, Y+9	; 0x09
    1ba4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ba6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	9e 83       	std	Y+6, r25	; 0x06
    1bb0:	8d 83       	std	Y+5, r24	; 0x05
    1bb2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb6:	9a 83       	std	Y+2, r25	; 0x02
    1bb8:	89 83       	std	Y+1, r24	; 0x01
    1bba:	89 81       	ldd	r24, Y+1	; 0x01
    1bbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bbe:	01 97       	sbiw	r24, 0x01	; 1
    1bc0:	f1 f7       	brne	.-4      	; 0x1bbe <LCD_voidSendString+0x10a>
    1bc2:	9a 83       	std	Y+2, r25	; 0x02
    1bc4:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidSendString (u8 *Copy_U8String)
{
	
	while((*Copy_U8String) !=NULL)
    1bc6:	ef 85       	ldd	r30, Y+15	; 0x0f
    1bc8:	f8 89       	ldd	r31, Y+16	; 0x10
    1bca:	80 81       	ld	r24, Z
    1bcc:	88 2f       	mov	r24, r24
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	00 97       	sbiw	r24, 0x00	; 0
    1bd2:	09 f0       	breq	.+2      	; 0x1bd6 <LCD_voidSendString+0x122>
    1bd4:	7c cf       	rjmp	.-264    	; 0x1ace <LCD_voidSendString+0x1a>
		LCD_voidSendChar(*Copy_U8String);
		Copy_U8String++;
		_delay_ms(5);
	}
		
}
    1bd6:	60 96       	adiw	r28, 0x10	; 16
    1bd8:	0f b6       	in	r0, 0x3f	; 63
    1bda:	f8 94       	cli
    1bdc:	de bf       	out	0x3e, r29	; 62
    1bde:	0f be       	out	0x3f, r0	; 63
    1be0:	cd bf       	out	0x3d, r28	; 61
    1be2:	cf 91       	pop	r28
    1be4:	df 91       	pop	r29
    1be6:	08 95       	ret

00001be8 <LCD_voidSetLocation>:
void LCD_voidSetLocation (u8 Copy_U8LineNum , u8 Copy_U8CharNum)
{
    1be8:	df 93       	push	r29
    1bea:	cf 93       	push	r28
    1bec:	00 d0       	rcall	.+0      	; 0x1bee <LCD_voidSetLocation+0x6>
    1bee:	00 d0       	rcall	.+0      	; 0x1bf0 <LCD_voidSetLocation+0x8>
    1bf0:	cd b7       	in	r28, 0x3d	; 61
    1bf2:	de b7       	in	r29, 0x3e	; 62
    1bf4:	89 83       	std	Y+1, r24	; 0x01
    1bf6:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_U8LineNum)
    1bf8:	89 81       	ldd	r24, Y+1	; 0x01
    1bfa:	28 2f       	mov	r18, r24
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	3c 83       	std	Y+4, r19	; 0x04
    1c00:	2b 83       	std	Y+3, r18	; 0x03
    1c02:	8b 81       	ldd	r24, Y+3	; 0x03
    1c04:	9c 81       	ldd	r25, Y+4	; 0x04
    1c06:	81 30       	cpi	r24, 0x01	; 1
    1c08:	91 05       	cpc	r25, r1
    1c0a:	31 f0       	breq	.+12     	; 0x1c18 <LCD_voidSetLocation+0x30>
    1c0c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c0e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c10:	22 30       	cpi	r18, 0x02	; 2
    1c12:	31 05       	cpc	r19, r1
    1c14:	31 f0       	breq	.+12     	; 0x1c22 <LCD_voidSetLocation+0x3a>
    1c16:	09 c0       	rjmp	.+18     	; 0x1c2a <LCD_voidSetLocation+0x42>
	{
		case LCD_U8_LINE1 : LCD_voidSendCommand(0x80+Copy_U8CharNum); break ;
    1c18:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1a:	80 58       	subi	r24, 0x80	; 128
    1c1c:	0e 94 ac 0b 	call	0x1758	; 0x1758 <LCD_voidSendCommand>
    1c20:	04 c0       	rjmp	.+8      	; 0x1c2a <LCD_voidSetLocation+0x42>
		
		case LCD_U8_LINE2 : LCD_voidSendCommand(0xc0+Copy_U8CharNum); break ;
    1c22:	8a 81       	ldd	r24, Y+2	; 0x02
    1c24:	80 54       	subi	r24, 0x40	; 64
    1c26:	0e 94 ac 0b 	call	0x1758	; 0x1758 <LCD_voidSendCommand>
	}
}
    1c2a:	0f 90       	pop	r0
    1c2c:	0f 90       	pop	r0
    1c2e:	0f 90       	pop	r0
    1c30:	0f 90       	pop	r0
    1c32:	cf 91       	pop	r28
    1c34:	df 91       	pop	r29
    1c36:	08 95       	ret

00001c38 <TIMER1_voidFPWM>:
#include <avr/interrupt.h>
#include "DIO_Interface.h"
#include "SERVOMOTOR_Interface.h"

void TIMER1_voidFPWM(void)
{
    1c38:	df 93       	push	r29
    1c3a:	cf 93       	push	r28
    1c3c:	cd b7       	in	r28, 0x3d	; 61
    1c3e:	de b7       	in	r29, 0x3e	; 62
	/* SELECT FAST PWM */
	CLR_BIT(TCCR1A, WGM10);
    1c40:	af e4       	ldi	r26, 0x4F	; 79
    1c42:	b0 e0       	ldi	r27, 0x00	; 0
    1c44:	ef e4       	ldi	r30, 0x4F	; 79
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	80 81       	ld	r24, Z
    1c4a:	8e 7f       	andi	r24, 0xFE	; 254
    1c4c:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, WGM11);
    1c4e:	af e4       	ldi	r26, 0x4F	; 79
    1c50:	b0 e0       	ldi	r27, 0x00	; 0
    1c52:	ef e4       	ldi	r30, 0x4F	; 79
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	80 81       	ld	r24, Z
    1c58:	82 60       	ori	r24, 0x02	; 2
    1c5a:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM12);
    1c5c:	ae e4       	ldi	r26, 0x4E	; 78
    1c5e:	b0 e0       	ldi	r27, 0x00	; 0
    1c60:	ee e4       	ldi	r30, 0x4E	; 78
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	80 81       	ld	r24, Z
    1c66:	88 60       	ori	r24, 0x08	; 8
    1c68:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM13);
    1c6a:	ae e4       	ldi	r26, 0x4E	; 78
    1c6c:	b0 e0       	ldi	r27, 0x00	; 0
    1c6e:	ee e4       	ldi	r30, 0x4E	; 78
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	80 61       	ori	r24, 0x10	; 16
    1c76:	8c 93       	st	X, r24

	/* CLEAR OC1A */
	CLR_BIT(TCCR1A, COM1A0);
    1c78:	af e4       	ldi	r26, 0x4F	; 79
    1c7a:	b0 e0       	ldi	r27, 0x00	; 0
    1c7c:	ef e4       	ldi	r30, 0x4F	; 79
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	80 81       	ld	r24, Z
    1c82:	8f 7b       	andi	r24, 0xBF	; 191
    1c84:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, COM1A1);
    1c86:	af e4       	ldi	r26, 0x4F	; 79
    1c88:	b0 e0       	ldi	r27, 0x00	; 0
    1c8a:	ef e4       	ldi	r30, 0x4F	; 79
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	80 81       	ld	r24, Z
    1c90:	80 68       	ori	r24, 0x80	; 128
    1c92:	8c 93       	st	X, r24

	/* ICR1 */
	ICR1 = 19999;
    1c94:	e6 e4       	ldi	r30, 0x46	; 70
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	8f e1       	ldi	r24, 0x1F	; 31
    1c9a:	9e e4       	ldi	r25, 0x4E	; 78
    1c9c:	91 83       	std	Z+1, r25	; 0x01
    1c9e:	80 83       	st	Z, r24

	/* CLK/8 */
	CLR_BIT(TCCR1B, CS10);
    1ca0:	ae e4       	ldi	r26, 0x4E	; 78
    1ca2:	b0 e0       	ldi	r27, 0x00	; 0
    1ca4:	ee e4       	ldi	r30, 0x4E	; 78
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	80 81       	ld	r24, Z
    1caa:	8e 7f       	andi	r24, 0xFE	; 254
    1cac:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS11);
    1cae:	ae e4       	ldi	r26, 0x4E	; 78
    1cb0:	b0 e0       	ldi	r27, 0x00	; 0
    1cb2:	ee e4       	ldi	r30, 0x4E	; 78
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	80 81       	ld	r24, Z
    1cb8:	82 60       	ori	r24, 0x02	; 2
    1cba:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS12);
    1cbc:	ae e4       	ldi	r26, 0x4E	; 78
    1cbe:	b0 e0       	ldi	r27, 0x00	; 0
    1cc0:	ee e4       	ldi	r30, 0x4E	; 78
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	8b 7f       	andi	r24, 0xFB	; 251
    1cc8:	8c 93       	st	X, r24
}
    1cca:	cf 91       	pop	r28
    1ccc:	df 91       	pop	r29
    1cce:	08 95       	ret

00001cd0 <SERVO_voidSetAngle>:

void SERVO_voidSetAngle(u8 copy_u8Angle)
{
    1cd0:	df 93       	push	r29
    1cd2:	cf 93       	push	r28
    1cd4:	0f 92       	push	r0
    1cd6:	cd b7       	in	r28, 0x3d	; 61
    1cd8:	de b7       	in	r29, 0x3e	; 62
    1cda:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = ((50* copy_u8Angle)+8991)/9;
    1cdc:	ea e4       	ldi	r30, 0x4A	; 74
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	89 81       	ldd	r24, Y+1	; 0x01
    1ce2:	28 2f       	mov	r18, r24
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	82 e3       	ldi	r24, 0x32	; 50
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	ac 01       	movw	r20, r24
    1cec:	24 9f       	mul	r18, r20
    1cee:	c0 01       	movw	r24, r0
    1cf0:	25 9f       	mul	r18, r21
    1cf2:	90 0d       	add	r25, r0
    1cf4:	34 9f       	mul	r19, r20
    1cf6:	90 0d       	add	r25, r0
    1cf8:	11 24       	eor	r1, r1
    1cfa:	81 5e       	subi	r24, 0xE1	; 225
    1cfc:	9c 4d       	sbci	r25, 0xDC	; 220
    1cfe:	29 e0       	ldi	r18, 0x09	; 9
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	b9 01       	movw	r22, r18
    1d04:	0e 94 be 12 	call	0x257c	; 0x257c <__divmodhi4>
    1d08:	cb 01       	movw	r24, r22
    1d0a:	91 83       	std	Z+1, r25	; 0x01
    1d0c:	80 83       	st	Z, r24
}
    1d0e:	0f 90       	pop	r0
    1d10:	cf 91       	pop	r28
    1d12:	df 91       	pop	r29
    1d14:	08 95       	ret

00001d16 <UART_voidInit>:

#include <avr/io.h>
#include "UART.h"

void UART_voidInit (void)
{
    1d16:	df 93       	push	r29
    1d18:	cf 93       	push	r28
    1d1a:	00 d0       	rcall	.+0      	; 0x1d1c <UART_voidInit+0x6>
    1d1c:	0f 92       	push	r0
    1d1e:	cd b7       	in	r28, 0x3d	; 61
    1d20:	de b7       	in	r29, 0x3e	; 62
	u16 Local_u16BaudRate = 51 ;
    1d22:	83 e3       	ldi	r24, 0x33	; 51
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	9b 83       	std	Y+3, r25	; 0x03
    1d28:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8UCSRCValue = 0b10000000 ;
    1d2a:	80 e8       	ldi	r24, 0x80	; 128
    1d2c:	89 83       	std	Y+1, r24	; 0x01

	/* 1- Select Baud Rate = 9600 ==> UBRRL & UBRRH = 51 */
	UBRRL = (u8) Local_u16BaudRate ;
    1d2e:	e9 e2       	ldi	r30, 0x29	; 41
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	8a 81       	ldd	r24, Y+2	; 0x02
    1d34:	80 83       	st	Z, r24
	UBRRH = (u8) (Local_u16BaudRate >> 8);
    1d36:	e0 e4       	ldi	r30, 0x40	; 64
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d3e:	89 2f       	mov	r24, r25
    1d40:	99 27       	eor	r25, r25
    1d42:	80 83       	st	Z, r24

	/* 2- Select Normal Speed */
	CLR_BIT(UCSRA , U2X);
    1d44:	ab e2       	ldi	r26, 0x2B	; 43
    1d46:	b0 e0       	ldi	r27, 0x00	; 0
    1d48:	eb e2       	ldi	r30, 0x2B	; 43
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	80 81       	ld	r24, Z
    1d4e:	8d 7f       	andi	r24, 0xFD	; 253
    1d50:	8c 93       	st	X, r24

	/* 3- Disable Multi-processor Communication Mode */
	CLR_BIT(UCSRA , MPCM);
    1d52:	ab e2       	ldi	r26, 0x2B	; 43
    1d54:	b0 e0       	ldi	r27, 0x00	; 0
    1d56:	eb e2       	ldi	r30, 0x2B	; 43
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	80 81       	ld	r24, Z
    1d5c:	8e 7f       	andi	r24, 0xFE	; 254
    1d5e:	8c 93       	st	X, r24

	/* 4- Receiver and Transmitter Enable */
	SET_BIT(UCSRB , RXEN);
    1d60:	aa e2       	ldi	r26, 0x2A	; 42
    1d62:	b0 e0       	ldi	r27, 0x00	; 0
    1d64:	ea e2       	ldi	r30, 0x2A	; 42
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	80 81       	ld	r24, Z
    1d6a:	80 61       	ori	r24, 0x10	; 16
    1d6c:	8c 93       	st	X, r24
	SET_BIT(UCSRB , TXEN);
    1d6e:	aa e2       	ldi	r26, 0x2A	; 42
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	ea e2       	ldi	r30, 0x2A	; 42
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	88 60       	ori	r24, 0x08	; 8
    1d7a:	8c 93       	st	X, r24

	/* 5- Select 8 bits Data */
	CLR_BIT(UCSRB , UCSZ2);
    1d7c:	aa e2       	ldi	r26, 0x2A	; 42
    1d7e:	b0 e0       	ldi	r27, 0x00	; 0
    1d80:	ea e2       	ldi	r30, 0x2A	; 42
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	8b 7f       	andi	r24, 0xFB	; 251
    1d88:	8c 93       	st	X, r24
	SET_BIT(Local_u8UCSRCValue , UCSZ0);
    1d8a:	89 81       	ldd	r24, Y+1	; 0x01
    1d8c:	82 60       	ori	r24, 0x02	; 2
    1d8e:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8UCSRCValue , UCSZ1);
    1d90:	89 81       	ldd	r24, Y+1	; 0x01
    1d92:	84 60       	ori	r24, 0x04	; 4
    1d94:	89 83       	std	Y+1, r24	; 0x01

	/* 6- Select Asynchronous Mode */
	CLR_BIT(Local_u8UCSRCValue , UMSEL);
    1d96:	89 81       	ldd	r24, Y+1	; 0x01
    1d98:	8f 7b       	andi	r24, 0xBF	; 191
    1d9a:	89 83       	std	Y+1, r24	; 0x01

	/* 7- Disable Parity Mode */
	CLR_BIT(Local_u8UCSRCValue , UPM0);
    1d9c:	89 81       	ldd	r24, Y+1	; 0x01
    1d9e:	8f 7e       	andi	r24, 0xEF	; 239
    1da0:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_u8UCSRCValue , UPM1);
    1da2:	89 81       	ldd	r24, Y+1	; 0x01
    1da4:	8f 7d       	andi	r24, 0xDF	; 223
    1da6:	89 83       	std	Y+1, r24	; 0x01

	/* 8- Select 2 Stop Bit  */
	SET_BIT(Local_u8UCSRCValue , USBS);
    1da8:	89 81       	ldd	r24, Y+1	; 0x01
    1daa:	88 60       	ori	r24, 0x08	; 8
    1dac:	89 83       	std	Y+1, r24	; 0x01

	/* 9- Update The UCSRC Value */
	UCSRC = Local_u8UCSRCValue ;
    1dae:	e0 e4       	ldi	r30, 0x40	; 64
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	89 81       	ldd	r24, Y+1	; 0x01
    1db4:	80 83       	st	Z, r24
}
    1db6:	0f 90       	pop	r0
    1db8:	0f 90       	pop	r0
    1dba:	0f 90       	pop	r0
    1dbc:	cf 91       	pop	r28
    1dbe:	df 91       	pop	r29
    1dc0:	08 95       	ret

00001dc2 <UART_voidSendData>:

void UART_voidSendData 	(u8 Copy_u8Data)
{
    1dc2:	df 93       	push	r29
    1dc4:	cf 93       	push	r28
    1dc6:	0f 92       	push	r0
    1dc8:	cd b7       	in	r28, 0x3d	; 61
    1dca:	de b7       	in	r29, 0x3e	; 62
    1dcc:	89 83       	std	Y+1, r24	; 0x01
	/*Wait until the Transmitter Register is Empty*/
	while(GET_BIT(UCSRA , UDRE)==0);
    1dce:	eb e2       	ldi	r30, 0x2B	; 43
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	80 81       	ld	r24, Z
    1dd4:	82 95       	swap	r24
    1dd6:	86 95       	lsr	r24
    1dd8:	87 70       	andi	r24, 0x07	; 7
    1dda:	88 2f       	mov	r24, r24
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	81 70       	andi	r24, 0x01	; 1
    1de0:	90 70       	andi	r25, 0x00	; 0
    1de2:	00 97       	sbiw	r24, 0x00	; 0
    1de4:	a1 f3       	breq	.-24     	; 0x1dce <UART_voidSendData+0xc>
	/*Send Data Byte*/
	UDR = Copy_u8Data ;
    1de6:	ec e2       	ldi	r30, 0x2C	; 44
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	89 81       	ldd	r24, Y+1	; 0x01
    1dec:	80 83       	st	Z, r24
}
    1dee:	0f 90       	pop	r0
    1df0:	cf 91       	pop	r28
    1df2:	df 91       	pop	r29
    1df4:	08 95       	ret

00001df6 <UART_voidReciveData>:

u8 UART_voidReciveData 	(void)
{
    1df6:	df 93       	push	r29
    1df8:	cf 93       	push	r28
    1dfa:	cd b7       	in	r28, 0x3d	; 61
    1dfc:	de b7       	in	r29, 0x3e	; 62
	/*Wait until the Transmitter Register is Empty*/
	while(GET_BIT(UCSRA , RXC)==0);
    1dfe:	eb e2       	ldi	r30, 0x2B	; 43
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	80 81       	ld	r24, Z
    1e04:	88 23       	and	r24, r24
    1e06:	dc f7       	brge	.-10     	; 0x1dfe <UART_voidReciveData+0x8>
	/*Send Data Byte*/
	return UDR ;
    1e08:	ec e2       	ldi	r30, 0x2C	; 44
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	80 81       	ld	r24, Z
}
    1e0e:	cf 91       	pop	r28
    1e10:	df 91       	pop	r29
    1e12:	08 95       	ret

00001e14 <main>:
u16 ADC_vSetFanAndCooler 	 (void);

u8 ExitAutoData = 0 ;

int main(void)
{
    1e14:	df 93       	push	r29
    1e16:	cf 93       	push	r28
    1e18:	cd b7       	in	r28, 0x3d	; 61
    1e1a:	de b7       	in	r29, 0x3e	; 62
    1e1c:	a3 97       	sbiw	r28, 0x23	; 35
    1e1e:	0f b6       	in	r0, 0x3f	; 63
    1e20:	f8 94       	cli
    1e22:	de bf       	out	0x3e, r29	; 62
    1e24:	0f be       	out	0x3f, r0	; 63
    1e26:	cd bf       	out	0x3d, r28	; 61

	LCD_voidInit();
    1e28:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_voidInit>
	UART_voidInit();
    1e2c:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <UART_voidInit>
	ADC_voidInit();
    1e30:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_voidInit>
	DIO_voidSetPinDirection(DIO_PORTA,DIO_PIN3,DIO_OUTPUT);
    1e34:	80 e0       	ldi	r24, 0x00	; 0
    1e36:	63 e0       	ldi	r22, 0x03	; 3
    1e38:	41 e0       	ldi	r20, 0x01	; 1
    1e3a:	0e 94 18 06 	call	0xc30	; 0xc30 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTA,DIO_PIN4,DIO_OUTPUT);
    1e3e:	80 e0       	ldi	r24, 0x00	; 0
    1e40:	64 e0       	ldi	r22, 0x04	; 4
    1e42:	41 e0       	ldi	r20, 0x01	; 1
    1e44:	0e 94 18 06 	call	0xc30	; 0xc30 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN3,DIO_OUTPUT);
    1e48:	83 e0       	ldi	r24, 0x03	; 3
    1e4a:	63 e0       	ldi	r22, 0x03	; 3
    1e4c:	41 e0       	ldi	r20, 0x01	; 1
    1e4e:	0e 94 18 06 	call	0xc30	; 0xc30 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN4,DIO_OUTPUT);
    1e52:	83 e0       	ldi	r24, 0x03	; 3
    1e54:	64 e0       	ldi	r22, 0x04	; 4
    1e56:	41 e0       	ldi	r20, 0x01	; 1
    1e58:	0e 94 18 06 	call	0xc30	; 0xc30 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN5,DIO_OUTPUT);
    1e5c:	83 e0       	ldi	r24, 0x03	; 3
    1e5e:	65 e0       	ldi	r22, 0x05	; 5
    1e60:	41 e0       	ldi	r20, 0x01	; 1
    1e62:	0e 94 18 06 	call	0xc30	; 0xc30 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN6,DIO_OUTPUT);
    1e66:	83 e0       	ldi	r24, 0x03	; 3
    1e68:	66 e0       	ldi	r22, 0x06	; 6
    1e6a:	41 e0       	ldi	r20, 0x01	; 1
    1e6c:	0e 94 18 06 	call	0xc30	; 0xc30 <DIO_voidSetPinDirection>
	u8 Access = 0;
    1e70:	1b a2       	std	Y+35, r1	; 0x23
	u8 ActuatorData = 0 ;
    1e72:	1a a2       	std	Y+34, r1	; 0x22
	u8 ADC_read = 0 ;
    1e74:	19 a2       	std	Y+33, r1	; 0x21
	u8 ModeData = 0 ;
    1e76:	18 a2       	std	Y+32, r1	; 0x20
	u8 LightData = 0 ;
    1e78:	1f 8e       	std	Y+31, r1	; 0x1f
	u8 FanData = 0 ;
    1e7a:	1e 8e       	std	Y+30, r1	; 0x1e
	u8 TVData = 0 ;
    1e7c:	1d 8e       	std	Y+29, r1	; 0x1d

	StartProgram();
    1e7e:	0e 94 46 11 	call	0x228c	; 0x228c <StartProgram>
	Access= UART_voidReciveData ();
    1e82:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <UART_voidReciveData>
    1e86:	8b a3       	std	Y+35, r24	; 0x23

	if( Access == 'Z' )
    1e88:	8b a1       	ldd	r24, Y+35	; 0x23
    1e8a:	8a 35       	cpi	r24, 0x5A	; 90
    1e8c:	09 f0       	breq	.+2      	; 0x1e90 <main+0x7c>
    1e8e:	dd c1       	rjmp	.+954    	; 0x224a <main+0x436>
	{

		LCD_voidSendCommand(LCD_CLEAR);
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	0e 94 ac 0b 	call	0x1758	; 0x1758 <LCD_voidSendCommand>

		LCD_voidSetLocation ( 1 , 0 );
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	60 e0       	ldi	r22, 0x00	; 0
    1e9a:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <LCD_voidSetLocation>
		LCD_voidSendString ("   Welome To ");
    1e9e:	80 e6       	ldi	r24, 0x60	; 96
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <LCD_voidSendString>
		LCD_voidSetLocation (2,0);
    1ea6:	82 e0       	ldi	r24, 0x02	; 2
    1ea8:	60 e0       	ldi	r22, 0x00	; 0
    1eaa:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <LCD_voidSetLocation>
		LCD_voidSendString ("   My Home :)");
    1eae:	8e e6       	ldi	r24, 0x6E	; 110
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <LCD_voidSendString>
		while(1)
		{

			ModeData= UART_voidReciveData ();
    1eb6:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <UART_voidReciveData>
    1eba:	88 a3       	std	Y+32, r24	; 0x20

			if ( ModeData == 'R')
    1ebc:	88 a1       	ldd	r24, Y+32	; 0x20
    1ebe:	82 35       	cpi	r24, 0x52	; 82
    1ec0:	09 f0       	breq	.+2      	; 0x1ec4 <main+0xb0>
    1ec2:	d9 c0       	rjmp	.+434    	; 0x2076 <main+0x262>
			{
				LCD_voidSendCommand(LCD_CLEAR);
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	0e 94 ac 0b 	call	0x1758	; 0x1758 <LCD_voidSendCommand>

				LCD_voidSetLocation ( 1 , 0 );
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	60 e0       	ldi	r22, 0x00	; 0
    1ece:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <LCD_voidSetLocation>
				LCD_voidSendString (" Room1 ");
    1ed2:	8c e7       	ldi	r24, 0x7C	; 124
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <LCD_voidSendString>
    1eda:	80 e0       	ldi	r24, 0x00	; 0
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	a8 e4       	ldi	r26, 0x48	; 72
    1ee0:	b4 e4       	ldi	r27, 0x44	; 68
    1ee2:	89 8f       	std	Y+25, r24	; 0x19
    1ee4:	9a 8f       	std	Y+26, r25	; 0x1a
    1ee6:	ab 8f       	std	Y+27, r26	; 0x1b
    1ee8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eea:	69 8d       	ldd	r22, Y+25	; 0x19
    1eec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ef0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	4a ef       	ldi	r20, 0xFA	; 250
    1ef8:	54 e4       	ldi	r21, 0x44	; 68
    1efa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1efe:	dc 01       	movw	r26, r24
    1f00:	cb 01       	movw	r24, r22
    1f02:	8d 8b       	std	Y+21, r24	; 0x15
    1f04:	9e 8b       	std	Y+22, r25	; 0x16
    1f06:	af 8b       	std	Y+23, r26	; 0x17
    1f08:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f0a:	6d 89       	ldd	r22, Y+21	; 0x15
    1f0c:	7e 89       	ldd	r23, Y+22	; 0x16
    1f0e:	8f 89       	ldd	r24, Y+23	; 0x17
    1f10:	98 8d       	ldd	r25, Y+24	; 0x18
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	40 e8       	ldi	r20, 0x80	; 128
    1f18:	5f e3       	ldi	r21, 0x3F	; 63
    1f1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f1e:	88 23       	and	r24, r24
    1f20:	2c f4       	brge	.+10     	; 0x1f2c <main+0x118>
		__ticks = 1;
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	9c 8b       	std	Y+20, r25	; 0x14
    1f28:	8b 8b       	std	Y+19, r24	; 0x13
    1f2a:	3f c0       	rjmp	.+126    	; 0x1faa <main+0x196>
	else if (__tmp > 65535)
    1f2c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f2e:	7e 89       	ldd	r23, Y+22	; 0x16
    1f30:	8f 89       	ldd	r24, Y+23	; 0x17
    1f32:	98 8d       	ldd	r25, Y+24	; 0x18
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	3f ef       	ldi	r19, 0xFF	; 255
    1f38:	4f e7       	ldi	r20, 0x7F	; 127
    1f3a:	57 e4       	ldi	r21, 0x47	; 71
    1f3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f40:	18 16       	cp	r1, r24
    1f42:	4c f5       	brge	.+82     	; 0x1f96 <main+0x182>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f44:	69 8d       	ldd	r22, Y+25	; 0x19
    1f46:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f4c:	20 e0       	ldi	r18, 0x00	; 0
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	40 e2       	ldi	r20, 0x20	; 32
    1f52:	51 e4       	ldi	r21, 0x41	; 65
    1f54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f58:	dc 01       	movw	r26, r24
    1f5a:	cb 01       	movw	r24, r22
    1f5c:	bc 01       	movw	r22, r24
    1f5e:	cd 01       	movw	r24, r26
    1f60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	9c 8b       	std	Y+20, r25	; 0x14
    1f6a:	8b 8b       	std	Y+19, r24	; 0x13
    1f6c:	0f c0       	rjmp	.+30     	; 0x1f8c <main+0x178>
    1f6e:	88 ec       	ldi	r24, 0xC8	; 200
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	9a 8b       	std	Y+18, r25	; 0x12
    1f74:	89 8b       	std	Y+17, r24	; 0x11
    1f76:	89 89       	ldd	r24, Y+17	; 0x11
    1f78:	9a 89       	ldd	r25, Y+18	; 0x12
    1f7a:	01 97       	sbiw	r24, 0x01	; 1
    1f7c:	f1 f7       	brne	.-4      	; 0x1f7a <main+0x166>
    1f7e:	9a 8b       	std	Y+18, r25	; 0x12
    1f80:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f82:	8b 89       	ldd	r24, Y+19	; 0x13
    1f84:	9c 89       	ldd	r25, Y+20	; 0x14
    1f86:	01 97       	sbiw	r24, 0x01	; 1
    1f88:	9c 8b       	std	Y+20, r25	; 0x14
    1f8a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f8c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f8e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f90:	00 97       	sbiw	r24, 0x00	; 0
    1f92:	69 f7       	brne	.-38     	; 0x1f6e <main+0x15a>
    1f94:	14 c0       	rjmp	.+40     	; 0x1fbe <main+0x1aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f96:	6d 89       	ldd	r22, Y+21	; 0x15
    1f98:	7e 89       	ldd	r23, Y+22	; 0x16
    1f9a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f9c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa2:	dc 01       	movw	r26, r24
    1fa4:	cb 01       	movw	r24, r22
    1fa6:	9c 8b       	std	Y+20, r25	; 0x14
    1fa8:	8b 8b       	std	Y+19, r24	; 0x13
    1faa:	8b 89       	ldd	r24, Y+19	; 0x13
    1fac:	9c 89       	ldd	r25, Y+20	; 0x14
    1fae:	98 8b       	std	Y+16, r25	; 0x10
    1fb0:	8f 87       	std	Y+15, r24	; 0x0f
    1fb2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fb4:	98 89       	ldd	r25, Y+16	; 0x10
    1fb6:	01 97       	sbiw	r24, 0x01	; 1
    1fb8:	f1 f7       	brne	.-4      	; 0x1fb6 <main+0x1a2>
    1fba:	98 8b       	std	Y+16, r25	; 0x10
    1fbc:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(800);
				LCD_voidSendCommand(LCD_CLEAR);
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	0e 94 ac 0b 	call	0x1758	; 0x1758 <LCD_voidSendCommand>
				LCD_voidSetLocation ( 1 , 7 );
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	67 e0       	ldi	r22, 0x07	; 7
    1fc8:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <LCD_voidSetLocation>
				LCD_voidSendChar('/');
    1fcc:	8f e2       	ldi	r24, 0x2F	; 47
    1fce:	0e 94 4a 0c 	call	0x1894	; 0x1894 <LCD_voidSendChar>
				LCD_voidSetLocation ( 2 , 7 );
    1fd2:	82 e0       	ldi	r24, 0x02	; 2
    1fd4:	67 e0       	ldi	r22, 0x07	; 7
    1fd6:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <LCD_voidSetLocation>
				LCD_voidSendChar('/');
    1fda:	8f e2       	ldi	r24, 0x2F	; 47
    1fdc:	0e 94 4a 0c 	call	0x1894	; 0x1894 <LCD_voidSendChar>


				while(1)
				{
					ActuatorData= UART_voidReciveData ();
    1fe0:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <UART_voidReciveData>
    1fe4:	8a a3       	std	Y+34, r24	; 0x22
					/*---------------------------------------------------------------------------------------------------------------------*/

					/* Control Light */
					if ( ActuatorData == 'L')
    1fe6:	8a a1       	ldd	r24, Y+34	; 0x22
    1fe8:	8c 34       	cpi	r24, 0x4C	; 76
    1fea:	79 f4       	brne	.+30     	; 0x200a <main+0x1f6>
					{
						LightData=UART_voidReciveData ();
    1fec:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <UART_voidReciveData>
    1ff0:	8f 8f       	std	Y+31, r24	; 0x1f
						if ( LightData == '1' )
    1ff2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ff4:	81 33       	cpi	r24, 0x31	; 49
    1ff6:	19 f4       	brne	.+6      	; 0x1ffe <main+0x1ea>
						{
							OpenLight();
    1ff8:	0e 94 60 11 	call	0x22c0	; 0x22c0 <OpenLight>
    1ffc:	f1 cf       	rjmp	.-30     	; 0x1fe0 <main+0x1cc>
						}
						else if ( LightData == '0' )
    1ffe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2000:	80 33       	cpi	r24, 0x30	; 48
    2002:	71 f7       	brne	.-36     	; 0x1fe0 <main+0x1cc>
						{
							CloseLight();
    2004:	0e 94 74 11 	call	0x22e8	; 0x22e8 <CloseLight>
    2008:	eb cf       	rjmp	.-42     	; 0x1fe0 <main+0x1cc>
						}
					}
					/*---------------------------------------------------------------------------------------------------------------------*/
					/* Control Fan */
					else if ( ActuatorData == 'F')
    200a:	8a a1       	ldd	r24, Y+34	; 0x22
    200c:	86 34       	cpi	r24, 0x46	; 70
    200e:	79 f4       	brne	.+30     	; 0x202e <main+0x21a>
					{
						FanData=UART_voidReciveData ();
    2010:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <UART_voidReciveData>
    2014:	8e 8f       	std	Y+30, r24	; 0x1e
						if ( FanData == '1' )
    2016:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2018:	81 33       	cpi	r24, 0x31	; 49
    201a:	19 f4       	brne	.+6      	; 0x2022 <main+0x20e>
						{
							OpenFan();
    201c:	0e 94 88 11 	call	0x2310	; 0x2310 <OpenFan>
    2020:	df cf       	rjmp	.-66     	; 0x1fe0 <main+0x1cc>

						}
						else if ( FanData == '0' )
    2022:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2024:	80 33       	cpi	r24, 0x30	; 48
    2026:	e1 f6       	brne	.-72     	; 0x1fe0 <main+0x1cc>
						{
							CloseFan();
    2028:	0e 94 9c 11 	call	0x2338	; 0x2338 <CloseFan>
    202c:	d9 cf       	rjmp	.-78     	; 0x1fe0 <main+0x1cc>
						}
					}

					/*---------------------------------------------------------------------------------------------------------------------*/
					/* Control TV */
					else if ( ActuatorData == 'T')
    202e:	8a a1       	ldd	r24, Y+34	; 0x22
    2030:	84 35       	cpi	r24, 0x54	; 84
    2032:	79 f4       	brne	.+30     	; 0x2052 <main+0x23e>
					{
						TVData=UART_voidReciveData ();
    2034:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <UART_voidReciveData>
    2038:	8d 8f       	std	Y+29, r24	; 0x1d
						if ( TVData == '1' )
    203a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    203c:	81 33       	cpi	r24, 0x31	; 49
    203e:	19 f4       	brne	.+6      	; 0x2046 <main+0x232>
						{
							OpenTV();
    2040:	0e 94 00 12 	call	0x2400	; 0x2400 <OpenTV>
    2044:	cd cf       	rjmp	.-102    	; 0x1fe0 <main+0x1cc>
						}
						else if ( TVData == '0' )
    2046:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2048:	80 33       	cpi	r24, 0x30	; 48
    204a:	51 f6       	brne	.-108    	; 0x1fe0 <main+0x1cc>
						{
							CloseTV();
    204c:	0e 94 14 12 	call	0x2428	; 0x2428 <CloseTV>
    2050:	c7 cf       	rjmp	.-114    	; 0x1fe0 <main+0x1cc>
						}
					}
					/*---------------------------------------------------------------------------------------------------------------------*/
					/* Exit from Manual Mode */
					else if ( ActuatorData == '#')
    2052:	8a a1       	ldd	r24, Y+34	; 0x22
    2054:	83 32       	cpi	r24, 0x23	; 35
    2056:	21 f6       	brne	.-120    	; 0x1fe0 <main+0x1cc>
					{
						LCD_voidSendCommand(LCD_CLEAR);
    2058:	81 e0       	ldi	r24, 0x01	; 1
    205a:	0e 94 ac 0b 	call	0x1758	; 0x1758 <LCD_voidSendCommand>
						ModeData = 0 ;
    205e:	18 a2       	std	Y+32, r1	; 0x20
						ActuatorData = 0 ;
    2060:	1a a2       	std	Y+34, r1	; 0x22
						CloseLight();
    2062:	0e 94 74 11 	call	0x22e8	; 0x22e8 <CloseLight>
						CloseFan();
    2066:	0e 94 9c 11 	call	0x2338	; 0x2338 <CloseFan>
						CloseWindow();
    206a:	0e 94 34 12 	call	0x2468	; 0x2468 <CloseWindow>
						LCD_voidSendCommand(LCD_CLEAR);
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	0e 94 ac 0b 	call	0x1758	; 0x1758 <LCD_voidSendCommand>
    2074:	20 cf       	rjmp	.-448    	; 0x1eb6 <main+0xa2>



				}
			}
			else if ( ModeData =='r')
    2076:	88 a1       	ldd	r24, Y+32	; 0x20
    2078:	82 37       	cpi	r24, 0x72	; 114
    207a:	09 f0       	breq	.+2      	; 0x207e <main+0x26a>
    207c:	1c cf       	rjmp	.-456    	; 0x1eb6 <main+0xa2>
			{
			LCD_voidSendCommand(LCD_CLEAR);
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	0e 94 ac 0b 	call	0x1758	; 0x1758 <LCD_voidSendCommand>

				LCD_voidSetLocation ( 1 , 0 );
    2084:	81 e0       	ldi	r24, 0x01	; 1
    2086:	60 e0       	ldi	r22, 0x00	; 0
    2088:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <LCD_voidSetLocation>
				LCD_voidSendString (" Room2 ");
    208c:	84 e8       	ldi	r24, 0x84	; 132
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <LCD_voidSendString>
    2094:	80 e0       	ldi	r24, 0x00	; 0
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	a8 e4       	ldi	r26, 0x48	; 72
    209a:	b4 e4       	ldi	r27, 0x44	; 68
    209c:	8b 87       	std	Y+11, r24	; 0x0b
    209e:	9c 87       	std	Y+12, r25	; 0x0c
    20a0:	ad 87       	std	Y+13, r26	; 0x0d
    20a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    20a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    20a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    20aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	4a ef       	ldi	r20, 0xFA	; 250
    20b2:	54 e4       	ldi	r21, 0x44	; 68
    20b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	8f 83       	std	Y+7, r24	; 0x07
    20be:	98 87       	std	Y+8, r25	; 0x08
    20c0:	a9 87       	std	Y+9, r26	; 0x09
    20c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20c4:	6f 81       	ldd	r22, Y+7	; 0x07
    20c6:	78 85       	ldd	r23, Y+8	; 0x08
    20c8:	89 85       	ldd	r24, Y+9	; 0x09
    20ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	40 e8       	ldi	r20, 0x80	; 128
    20d2:	5f e3       	ldi	r21, 0x3F	; 63
    20d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20d8:	88 23       	and	r24, r24
    20da:	2c f4       	brge	.+10     	; 0x20e6 <main+0x2d2>
		__ticks = 1;
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	9e 83       	std	Y+6, r25	; 0x06
    20e2:	8d 83       	std	Y+5, r24	; 0x05
    20e4:	3f c0       	rjmp	.+126    	; 0x2164 <main+0x350>
	else if (__tmp > 65535)
    20e6:	6f 81       	ldd	r22, Y+7	; 0x07
    20e8:	78 85       	ldd	r23, Y+8	; 0x08
    20ea:	89 85       	ldd	r24, Y+9	; 0x09
    20ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	3f ef       	ldi	r19, 0xFF	; 255
    20f2:	4f e7       	ldi	r20, 0x7F	; 127
    20f4:	57 e4       	ldi	r21, 0x47	; 71
    20f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20fa:	18 16       	cp	r1, r24
    20fc:	4c f5       	brge	.+82     	; 0x2150 <main+0x33c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2100:	7c 85       	ldd	r23, Y+12	; 0x0c
    2102:	8d 85       	ldd	r24, Y+13	; 0x0d
    2104:	9e 85       	ldd	r25, Y+14	; 0x0e
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	40 e2       	ldi	r20, 0x20	; 32
    210c:	51 e4       	ldi	r21, 0x41	; 65
    210e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	bc 01       	movw	r22, r24
    2118:	cd 01       	movw	r24, r26
    211a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211e:	dc 01       	movw	r26, r24
    2120:	cb 01       	movw	r24, r22
    2122:	9e 83       	std	Y+6, r25	; 0x06
    2124:	8d 83       	std	Y+5, r24	; 0x05
    2126:	0f c0       	rjmp	.+30     	; 0x2146 <main+0x332>
    2128:	88 ec       	ldi	r24, 0xC8	; 200
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	9c 83       	std	Y+4, r25	; 0x04
    212e:	8b 83       	std	Y+3, r24	; 0x03
    2130:	8b 81       	ldd	r24, Y+3	; 0x03
    2132:	9c 81       	ldd	r25, Y+4	; 0x04
    2134:	01 97       	sbiw	r24, 0x01	; 1
    2136:	f1 f7       	brne	.-4      	; 0x2134 <main+0x320>
    2138:	9c 83       	std	Y+4, r25	; 0x04
    213a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    213c:	8d 81       	ldd	r24, Y+5	; 0x05
    213e:	9e 81       	ldd	r25, Y+6	; 0x06
    2140:	01 97       	sbiw	r24, 0x01	; 1
    2142:	9e 83       	std	Y+6, r25	; 0x06
    2144:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2146:	8d 81       	ldd	r24, Y+5	; 0x05
    2148:	9e 81       	ldd	r25, Y+6	; 0x06
    214a:	00 97       	sbiw	r24, 0x00	; 0
    214c:	69 f7       	brne	.-38     	; 0x2128 <main+0x314>
    214e:	14 c0       	rjmp	.+40     	; 0x2178 <main+0x364>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2150:	6f 81       	ldd	r22, Y+7	; 0x07
    2152:	78 85       	ldd	r23, Y+8	; 0x08
    2154:	89 85       	ldd	r24, Y+9	; 0x09
    2156:	9a 85       	ldd	r25, Y+10	; 0x0a
    2158:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215c:	dc 01       	movw	r26, r24
    215e:	cb 01       	movw	r24, r22
    2160:	9e 83       	std	Y+6, r25	; 0x06
    2162:	8d 83       	std	Y+5, r24	; 0x05
    2164:	8d 81       	ldd	r24, Y+5	; 0x05
    2166:	9e 81       	ldd	r25, Y+6	; 0x06
    2168:	9a 83       	std	Y+2, r25	; 0x02
    216a:	89 83       	std	Y+1, r24	; 0x01
    216c:	89 81       	ldd	r24, Y+1	; 0x01
    216e:	9a 81       	ldd	r25, Y+2	; 0x02
    2170:	01 97       	sbiw	r24, 0x01	; 1
    2172:	f1 f7       	brne	.-4      	; 0x2170 <main+0x35c>
    2174:	9a 83       	std	Y+2, r25	; 0x02
    2176:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(800);
				LCD_voidSendCommand(LCD_CLEAR);
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	0e 94 ac 0b 	call	0x1758	; 0x1758 <LCD_voidSendCommand>
				CloseWindow();
    217e:	0e 94 34 12 	call	0x2468	; 0x2468 <CloseWindow>
				while(1)
				{
					if ((ADC_vSetFanAndCooler() > 20))//fan on AC off
    2182:	0e 94 40 12 	call	0x2480	; 0x2480 <ADC_vSetFanAndCooler>
    2186:	85 31       	cpi	r24, 0x15	; 21
    2188:	91 05       	cpc	r25, r1
    218a:	28 f0       	brcs	.+10     	; 0x2196 <main+0x382>
						{
							OpenFan2();
    218c:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <OpenFan2>
							CloseWindow();
    2190:	0e 94 34 12 	call	0x2468	; 0x2468 <CloseWindow>
    2194:	09 c0       	rjmp	.+18     	; 0x21a8 <main+0x394>
						}
						else if (ADC_vSetFanAndCooler() <= 20)//fan off AC on
    2196:	0e 94 40 12 	call	0x2480	; 0x2480 <ADC_vSetFanAndCooler>
    219a:	85 31       	cpi	r24, 0x15	; 21
    219c:	91 05       	cpc	r25, r1
    219e:	20 f4       	brcc	.+8      	; 0x21a8 <main+0x394>
						{
							CloseFan2();
    21a0:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <CloseFan2>
							OpenWindow();
    21a4:	0e 94 28 12 	call	0x2450	; 0x2450 <OpenWindow>
						}
					ActuatorData= UART_voidReciveData ();
    21a8:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <UART_voidReciveData>
    21ac:	8a a3       	std	Y+34, r24	; 0x22


					/*---------------------------------------------------------------------------------------------------------------------*/
					/* Control Light */
					if ( ActuatorData == 'l')
    21ae:	8a a1       	ldd	r24, Y+34	; 0x22
    21b0:	8c 36       	cpi	r24, 0x6C	; 108
    21b2:	79 f4       	brne	.+30     	; 0x21d2 <main+0x3be>
					{
						LightData=UART_voidReciveData ();
    21b4:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <UART_voidReciveData>
    21b8:	8f 8f       	std	Y+31, r24	; 0x1f
						if ( LightData == '1' )
    21ba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21bc:	81 33       	cpi	r24, 0x31	; 49
    21be:	19 f4       	brne	.+6      	; 0x21c6 <main+0x3b2>
						{
							OpenLight2();
    21c0:	0e 94 b0 11 	call	0x2360	; 0x2360 <OpenLight2>
    21c4:	de cf       	rjmp	.-68     	; 0x2182 <main+0x36e>
						}
						else if ( LightData == '0' )
    21c6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21c8:	80 33       	cpi	r24, 0x30	; 48
    21ca:	d9 f6       	brne	.-74     	; 0x2182 <main+0x36e>
						{
							CloseLight2();
    21cc:	0e 94 c4 11 	call	0x2388	; 0x2388 <CloseLight2>
    21d0:	d8 cf       	rjmp	.-80     	; 0x2182 <main+0x36e>
						}
					}
					/*---------------------------------------------------------------------------------------------------------------------*/
					/* Control Fan */
					else if ( ActuatorData == 'f')
    21d2:	8a a1       	ldd	r24, Y+34	; 0x22
    21d4:	86 36       	cpi	r24, 0x66	; 102
    21d6:	31 f5       	brne	.+76     	; 0x2224 <main+0x410>
					{
						FanData=UART_voidReciveData ();
    21d8:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <UART_voidReciveData>
    21dc:	8e 8f       	std	Y+30, r24	; 0x1e
						if ( FanData == '1' )
    21de:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21e0:	81 33       	cpi	r24, 0x31	; 49
    21e2:	a9 f4       	brne	.+42     	; 0x220e <main+0x3fa>
						{
							if ((ADC_vSetFanAndCooler() > 20))//fan on AC off
    21e4:	0e 94 40 12 	call	0x2480	; 0x2480 <ADC_vSetFanAndCooler>
    21e8:	85 31       	cpi	r24, 0x15	; 21
    21ea:	91 05       	cpc	r25, r1
    21ec:	28 f0       	brcs	.+10     	; 0x21f8 <main+0x3e4>
							{
								OpenFan2();
    21ee:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <OpenFan2>
								CloseWindow();
    21f2:	0e 94 34 12 	call	0x2468	; 0x2468 <CloseWindow>
    21f6:	c5 cf       	rjmp	.-118    	; 0x2182 <main+0x36e>
							}
							else if (ADC_vSetFanAndCooler() <= 20)//fan off AC on
    21f8:	0e 94 40 12 	call	0x2480	; 0x2480 <ADC_vSetFanAndCooler>
    21fc:	85 31       	cpi	r24, 0x15	; 21
    21fe:	91 05       	cpc	r25, r1
    2200:	08 f0       	brcs	.+2      	; 0x2204 <main+0x3f0>
    2202:	bf cf       	rjmp	.-130    	; 0x2182 <main+0x36e>
							{
								CloseFan2();
    2204:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <CloseFan2>
								OpenWindow();
    2208:	0e 94 28 12 	call	0x2450	; 0x2450 <OpenWindow>
    220c:	ba cf       	rjmp	.-140    	; 0x2182 <main+0x36e>
							}
						}
						else if ( FanData == '0' )
    220e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2210:	80 33       	cpi	r24, 0x30	; 48
    2212:	09 f0       	breq	.+2      	; 0x2216 <main+0x402>
    2214:	b6 cf       	rjmp	.-148    	; 0x2182 <main+0x36e>
						{
							!ADC_vSetFanAndCooler();
    2216:	0e 94 40 12 	call	0x2480	; 0x2480 <ADC_vSetFanAndCooler>
							CloseFan2();
    221a:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <CloseFan2>
							OpenWindow();
    221e:	0e 94 28 12 	call	0x2450	; 0x2450 <OpenWindow>
    2222:	af cf       	rjmp	.-162    	; 0x2182 <main+0x36e>
					}
					/*---------------------------------------------------------------------------------------------------------------------*/

					/*---------------------------------------------------------------------------------------------------------------------*/
					/* Exit from  Mode */
					else if ( ActuatorData == '#')
    2224:	8a a1       	ldd	r24, Y+34	; 0x22
    2226:	83 32       	cpi	r24, 0x23	; 35
    2228:	09 f0       	breq	.+2      	; 0x222c <main+0x418>
    222a:	ab cf       	rjmp	.-170    	; 0x2182 <main+0x36e>
					{
						LCD_voidSendCommand(LCD_CLEAR);
    222c:	81 e0       	ldi	r24, 0x01	; 1
    222e:	0e 94 ac 0b 	call	0x1758	; 0x1758 <LCD_voidSendCommand>
						ModeData = 0 ;
    2232:	18 a2       	std	Y+32, r1	; 0x20
						ActuatorData = 0 ;
    2234:	1a a2       	std	Y+34, r1	; 0x22
						CloseLight();
    2236:	0e 94 74 11 	call	0x22e8	; 0x22e8 <CloseLight>
						CloseFan();
    223a:	0e 94 9c 11 	call	0x2338	; 0x2338 <CloseFan>
						CloseWindow();
    223e:	0e 94 34 12 	call	0x2468	; 0x2468 <CloseWindow>
						LCD_voidSendCommand(LCD_CLEAR);
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	0e 94 ac 0b 	call	0x1758	; 0x1758 <LCD_voidSendCommand>
    2248:	36 ce       	rjmp	.-916    	; 0x1eb6 <main+0xa2>
			}


		}
	}
	else if ( Access == 'N')
    224a:	8b a1       	ldd	r24, Y+35	; 0x23
    224c:	8e 34       	cpi	r24, 0x4E	; 78
    224e:	99 f4       	brne	.+38     	; 0x2276 <main+0x462>
	{
		LCD_voidSendCommand(LCD_CLEAR);
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	0e 94 ac 0b 	call	0x1758	; 0x1758 <LCD_voidSendCommand>

		LCD_voidSetLocation (1,3);
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	63 e0       	ldi	r22, 0x03	; 3
    225a:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <LCD_voidSetLocation>
		LCD_voidSendString ("7aramy !!");
    225e:	8c e8       	ldi	r24, 0x8C	; 140
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <LCD_voidSendString>
		LCD_voidSetLocation (2,0);
    2266:	82 e0       	ldi	r24, 0x02	; 2
    2268:	60 e0       	ldi	r22, 0x00	; 0
    226a:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <LCD_voidSetLocation>
		LCD_voidSendString ("Restart System..");
    226e:	86 e9       	ldi	r24, 0x96	; 150
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <LCD_voidSendString>
	}

	return 0;
    2276:	80 e0       	ldi	r24, 0x00	; 0
    2278:	90 e0       	ldi	r25, 0x00	; 0
}
    227a:	a3 96       	adiw	r28, 0x23	; 35
    227c:	0f b6       	in	r0, 0x3f	; 63
    227e:	f8 94       	cli
    2280:	de bf       	out	0x3e, r29	; 62
    2282:	0f be       	out	0x3f, r0	; 63
    2284:	cd bf       	out	0x3d, r28	; 61
    2286:	cf 91       	pop	r28
    2288:	df 91       	pop	r29
    228a:	08 95       	ret

0000228c <StartProgram>:

/*----------------------------------------------------------------------------------------------------------------------*/

void StartProgram (void)
{
    228c:	df 93       	push	r29
    228e:	cf 93       	push	r28
    2290:	cd b7       	in	r28, 0x3d	; 61
    2292:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCommand(LCD_CLEAR);
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	0e 94 ac 0b 	call	0x1758	; 0x1758 <LCD_voidSendCommand>
	LCD_voidSetLocation (1,1);
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	61 e0       	ldi	r22, 0x01	; 1
    229e:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <LCD_voidSetLocation>
	LCD_voidSendString (" Welcome To MY");
    22a2:	87 ea       	ldi	r24, 0xA7	; 167
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <LCD_voidSendString>
	LCD_voidSetLocation (2,0);
    22aa:	82 e0       	ldi	r24, 0x02	; 2
    22ac:	60 e0       	ldi	r22, 0x00	; 0
    22ae:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <LCD_voidSetLocation>
	LCD_voidSendString ("  Smart Home :) ");
    22b2:	86 eb       	ldi	r24, 0xB6	; 182
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <LCD_voidSendString>
}
    22ba:	cf 91       	pop	r28
    22bc:	df 91       	pop	r29
    22be:	08 95       	ret

000022c0 <OpenLight>:

/*----------------------------------------------------------------------------------------------------------------------*/

void OpenLight (void)
{
    22c0:	df 93       	push	r29
    22c2:	cf 93       	push	r28
    22c4:	cd b7       	in	r28, 0x3d	; 61
    22c6:	de b7       	in	r29, 0x3e	; 62

	LCD_voidSetLocation ( 1 , 8 );
    22c8:	81 e0       	ldi	r24, 0x01	; 1
    22ca:	68 e0       	ldi	r22, 0x08	; 8
    22cc:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <LCD_voidSetLocation>
	LCD_voidSendString ("LED-ON");
    22d0:	87 ec       	ldi	r24, 0xC7	; 199
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <LCD_voidSendString>
	DIO_voidSetPinValue(DIO_PORTA,DIO_PIN3,DIO_HIGH);
    22d8:	80 e0       	ldi	r24, 0x00	; 0
    22da:	63 e0       	ldi	r22, 0x03	; 3
    22dc:	41 e0       	ldi	r20, 0x01	; 1
    22de:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_voidSetPinValue>


}
    22e2:	cf 91       	pop	r28
    22e4:	df 91       	pop	r29
    22e6:	08 95       	ret

000022e8 <CloseLight>:
/*----------------------------------------------------------------------------------------------------------------------*/

void CloseLight (void)
{
    22e8:	df 93       	push	r29
    22ea:	cf 93       	push	r28
    22ec:	cd b7       	in	r28, 0x3d	; 61
    22ee:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSetLocation ( 1 , 8 );
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	68 e0       	ldi	r22, 0x08	; 8
    22f4:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <LCD_voidSetLocation>
	LCD_voidSendString ("LED-OFF");
    22f8:	8e ec       	ldi	r24, 0xCE	; 206
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <LCD_voidSendString>
	DIO_voidSetPinValue(DIO_PORTA,DIO_PIN3,DIO_LOW);
    2300:	80 e0       	ldi	r24, 0x00	; 0
    2302:	63 e0       	ldi	r22, 0x03	; 3
    2304:	40 e0       	ldi	r20, 0x00	; 0
    2306:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_voidSetPinValue>


}
    230a:	cf 91       	pop	r28
    230c:	df 91       	pop	r29
    230e:	08 95       	ret

00002310 <OpenFan>:
/*----------------------------------------------------------------------------------------------------------------------*/

void OpenFan (void)
{
    2310:	df 93       	push	r29
    2312:	cf 93       	push	r28
    2314:	cd b7       	in	r28, 0x3d	; 61
    2316:	de b7       	in	r29, 0x3e	; 62

	LCD_voidSetLocation ( 2 , 0 );
    2318:	82 e0       	ldi	r24, 0x02	; 2
    231a:	60 e0       	ldi	r22, 0x00	; 0
    231c:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <LCD_voidSetLocation>
	LCD_voidSendString ("Fan-ON");
    2320:	86 ed       	ldi	r24, 0xD6	; 214
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <LCD_voidSendString>
	DIO_voidSetPinValue(DIO_PORTA,DIO_PIN4,DIO_HIGH);
    2328:	80 e0       	ldi	r24, 0x00	; 0
    232a:	64 e0       	ldi	r22, 0x04	; 4
    232c:	41 e0       	ldi	r20, 0x01	; 1
    232e:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_voidSetPinValue>

}
    2332:	cf 91       	pop	r28
    2334:	df 91       	pop	r29
    2336:	08 95       	ret

00002338 <CloseFan>:

/*----------------------------------------------------------------------------------------------------------------------*/

void CloseFan (void)
{
    2338:	df 93       	push	r29
    233a:	cf 93       	push	r28
    233c:	cd b7       	in	r28, 0x3d	; 61
    233e:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSetLocation ( 2 , 0 );
    2340:	82 e0       	ldi	r24, 0x02	; 2
    2342:	60 e0       	ldi	r22, 0x00	; 0
    2344:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <LCD_voidSetLocation>
	LCD_voidSendString ("Fan-OFF");
    2348:	8d ed       	ldi	r24, 0xDD	; 221
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <LCD_voidSendString>
	DIO_voidSetPinValue(DIO_PORTA,DIO_PIN4,DIO_LOW);
    2350:	80 e0       	ldi	r24, 0x00	; 0
    2352:	64 e0       	ldi	r22, 0x04	; 4
    2354:	40 e0       	ldi	r20, 0x00	; 0
    2356:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_voidSetPinValue>
}
    235a:	cf 91       	pop	r28
    235c:	df 91       	pop	r29
    235e:	08 95       	ret

00002360 <OpenLight2>:
/*----------------------------------------------------------------------------------------------------------------------*/
void OpenLight2 (void)
{
    2360:	df 93       	push	r29
    2362:	cf 93       	push	r28
    2364:	cd b7       	in	r28, 0x3d	; 61
    2366:	de b7       	in	r29, 0x3e	; 62

	LCD_voidSetLocation ( 1 , 0 );
    2368:	81 e0       	ldi	r24, 0x01	; 1
    236a:	60 e0       	ldi	r22, 0x00	; 0
    236c:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <LCD_voidSetLocation>
	LCD_voidSendString ("LED-ON ");
    2370:	85 ee       	ldi	r24, 0xE5	; 229
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <LCD_voidSendString>
	DIO_voidSetPinValue(DIO_PORTD,DIO_PIN4,DIO_HIGH);
    2378:	83 e0       	ldi	r24, 0x03	; 3
    237a:	64 e0       	ldi	r22, 0x04	; 4
    237c:	41 e0       	ldi	r20, 0x01	; 1
    237e:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_voidSetPinValue>


}
    2382:	cf 91       	pop	r28
    2384:	df 91       	pop	r29
    2386:	08 95       	ret

00002388 <CloseLight2>:
/*----------------------------------------------------------------------------------------------------------------------*/

void CloseLight2 (void)
{
    2388:	df 93       	push	r29
    238a:	cf 93       	push	r28
    238c:	cd b7       	in	r28, 0x3d	; 61
    238e:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSetLocation ( 1 , 0 );
    2390:	81 e0       	ldi	r24, 0x01	; 1
    2392:	60 e0       	ldi	r22, 0x00	; 0
    2394:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <LCD_voidSetLocation>
	LCD_voidSendString ("LED-OFF");
    2398:	8e ec       	ldi	r24, 0xCE	; 206
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <LCD_voidSendString>
	DIO_voidSetPinValue(DIO_PORTD,DIO_PIN4,DIO_LOW);
    23a0:	83 e0       	ldi	r24, 0x03	; 3
    23a2:	64 e0       	ldi	r22, 0x04	; 4
    23a4:	40 e0       	ldi	r20, 0x00	; 0
    23a6:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_voidSetPinValue>


}
    23aa:	cf 91       	pop	r28
    23ac:	df 91       	pop	r29
    23ae:	08 95       	ret

000023b0 <OpenFan2>:
/*----------------------------------------------------------------------------------------------------------------------*/

void OpenFan2 (void)
{
    23b0:	df 93       	push	r29
    23b2:	cf 93       	push	r28
    23b4:	cd b7       	in	r28, 0x3d	; 61
    23b6:	de b7       	in	r29, 0x3e	; 62

	LCD_voidSetLocation ( 2 , 0 );
    23b8:	82 e0       	ldi	r24, 0x02	; 2
    23ba:	60 e0       	ldi	r22, 0x00	; 0
    23bc:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <LCD_voidSetLocation>

	LCD_voidSendString ("Turn-ON ");
    23c0:	8d ee       	ldi	r24, 0xED	; 237
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <LCD_voidSendString>
	DIO_voidSetPinValue(DIO_PORTD,DIO_PIN5,DIO_HIGH);
    23c8:	83 e0       	ldi	r24, 0x03	; 3
    23ca:	65 e0       	ldi	r22, 0x05	; 5
    23cc:	41 e0       	ldi	r20, 0x01	; 1
    23ce:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_voidSetPinValue>

}
    23d2:	cf 91       	pop	r28
    23d4:	df 91       	pop	r29
    23d6:	08 95       	ret

000023d8 <CloseFan2>:

/*----------------------------------------------------------------------------------------------------------------------*/

void CloseFan2 (void)
{
    23d8:	df 93       	push	r29
    23da:	cf 93       	push	r28
    23dc:	cd b7       	in	r28, 0x3d	; 61
    23de:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSetLocation ( 2 , 0 );
    23e0:	82 e0       	ldi	r24, 0x02	; 2
    23e2:	60 e0       	ldi	r22, 0x00	; 0
    23e4:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <LCD_voidSetLocation>
	LCD_voidSendString ("Turn-OFF");
    23e8:	86 ef       	ldi	r24, 0xF6	; 246
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <LCD_voidSendString>
	DIO_voidSetPinValue(DIO_PORTD,DIO_PIN5,DIO_LOW);
    23f0:	83 e0       	ldi	r24, 0x03	; 3
    23f2:	65 e0       	ldi	r22, 0x05	; 5
    23f4:	40 e0       	ldi	r20, 0x00	; 0
    23f6:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_voidSetPinValue>
}
    23fa:	cf 91       	pop	r28
    23fc:	df 91       	pop	r29
    23fe:	08 95       	ret

00002400 <OpenTV>:
/*----------------------------------------------------------------------------------------------------------------------*/

void OpenTV (void)
{
    2400:	df 93       	push	r29
    2402:	cf 93       	push	r28
    2404:	cd b7       	in	r28, 0x3d	; 61
    2406:	de b7       	in	r29, 0x3e	; 62

	LCD_voidSetLocation ( 1 , 0 );
    2408:	81 e0       	ldi	r24, 0x01	; 1
    240a:	60 e0       	ldi	r22, 0x00	; 0
    240c:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <LCD_voidSetLocation>
	LCD_voidSendString ("TV-ON");
    2410:	8f ef       	ldi	r24, 0xFF	; 255
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <LCD_voidSendString>
	DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_HIGH);
    2418:	83 e0       	ldi	r24, 0x03	; 3
    241a:	66 e0       	ldi	r22, 0x06	; 6
    241c:	41 e0       	ldi	r20, 0x01	; 1
    241e:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_voidSetPinValue>

}
    2422:	cf 91       	pop	r28
    2424:	df 91       	pop	r29
    2426:	08 95       	ret

00002428 <CloseTV>:

/*----------------------------------------------------------------------------------------------------------------------*/

void CloseTV (void)
{
    2428:	df 93       	push	r29
    242a:	cf 93       	push	r28
    242c:	cd b7       	in	r28, 0x3d	; 61
    242e:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSetLocation ( 1 , 0 );
    2430:	81 e0       	ldi	r24, 0x01	; 1
    2432:	60 e0       	ldi	r22, 0x00	; 0
    2434:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <LCD_voidSetLocation>
	LCD_voidSendString ("TV-OFF");
    2438:	85 e0       	ldi	r24, 0x05	; 5
    243a:	91 e0       	ldi	r25, 0x01	; 1
    243c:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <LCD_voidSendString>
	DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_LOW);
    2440:	83 e0       	ldi	r24, 0x03	; 3
    2442:	66 e0       	ldi	r22, 0x06	; 6
    2444:	40 e0       	ldi	r20, 0x00	; 0
    2446:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_voidSetPinValue>
}
    244a:	cf 91       	pop	r28
    244c:	df 91       	pop	r29
    244e:	08 95       	ret

00002450 <OpenWindow>:
/*----------------------------------------------------------------------------------------------------------------------*/

void OpenWindow (void)
{
    2450:	df 93       	push	r29
    2452:	cf 93       	push	r28
    2454:	cd b7       	in	r28, 0x3d	; 61
    2456:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DIO_PORTD,DIO_PIN3,DIO_HIGH);
    2458:	83 e0       	ldi	r24, 0x03	; 3
    245a:	63 e0       	ldi	r22, 0x03	; 3
    245c:	41 e0       	ldi	r20, 0x01	; 1
    245e:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_voidSetPinValue>
}
    2462:	cf 91       	pop	r28
    2464:	df 91       	pop	r29
    2466:	08 95       	ret

00002468 <CloseWindow>:
/*----------------------------------------------------------------------------------------------------------------------*/

void CloseWindow (void)
{
    2468:	df 93       	push	r29
    246a:	cf 93       	push	r28
    246c:	cd b7       	in	r28, 0x3d	; 61
    246e:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DIO_PORTD,DIO_PIN3,DIO_LOW);
    2470:	83 e0       	ldi	r24, 0x03	; 3
    2472:	63 e0       	ldi	r22, 0x03	; 3
    2474:	40 e0       	ldi	r20, 0x00	; 0
    2476:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_voidSetPinValue>
}
    247a:	cf 91       	pop	r28
    247c:	df 91       	pop	r29
    247e:	08 95       	ret

00002480 <ADC_vSetFanAndCooler>:
u16 ADC_vSetFanAndCooler (void)
{
    2480:	df 93       	push	r29
    2482:	cf 93       	push	r28
    2484:	cd b7       	in	r28, 0x3d	; 61
    2486:	de b7       	in	r29, 0x3e	; 62
    2488:	28 97       	sbiw	r28, 0x08	; 8
    248a:	0f b6       	in	r0, 0x3f	; 63
    248c:	f8 94       	cli
    248e:	de bf       	out	0x3e, r29	; 62
    2490:	0f be       	out	0x3f, r0	; 63
    2492:	cd bf       	out	0x3d, r28	; 61
	u16 Local_u8ADCReading=0;
    2494:	18 86       	std	Y+8, r1	; 0x08
    2496:	1f 82       	std	Y+7, r1	; 0x07
	u16 Local_u16AnalogReading=0;
    2498:	1e 82       	std	Y+6, r1	; 0x06
    249a:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u8Temp=0;
    249c:	19 82       	std	Y+1, r1	; 0x01
    249e:	1a 82       	std	Y+2, r1	; 0x02
    24a0:	1b 82       	std	Y+3, r1	; 0x03
    24a2:	1c 82       	std	Y+4, r1	; 0x04
	Local_u8ADCReading=ADC_u16GetDigitalValue(0);
    24a4:	80 e0       	ldi	r24, 0x00	; 0
    24a6:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u16GetDigitalValue>
    24aa:	98 87       	std	Y+8, r25	; 0x08
    24ac:	8f 83       	std	Y+7, r24	; 0x07
	Local_u16AnalogReading = (u16)(((u32)Local_u8ADCReading * 5000UL) / 1024UL) ;
    24ae:	8f 81       	ldd	r24, Y+7	; 0x07
    24b0:	98 85       	ldd	r25, Y+8	; 0x08
    24b2:	cc 01       	movw	r24, r24
    24b4:	a0 e0       	ldi	r26, 0x00	; 0
    24b6:	b0 e0       	ldi	r27, 0x00	; 0
    24b8:	28 e8       	ldi	r18, 0x88	; 136
    24ba:	33 e1       	ldi	r19, 0x13	; 19
    24bc:	40 e0       	ldi	r20, 0x00	; 0
    24be:	50 e0       	ldi	r21, 0x00	; 0
    24c0:	bc 01       	movw	r22, r24
    24c2:	cd 01       	movw	r24, r26
    24c4:	0e 94 8b 12 	call	0x2516	; 0x2516 <__mulsi3>
    24c8:	dc 01       	movw	r26, r24
    24ca:	cb 01       	movw	r24, r22
    24cc:	07 2e       	mov	r0, r23
    24ce:	7a e0       	ldi	r23, 0x0A	; 10
    24d0:	b6 95       	lsr	r27
    24d2:	a7 95       	ror	r26
    24d4:	97 95       	ror	r25
    24d6:	87 95       	ror	r24
    24d8:	7a 95       	dec	r23
    24da:	d1 f7       	brne	.-12     	; 0x24d0 <ADC_vSetFanAndCooler+0x50>
    24dc:	70 2d       	mov	r23, r0
    24de:	9e 83       	std	Y+6, r25	; 0x06
    24e0:	8d 83       	std	Y+5, r24	; 0x05
	Local_u8Temp   = Local_u16AnalogReading / 10 ;
    24e2:	8d 81       	ldd	r24, Y+5	; 0x05
    24e4:	9e 81       	ldd	r25, Y+6	; 0x06
    24e6:	2a e0       	ldi	r18, 0x0A	; 10
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	b9 01       	movw	r22, r18
    24ec:	0e 94 aa 12 	call	0x2554	; 0x2554 <__udivmodhi4>
    24f0:	cb 01       	movw	r24, r22
    24f2:	cc 01       	movw	r24, r24
    24f4:	a0 e0       	ldi	r26, 0x00	; 0
    24f6:	b0 e0       	ldi	r27, 0x00	; 0
    24f8:	89 83       	std	Y+1, r24	; 0x01
    24fa:	9a 83       	std	Y+2, r25	; 0x02
    24fc:	ab 83       	std	Y+3, r26	; 0x03
    24fe:	bc 83       	std	Y+4, r27	; 0x04

	return Local_u8Temp;
    2500:	89 81       	ldd	r24, Y+1	; 0x01
    2502:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2504:	28 96       	adiw	r28, 0x08	; 8
    2506:	0f b6       	in	r0, 0x3f	; 63
    2508:	f8 94       	cli
    250a:	de bf       	out	0x3e, r29	; 62
    250c:	0f be       	out	0x3f, r0	; 63
    250e:	cd bf       	out	0x3d, r28	; 61
    2510:	cf 91       	pop	r28
    2512:	df 91       	pop	r29
    2514:	08 95       	ret

00002516 <__mulsi3>:
    2516:	62 9f       	mul	r22, r18
    2518:	d0 01       	movw	r26, r0
    251a:	73 9f       	mul	r23, r19
    251c:	f0 01       	movw	r30, r0
    251e:	82 9f       	mul	r24, r18
    2520:	e0 0d       	add	r30, r0
    2522:	f1 1d       	adc	r31, r1
    2524:	64 9f       	mul	r22, r20
    2526:	e0 0d       	add	r30, r0
    2528:	f1 1d       	adc	r31, r1
    252a:	92 9f       	mul	r25, r18
    252c:	f0 0d       	add	r31, r0
    252e:	83 9f       	mul	r24, r19
    2530:	f0 0d       	add	r31, r0
    2532:	74 9f       	mul	r23, r20
    2534:	f0 0d       	add	r31, r0
    2536:	65 9f       	mul	r22, r21
    2538:	f0 0d       	add	r31, r0
    253a:	99 27       	eor	r25, r25
    253c:	72 9f       	mul	r23, r18
    253e:	b0 0d       	add	r27, r0
    2540:	e1 1d       	adc	r30, r1
    2542:	f9 1f       	adc	r31, r25
    2544:	63 9f       	mul	r22, r19
    2546:	b0 0d       	add	r27, r0
    2548:	e1 1d       	adc	r30, r1
    254a:	f9 1f       	adc	r31, r25
    254c:	bd 01       	movw	r22, r26
    254e:	cf 01       	movw	r24, r30
    2550:	11 24       	eor	r1, r1
    2552:	08 95       	ret

00002554 <__udivmodhi4>:
    2554:	aa 1b       	sub	r26, r26
    2556:	bb 1b       	sub	r27, r27
    2558:	51 e1       	ldi	r21, 0x11	; 17
    255a:	07 c0       	rjmp	.+14     	; 0x256a <__udivmodhi4_ep>

0000255c <__udivmodhi4_loop>:
    255c:	aa 1f       	adc	r26, r26
    255e:	bb 1f       	adc	r27, r27
    2560:	a6 17       	cp	r26, r22
    2562:	b7 07       	cpc	r27, r23
    2564:	10 f0       	brcs	.+4      	; 0x256a <__udivmodhi4_ep>
    2566:	a6 1b       	sub	r26, r22
    2568:	b7 0b       	sbc	r27, r23

0000256a <__udivmodhi4_ep>:
    256a:	88 1f       	adc	r24, r24
    256c:	99 1f       	adc	r25, r25
    256e:	5a 95       	dec	r21
    2570:	a9 f7       	brne	.-22     	; 0x255c <__udivmodhi4_loop>
    2572:	80 95       	com	r24
    2574:	90 95       	com	r25
    2576:	bc 01       	movw	r22, r24
    2578:	cd 01       	movw	r24, r26
    257a:	08 95       	ret

0000257c <__divmodhi4>:
    257c:	97 fb       	bst	r25, 7
    257e:	09 2e       	mov	r0, r25
    2580:	07 26       	eor	r0, r23
    2582:	0a d0       	rcall	.+20     	; 0x2598 <__divmodhi4_neg1>
    2584:	77 fd       	sbrc	r23, 7
    2586:	04 d0       	rcall	.+8      	; 0x2590 <__divmodhi4_neg2>
    2588:	e5 df       	rcall	.-54     	; 0x2554 <__udivmodhi4>
    258a:	06 d0       	rcall	.+12     	; 0x2598 <__divmodhi4_neg1>
    258c:	00 20       	and	r0, r0
    258e:	1a f4       	brpl	.+6      	; 0x2596 <__divmodhi4_exit>

00002590 <__divmodhi4_neg2>:
    2590:	70 95       	com	r23
    2592:	61 95       	neg	r22
    2594:	7f 4f       	sbci	r23, 0xFF	; 255

00002596 <__divmodhi4_exit>:
    2596:	08 95       	ret

00002598 <__divmodhi4_neg1>:
    2598:	f6 f7       	brtc	.-4      	; 0x2596 <__divmodhi4_exit>
    259a:	90 95       	com	r25
    259c:	81 95       	neg	r24
    259e:	9f 4f       	sbci	r25, 0xFF	; 255
    25a0:	08 95       	ret

000025a2 <__prologue_saves__>:
    25a2:	2f 92       	push	r2
    25a4:	3f 92       	push	r3
    25a6:	4f 92       	push	r4
    25a8:	5f 92       	push	r5
    25aa:	6f 92       	push	r6
    25ac:	7f 92       	push	r7
    25ae:	8f 92       	push	r8
    25b0:	9f 92       	push	r9
    25b2:	af 92       	push	r10
    25b4:	bf 92       	push	r11
    25b6:	cf 92       	push	r12
    25b8:	df 92       	push	r13
    25ba:	ef 92       	push	r14
    25bc:	ff 92       	push	r15
    25be:	0f 93       	push	r16
    25c0:	1f 93       	push	r17
    25c2:	cf 93       	push	r28
    25c4:	df 93       	push	r29
    25c6:	cd b7       	in	r28, 0x3d	; 61
    25c8:	de b7       	in	r29, 0x3e	; 62
    25ca:	ca 1b       	sub	r28, r26
    25cc:	db 0b       	sbc	r29, r27
    25ce:	0f b6       	in	r0, 0x3f	; 63
    25d0:	f8 94       	cli
    25d2:	de bf       	out	0x3e, r29	; 62
    25d4:	0f be       	out	0x3f, r0	; 63
    25d6:	cd bf       	out	0x3d, r28	; 61
    25d8:	09 94       	ijmp

000025da <__epilogue_restores__>:
    25da:	2a 88       	ldd	r2, Y+18	; 0x12
    25dc:	39 88       	ldd	r3, Y+17	; 0x11
    25de:	48 88       	ldd	r4, Y+16	; 0x10
    25e0:	5f 84       	ldd	r5, Y+15	; 0x0f
    25e2:	6e 84       	ldd	r6, Y+14	; 0x0e
    25e4:	7d 84       	ldd	r7, Y+13	; 0x0d
    25e6:	8c 84       	ldd	r8, Y+12	; 0x0c
    25e8:	9b 84       	ldd	r9, Y+11	; 0x0b
    25ea:	aa 84       	ldd	r10, Y+10	; 0x0a
    25ec:	b9 84       	ldd	r11, Y+9	; 0x09
    25ee:	c8 84       	ldd	r12, Y+8	; 0x08
    25f0:	df 80       	ldd	r13, Y+7	; 0x07
    25f2:	ee 80       	ldd	r14, Y+6	; 0x06
    25f4:	fd 80       	ldd	r15, Y+5	; 0x05
    25f6:	0c 81       	ldd	r16, Y+4	; 0x04
    25f8:	1b 81       	ldd	r17, Y+3	; 0x03
    25fa:	aa 81       	ldd	r26, Y+2	; 0x02
    25fc:	b9 81       	ldd	r27, Y+1	; 0x01
    25fe:	ce 0f       	add	r28, r30
    2600:	d1 1d       	adc	r29, r1
    2602:	0f b6       	in	r0, 0x3f	; 63
    2604:	f8 94       	cli
    2606:	de bf       	out	0x3e, r29	; 62
    2608:	0f be       	out	0x3f, r0	; 63
    260a:	cd bf       	out	0x3d, r28	; 61
    260c:	ed 01       	movw	r28, r26
    260e:	08 95       	ret

00002610 <_exit>:
    2610:	f8 94       	cli

00002612 <__stop_program>:
    2612:	ff cf       	rjmp	.-2      	; 0x2612 <__stop_program>
