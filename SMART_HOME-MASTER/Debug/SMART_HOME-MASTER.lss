
SMART_HOME-MASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000142  00800060  00002e1c  00002eb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008001a2  008001a2  00002ff2  2**0
                  ALLOC
  3 .stab         000030a8  00000000  00000000  00002ff4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000110c  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000071a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000072e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007458  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000090a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ad3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ae9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b129  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b8f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e1       	ldi	r30, 0x1C	; 28
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3a       	cpi	r26, 0xA2	; 162
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 ea       	ldi	r26, 0xA2	; 162
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3a       	cpi	r26, 0xA4	; 164
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bc 11 	call	0x2378	; 0x2378 <main>
      8a:	0c 94 0c 17 	jmp	0x2e18	; 0x2e18 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d5 16 	jmp	0x2daa	; 0x2daa <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e8       	ldi	r26, 0x81	; 129
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f1 16 	jmp	0x2de2	; 0x2de2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e1 16 	jmp	0x2dc2	; 0x2dc2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fd 16 	jmp	0x2dfa	; 0x2dfa <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e1 16 	jmp	0x2dc2	; 0x2dc2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fd 16 	jmp	0x2dfa	; 0x2dfa <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d5 16 	jmp	0x2daa	; 0x2daa <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e8       	ldi	r24, 0x81	; 129
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f1 16 	jmp	0x2de2	; 0x2de2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e1 16 	jmp	0x2dc2	; 0x2dc2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 fd 16 	jmp	0x2dfa	; 0x2dfa <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e1 16 	jmp	0x2dc2	; 0x2dc2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 fd 16 	jmp	0x2dfa	; 0x2dfa <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 e1 16 	jmp	0x2dc2	; 0x2dc2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 fd 16 	jmp	0x2dfa	; 0x2dfa <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e5 16 	jmp	0x2dca	; 0x2dca <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 01 17 	jmp	0x2e02	; 0x2e02 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidInit>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include <avr/io.h>
#include "ADC.h"
void ADC_voidInit(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADMUX,6); // AVCC
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 64       	ori	r24, 0x40	; 64
     b5a:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADEN); // ENABLE ADC
     b5c:	a6 e2       	ldi	r26, 0x26	; 38
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e6 e2       	ldi	r30, 0x26	; 38
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	80 68       	ori	r24, 0x80	; 128
     b68:	8c 93       	st	X, r24
	ADCSRA |= 0b111; // prescaler 128 > freq = 125Khz
     b6a:	a6 e2       	ldi	r26, 0x26	; 38
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e6 e2       	ldi	r30, 0x26	; 38
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	87 60       	ori	r24, 0x07	; 7
     b76:	8c 93       	st	X, r24
}
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	08 95       	ret

00000b7e <ADC_u16GetDigitalValue>:
u16  ADC_u16GetDigitalValue(u8 Copy_u8ChannelNum){
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	0f 92       	push	r0
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
     b88:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0b11100000;
     b8a:	a7 e2       	ldi	r26, 0x27	; 39
     b8c:	b0 e0       	ldi	r27, 0x00	; 0
     b8e:	e7 e2       	ldi	r30, 0x27	; 39
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	80 81       	ld	r24, Z
     b94:	80 7e       	andi	r24, 0xE0	; 224
     b96:	8c 93       	st	X, r24
	ADMUX |= Copy_u8ChannelNum;
     b98:	a7 e2       	ldi	r26, 0x27	; 39
     b9a:	b0 e0       	ldi	r27, 0x00	; 0
     b9c:	e7 e2       	ldi	r30, 0x27	; 39
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	90 81       	ld	r25, Z
     ba2:	89 81       	ldd	r24, Y+1	; 0x01
     ba4:	89 2b       	or	r24, r25
     ba6:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC); // Start conversion
     ba8:	a6 e2       	ldi	r26, 0x26	; 38
     baa:	b0 e0       	ldi	r27, 0x00	; 0
     bac:	e6 e2       	ldi	r30, 0x26	; 38
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	80 81       	ld	r24, Z
     bb2:	80 64       	ori	r24, 0x40	; 64
     bb4:	8c 93       	st	X, r24
	while(GET_BIT(ADCSRA, ADSC) == 1){}
     bb6:	e6 e2       	ldi	r30, 0x26	; 38
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	82 95       	swap	r24
     bbe:	86 95       	lsr	r24
     bc0:	86 95       	lsr	r24
     bc2:	83 70       	andi	r24, 0x03	; 3
     bc4:	88 2f       	mov	r24, r24
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	81 70       	andi	r24, 0x01	; 1
     bca:	90 70       	andi	r25, 0x00	; 0
     bcc:	88 23       	and	r24, r24
     bce:	99 f7       	brne	.-26     	; 0xbb6 <ADC_u16GetDigitalValue+0x38>
	//while(READBIT(ADCSRA, ADIF) == 0){}
	//SETBIT(ADCSRA,ADIF);

	return ADC;
     bd0:	e4 e2       	ldi	r30, 0x24	; 36
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	91 81       	ldd	r25, Z+1	; 0x01
}
     bd8:	0f 90       	pop	r0
     bda:	cf 91       	pop	r28
     bdc:	df 91       	pop	r29
     bde:	08 95       	ret

00000be0 <DIO_voidSetPinDirection>:
#include"BIT_MATH.h"
#include<avr/io.h>
#include "DIO_interface.h"
//#include "DIO_private.h"
void DIO_voidSetPinDirection(u8 copy_u8port, u8 copy_u8pin, u8 copy_u8Direction)
{
     be0:	df 93       	push	r29
     be2:	cf 93       	push	r28
     be4:	cd b7       	in	r28, 0x3d	; 61
     be6:	de b7       	in	r29, 0x3e	; 62
     be8:	27 97       	sbiw	r28, 0x07	; 7
     bea:	0f b6       	in	r0, 0x3f	; 63
     bec:	f8 94       	cli
     bee:	de bf       	out	0x3e, r29	; 62
     bf0:	0f be       	out	0x3f, r0	; 63
     bf2:	cd bf       	out	0x3d, r28	; 61
     bf4:	89 83       	std	Y+1, r24	; 0x01
     bf6:	6a 83       	std	Y+2, r22	; 0x02
     bf8:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8Direction == 1)             
     bfa:	8b 81       	ldd	r24, Y+3	; 0x03
     bfc:	81 30       	cpi	r24, 0x01	; 1
     bfe:	09 f0       	breq	.+2      	; 0xc02 <DIO_voidSetPinDirection+0x22>
     c00:	6f c0       	rjmp	.+222    	; 0xce0 <DIO_voidSetPinDirection+0x100>
	{
		switch(copy_u8port)
     c02:	89 81       	ldd	r24, Y+1	; 0x01
     c04:	28 2f       	mov	r18, r24
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	3f 83       	std	Y+7, r19	; 0x07
     c0a:	2e 83       	std	Y+6, r18	; 0x06
     c0c:	8e 81       	ldd	r24, Y+6	; 0x06
     c0e:	9f 81       	ldd	r25, Y+7	; 0x07
     c10:	81 30       	cpi	r24, 0x01	; 1
     c12:	91 05       	cpc	r25, r1
     c14:	49 f1       	breq	.+82     	; 0xc68 <DIO_voidSetPinDirection+0x88>
     c16:	2e 81       	ldd	r18, Y+6	; 0x06
     c18:	3f 81       	ldd	r19, Y+7	; 0x07
     c1a:	22 30       	cpi	r18, 0x02	; 2
     c1c:	31 05       	cpc	r19, r1
     c1e:	2c f4       	brge	.+10     	; 0xc2a <DIO_voidSetPinDirection+0x4a>
     c20:	8e 81       	ldd	r24, Y+6	; 0x06
     c22:	9f 81       	ldd	r25, Y+7	; 0x07
     c24:	00 97       	sbiw	r24, 0x00	; 0
     c26:	61 f0       	breq	.+24     	; 0xc40 <DIO_voidSetPinDirection+0x60>
     c28:	d2 c0       	rjmp	.+420    	; 0xdce <DIO_voidSetPinDirection+0x1ee>
     c2a:	2e 81       	ldd	r18, Y+6	; 0x06
     c2c:	3f 81       	ldd	r19, Y+7	; 0x07
     c2e:	22 30       	cpi	r18, 0x02	; 2
     c30:	31 05       	cpc	r19, r1
     c32:	71 f1       	breq	.+92     	; 0xc90 <DIO_voidSetPinDirection+0xb0>
     c34:	8e 81       	ldd	r24, Y+6	; 0x06
     c36:	9f 81       	ldd	r25, Y+7	; 0x07
     c38:	83 30       	cpi	r24, 0x03	; 3
     c3a:	91 05       	cpc	r25, r1
     c3c:	e9 f1       	breq	.+122    	; 0xcb8 <DIO_voidSetPinDirection+0xd8>
     c3e:	c7 c0       	rjmp	.+398    	; 0xdce <DIO_voidSetPinDirection+0x1ee>
		{
			case 0 : SET_BIT(DDRA,copy_u8pin); break;    
     c40:	aa e3       	ldi	r26, 0x3A	; 58
     c42:	b0 e0       	ldi	r27, 0x00	; 0
     c44:	ea e3       	ldi	r30, 0x3A	; 58
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	48 2f       	mov	r20, r24
     c4c:	8a 81       	ldd	r24, Y+2	; 0x02
     c4e:	28 2f       	mov	r18, r24
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	02 2e       	mov	r0, r18
     c58:	02 c0       	rjmp	.+4      	; 0xc5e <DIO_voidSetPinDirection+0x7e>
     c5a:	88 0f       	add	r24, r24
     c5c:	99 1f       	adc	r25, r25
     c5e:	0a 94       	dec	r0
     c60:	e2 f7       	brpl	.-8      	; 0xc5a <DIO_voidSetPinDirection+0x7a>
     c62:	84 2b       	or	r24, r20
     c64:	8c 93       	st	X, r24
     c66:	b3 c0       	rjmp	.+358    	; 0xdce <DIO_voidSetPinDirection+0x1ee>
			case 1 : SET_BIT(DDRB,copy_u8pin); break; 
     c68:	a7 e3       	ldi	r26, 0x37	; 55
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	e7 e3       	ldi	r30, 0x37	; 55
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	48 2f       	mov	r20, r24
     c74:	8a 81       	ldd	r24, Y+2	; 0x02
     c76:	28 2f       	mov	r18, r24
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	02 2e       	mov	r0, r18
     c80:	02 c0       	rjmp	.+4      	; 0xc86 <DIO_voidSetPinDirection+0xa6>
     c82:	88 0f       	add	r24, r24
     c84:	99 1f       	adc	r25, r25
     c86:	0a 94       	dec	r0
     c88:	e2 f7       	brpl	.-8      	; 0xc82 <DIO_voidSetPinDirection+0xa2>
     c8a:	84 2b       	or	r24, r20
     c8c:	8c 93       	st	X, r24
     c8e:	9f c0       	rjmp	.+318    	; 0xdce <DIO_voidSetPinDirection+0x1ee>
			case 2 : SET_BIT(DDRC,copy_u8pin); break; 
     c90:	a4 e3       	ldi	r26, 0x34	; 52
     c92:	b0 e0       	ldi	r27, 0x00	; 0
     c94:	e4 e3       	ldi	r30, 0x34	; 52
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	80 81       	ld	r24, Z
     c9a:	48 2f       	mov	r20, r24
     c9c:	8a 81       	ldd	r24, Y+2	; 0x02
     c9e:	28 2f       	mov	r18, r24
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	02 2e       	mov	r0, r18
     ca8:	02 c0       	rjmp	.+4      	; 0xcae <DIO_voidSetPinDirection+0xce>
     caa:	88 0f       	add	r24, r24
     cac:	99 1f       	adc	r25, r25
     cae:	0a 94       	dec	r0
     cb0:	e2 f7       	brpl	.-8      	; 0xcaa <DIO_voidSetPinDirection+0xca>
     cb2:	84 2b       	or	r24, r20
     cb4:	8c 93       	st	X, r24
     cb6:	8b c0       	rjmp	.+278    	; 0xdce <DIO_voidSetPinDirection+0x1ee>
			case 3 : SET_BIT(DDRD,copy_u8pin); break; 
     cb8:	a1 e3       	ldi	r26, 0x31	; 49
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e1 e3       	ldi	r30, 0x31	; 49
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	48 2f       	mov	r20, r24
     cc4:	8a 81       	ldd	r24, Y+2	; 0x02
     cc6:	28 2f       	mov	r18, r24
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	02 2e       	mov	r0, r18
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <DIO_voidSetPinDirection+0xf6>
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	0a 94       	dec	r0
     cd8:	e2 f7       	brpl	.-8      	; 0xcd2 <DIO_voidSetPinDirection+0xf2>
     cda:	84 2b       	or	r24, r20
     cdc:	8c 93       	st	X, r24
     cde:	77 c0       	rjmp	.+238    	; 0xdce <DIO_voidSetPinDirection+0x1ee>
		}
		
	}
	else if(copy_u8Direction == 0)   
     ce0:	8b 81       	ldd	r24, Y+3	; 0x03
     ce2:	88 23       	and	r24, r24
     ce4:	09 f0       	breq	.+2      	; 0xce8 <DIO_voidSetPinDirection+0x108>
     ce6:	73 c0       	rjmp	.+230    	; 0xdce <DIO_voidSetPinDirection+0x1ee>
	{
		switch(copy_u8port)
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	28 2f       	mov	r18, r24
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	3d 83       	std	Y+5, r19	; 0x05
     cf0:	2c 83       	std	Y+4, r18	; 0x04
     cf2:	8c 81       	ldd	r24, Y+4	; 0x04
     cf4:	9d 81       	ldd	r25, Y+5	; 0x05
     cf6:	81 30       	cpi	r24, 0x01	; 1
     cf8:	91 05       	cpc	r25, r1
     cfa:	59 f1       	breq	.+86     	; 0xd52 <DIO_voidSetPinDirection+0x172>
     cfc:	2c 81       	ldd	r18, Y+4	; 0x04
     cfe:	3d 81       	ldd	r19, Y+5	; 0x05
     d00:	22 30       	cpi	r18, 0x02	; 2
     d02:	31 05       	cpc	r19, r1
     d04:	2c f4       	brge	.+10     	; 0xd10 <DIO_voidSetPinDirection+0x130>
     d06:	8c 81       	ldd	r24, Y+4	; 0x04
     d08:	9d 81       	ldd	r25, Y+5	; 0x05
     d0a:	00 97       	sbiw	r24, 0x00	; 0
     d0c:	69 f0       	breq	.+26     	; 0xd28 <DIO_voidSetPinDirection+0x148>
     d0e:	5f c0       	rjmp	.+190    	; 0xdce <DIO_voidSetPinDirection+0x1ee>
     d10:	2c 81       	ldd	r18, Y+4	; 0x04
     d12:	3d 81       	ldd	r19, Y+5	; 0x05
     d14:	22 30       	cpi	r18, 0x02	; 2
     d16:	31 05       	cpc	r19, r1
     d18:	89 f1       	breq	.+98     	; 0xd7c <DIO_voidSetPinDirection+0x19c>
     d1a:	8c 81       	ldd	r24, Y+4	; 0x04
     d1c:	9d 81       	ldd	r25, Y+5	; 0x05
     d1e:	83 30       	cpi	r24, 0x03	; 3
     d20:	91 05       	cpc	r25, r1
     d22:	09 f4       	brne	.+2      	; 0xd26 <DIO_voidSetPinDirection+0x146>
     d24:	40 c0       	rjmp	.+128    	; 0xda6 <DIO_voidSetPinDirection+0x1c6>
     d26:	53 c0       	rjmp	.+166    	; 0xdce <DIO_voidSetPinDirection+0x1ee>
		{
			case 0 : CLR_BIT(DDRA,copy_u8pin); break; 
     d28:	aa e3       	ldi	r26, 0x3A	; 58
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	ea e3       	ldi	r30, 0x3A	; 58
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	48 2f       	mov	r20, r24
     d34:	8a 81       	ldd	r24, Y+2	; 0x02
     d36:	28 2f       	mov	r18, r24
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	02 2e       	mov	r0, r18
     d40:	02 c0       	rjmp	.+4      	; 0xd46 <DIO_voidSetPinDirection+0x166>
     d42:	88 0f       	add	r24, r24
     d44:	99 1f       	adc	r25, r25
     d46:	0a 94       	dec	r0
     d48:	e2 f7       	brpl	.-8      	; 0xd42 <DIO_voidSetPinDirection+0x162>
     d4a:	80 95       	com	r24
     d4c:	84 23       	and	r24, r20
     d4e:	8c 93       	st	X, r24
     d50:	3e c0       	rjmp	.+124    	; 0xdce <DIO_voidSetPinDirection+0x1ee>
			case 1 : CLR_BIT(DDRB,copy_u8pin); break; 
     d52:	a7 e3       	ldi	r26, 0x37	; 55
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	e7 e3       	ldi	r30, 0x37	; 55
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	48 2f       	mov	r20, r24
     d5e:	8a 81       	ldd	r24, Y+2	; 0x02
     d60:	28 2f       	mov	r18, r24
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	02 2e       	mov	r0, r18
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <DIO_voidSetPinDirection+0x190>
     d6c:	88 0f       	add	r24, r24
     d6e:	99 1f       	adc	r25, r25
     d70:	0a 94       	dec	r0
     d72:	e2 f7       	brpl	.-8      	; 0xd6c <DIO_voidSetPinDirection+0x18c>
     d74:	80 95       	com	r24
     d76:	84 23       	and	r24, r20
     d78:	8c 93       	st	X, r24
     d7a:	29 c0       	rjmp	.+82     	; 0xdce <DIO_voidSetPinDirection+0x1ee>
			case 2 : CLR_BIT(DDRC,copy_u8pin); break; 
     d7c:	a4 e3       	ldi	r26, 0x34	; 52
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	e4 e3       	ldi	r30, 0x34	; 52
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	48 2f       	mov	r20, r24
     d88:	8a 81       	ldd	r24, Y+2	; 0x02
     d8a:	28 2f       	mov	r18, r24
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	02 2e       	mov	r0, r18
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <DIO_voidSetPinDirection+0x1ba>
     d96:	88 0f       	add	r24, r24
     d98:	99 1f       	adc	r25, r25
     d9a:	0a 94       	dec	r0
     d9c:	e2 f7       	brpl	.-8      	; 0xd96 <DIO_voidSetPinDirection+0x1b6>
     d9e:	80 95       	com	r24
     da0:	84 23       	and	r24, r20
     da2:	8c 93       	st	X, r24
     da4:	14 c0       	rjmp	.+40     	; 0xdce <DIO_voidSetPinDirection+0x1ee>
			case 3 : CLR_BIT(DDRD,copy_u8pin); break; 
     da6:	a1 e3       	ldi	r26, 0x31	; 49
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	e1 e3       	ldi	r30, 0x31	; 49
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	48 2f       	mov	r20, r24
     db2:	8a 81       	ldd	r24, Y+2	; 0x02
     db4:	28 2f       	mov	r18, r24
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	02 2e       	mov	r0, r18
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <DIO_voidSetPinDirection+0x1e4>
     dc0:	88 0f       	add	r24, r24
     dc2:	99 1f       	adc	r25, r25
     dc4:	0a 94       	dec	r0
     dc6:	e2 f7       	brpl	.-8      	; 0xdc0 <DIO_voidSetPinDirection+0x1e0>
     dc8:	80 95       	com	r24
     dca:	84 23       	and	r24, r20
     dcc:	8c 93       	st	X, r24
		}
	}
}
     dce:	27 96       	adiw	r28, 0x07	; 7
     dd0:	0f b6       	in	r0, 0x3f	; 63
     dd2:	f8 94       	cli
     dd4:	de bf       	out	0x3e, r29	; 62
     dd6:	0f be       	out	0x3f, r0	; 63
     dd8:	cd bf       	out	0x3d, r28	; 61
     dda:	cf 91       	pop	r28
     ddc:	df 91       	pop	r29
     dde:	08 95       	ret

00000de0 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 copy_u8port, u8 copy_u8pin, u8 copy_u8Value)
{
     de0:	df 93       	push	r29
     de2:	cf 93       	push	r28
     de4:	cd b7       	in	r28, 0x3d	; 61
     de6:	de b7       	in	r29, 0x3e	; 62
     de8:	27 97       	sbiw	r28, 0x07	; 7
     dea:	0f b6       	in	r0, 0x3f	; 63
     dec:	f8 94       	cli
     dee:	de bf       	out	0x3e, r29	; 62
     df0:	0f be       	out	0x3f, r0	; 63
     df2:	cd bf       	out	0x3d, r28	; 61
     df4:	89 83       	std	Y+1, r24	; 0x01
     df6:	6a 83       	std	Y+2, r22	; 0x02
     df8:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8Value == 1)           
     dfa:	8b 81       	ldd	r24, Y+3	; 0x03
     dfc:	81 30       	cpi	r24, 0x01	; 1
     dfe:	09 f0       	breq	.+2      	; 0xe02 <DIO_voidSetPinValue+0x22>
     e00:	6f c0       	rjmp	.+222    	; 0xee0 <DIO_voidSetPinValue+0x100>
	{
		switch(copy_u8port)
     e02:	89 81       	ldd	r24, Y+1	; 0x01
     e04:	28 2f       	mov	r18, r24
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	3f 83       	std	Y+7, r19	; 0x07
     e0a:	2e 83       	std	Y+6, r18	; 0x06
     e0c:	8e 81       	ldd	r24, Y+6	; 0x06
     e0e:	9f 81       	ldd	r25, Y+7	; 0x07
     e10:	81 30       	cpi	r24, 0x01	; 1
     e12:	91 05       	cpc	r25, r1
     e14:	49 f1       	breq	.+82     	; 0xe68 <DIO_voidSetPinValue+0x88>
     e16:	2e 81       	ldd	r18, Y+6	; 0x06
     e18:	3f 81       	ldd	r19, Y+7	; 0x07
     e1a:	22 30       	cpi	r18, 0x02	; 2
     e1c:	31 05       	cpc	r19, r1
     e1e:	2c f4       	brge	.+10     	; 0xe2a <DIO_voidSetPinValue+0x4a>
     e20:	8e 81       	ldd	r24, Y+6	; 0x06
     e22:	9f 81       	ldd	r25, Y+7	; 0x07
     e24:	00 97       	sbiw	r24, 0x00	; 0
     e26:	61 f0       	breq	.+24     	; 0xe40 <DIO_voidSetPinValue+0x60>
     e28:	d2 c0       	rjmp	.+420    	; 0xfce <DIO_voidSetPinValue+0x1ee>
     e2a:	2e 81       	ldd	r18, Y+6	; 0x06
     e2c:	3f 81       	ldd	r19, Y+7	; 0x07
     e2e:	22 30       	cpi	r18, 0x02	; 2
     e30:	31 05       	cpc	r19, r1
     e32:	71 f1       	breq	.+92     	; 0xe90 <DIO_voidSetPinValue+0xb0>
     e34:	8e 81       	ldd	r24, Y+6	; 0x06
     e36:	9f 81       	ldd	r25, Y+7	; 0x07
     e38:	83 30       	cpi	r24, 0x03	; 3
     e3a:	91 05       	cpc	r25, r1
     e3c:	e9 f1       	breq	.+122    	; 0xeb8 <DIO_voidSetPinValue+0xd8>
     e3e:	c7 c0       	rjmp	.+398    	; 0xfce <DIO_voidSetPinValue+0x1ee>
		{
			case 0 : SET_BIT(PORTA,copy_u8pin); break; 
     e40:	ab e3       	ldi	r26, 0x3B	; 59
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	eb e3       	ldi	r30, 0x3B	; 59
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	48 2f       	mov	r20, r24
     e4c:	8a 81       	ldd	r24, Y+2	; 0x02
     e4e:	28 2f       	mov	r18, r24
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	02 2e       	mov	r0, r18
     e58:	02 c0       	rjmp	.+4      	; 0xe5e <DIO_voidSetPinValue+0x7e>
     e5a:	88 0f       	add	r24, r24
     e5c:	99 1f       	adc	r25, r25
     e5e:	0a 94       	dec	r0
     e60:	e2 f7       	brpl	.-8      	; 0xe5a <DIO_voidSetPinValue+0x7a>
     e62:	84 2b       	or	r24, r20
     e64:	8c 93       	st	X, r24
     e66:	b3 c0       	rjmp	.+358    	; 0xfce <DIO_voidSetPinValue+0x1ee>
			case 1 : SET_BIT(PORTB,copy_u8pin); break; 
     e68:	a8 e3       	ldi	r26, 0x38	; 56
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e8 e3       	ldi	r30, 0x38	; 56
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	48 2f       	mov	r20, r24
     e74:	8a 81       	ldd	r24, Y+2	; 0x02
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	02 2e       	mov	r0, r18
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <DIO_voidSetPinValue+0xa6>
     e82:	88 0f       	add	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	0a 94       	dec	r0
     e88:	e2 f7       	brpl	.-8      	; 0xe82 <DIO_voidSetPinValue+0xa2>
     e8a:	84 2b       	or	r24, r20
     e8c:	8c 93       	st	X, r24
     e8e:	9f c0       	rjmp	.+318    	; 0xfce <DIO_voidSetPinValue+0x1ee>
			case 2 : SET_BIT(PORTC,copy_u8pin); break; 
     e90:	a5 e3       	ldi	r26, 0x35	; 53
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e5 e3       	ldi	r30, 0x35	; 53
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	48 2f       	mov	r20, r24
     e9c:	8a 81       	ldd	r24, Y+2	; 0x02
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	02 2e       	mov	r0, r18
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <DIO_voidSetPinValue+0xce>
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	0a 94       	dec	r0
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <DIO_voidSetPinValue+0xca>
     eb2:	84 2b       	or	r24, r20
     eb4:	8c 93       	st	X, r24
     eb6:	8b c0       	rjmp	.+278    	; 0xfce <DIO_voidSetPinValue+0x1ee>
			case 3 : SET_BIT(PORTD,copy_u8pin); break; 
     eb8:	a2 e3       	ldi	r26, 0x32	; 50
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e2 e3       	ldi	r30, 0x32	; 50
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	48 2f       	mov	r20, r24
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	02 2e       	mov	r0, r18
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <DIO_voidSetPinValue+0xf6>
     ed2:	88 0f       	add	r24, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	0a 94       	dec	r0
     ed8:	e2 f7       	brpl	.-8      	; 0xed2 <DIO_voidSetPinValue+0xf2>
     eda:	84 2b       	or	r24, r20
     edc:	8c 93       	st	X, r24
     ede:	77 c0       	rjmp	.+238    	; 0xfce <DIO_voidSetPinValue+0x1ee>
		}
		
	}
	else if(copy_u8Value == 0)
     ee0:	8b 81       	ldd	r24, Y+3	; 0x03
     ee2:	88 23       	and	r24, r24
     ee4:	09 f0       	breq	.+2      	; 0xee8 <DIO_voidSetPinValue+0x108>
     ee6:	73 c0       	rjmp	.+230    	; 0xfce <DIO_voidSetPinValue+0x1ee>
	{
		switch(copy_u8port)
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
     eea:	28 2f       	mov	r18, r24
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	3d 83       	std	Y+5, r19	; 0x05
     ef0:	2c 83       	std	Y+4, r18	; 0x04
     ef2:	8c 81       	ldd	r24, Y+4	; 0x04
     ef4:	9d 81       	ldd	r25, Y+5	; 0x05
     ef6:	81 30       	cpi	r24, 0x01	; 1
     ef8:	91 05       	cpc	r25, r1
     efa:	59 f1       	breq	.+86     	; 0xf52 <DIO_voidSetPinValue+0x172>
     efc:	2c 81       	ldd	r18, Y+4	; 0x04
     efe:	3d 81       	ldd	r19, Y+5	; 0x05
     f00:	22 30       	cpi	r18, 0x02	; 2
     f02:	31 05       	cpc	r19, r1
     f04:	2c f4       	brge	.+10     	; 0xf10 <DIO_voidSetPinValue+0x130>
     f06:	8c 81       	ldd	r24, Y+4	; 0x04
     f08:	9d 81       	ldd	r25, Y+5	; 0x05
     f0a:	00 97       	sbiw	r24, 0x00	; 0
     f0c:	69 f0       	breq	.+26     	; 0xf28 <DIO_voidSetPinValue+0x148>
     f0e:	5f c0       	rjmp	.+190    	; 0xfce <DIO_voidSetPinValue+0x1ee>
     f10:	2c 81       	ldd	r18, Y+4	; 0x04
     f12:	3d 81       	ldd	r19, Y+5	; 0x05
     f14:	22 30       	cpi	r18, 0x02	; 2
     f16:	31 05       	cpc	r19, r1
     f18:	89 f1       	breq	.+98     	; 0xf7c <DIO_voidSetPinValue+0x19c>
     f1a:	8c 81       	ldd	r24, Y+4	; 0x04
     f1c:	9d 81       	ldd	r25, Y+5	; 0x05
     f1e:	83 30       	cpi	r24, 0x03	; 3
     f20:	91 05       	cpc	r25, r1
     f22:	09 f4       	brne	.+2      	; 0xf26 <DIO_voidSetPinValue+0x146>
     f24:	40 c0       	rjmp	.+128    	; 0xfa6 <DIO_voidSetPinValue+0x1c6>
     f26:	53 c0       	rjmp	.+166    	; 0xfce <DIO_voidSetPinValue+0x1ee>
		{
			case 0 : CLR_BIT(PORTA,copy_u8pin); break; 
     f28:	ab e3       	ldi	r26, 0x3B	; 59
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	eb e3       	ldi	r30, 0x3B	; 59
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	48 2f       	mov	r20, r24
     f34:	8a 81       	ldd	r24, Y+2	; 0x02
     f36:	28 2f       	mov	r18, r24
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	02 2e       	mov	r0, r18
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <DIO_voidSetPinValue+0x166>
     f42:	88 0f       	add	r24, r24
     f44:	99 1f       	adc	r25, r25
     f46:	0a 94       	dec	r0
     f48:	e2 f7       	brpl	.-8      	; 0xf42 <DIO_voidSetPinValue+0x162>
     f4a:	80 95       	com	r24
     f4c:	84 23       	and	r24, r20
     f4e:	8c 93       	st	X, r24
     f50:	3e c0       	rjmp	.+124    	; 0xfce <DIO_voidSetPinValue+0x1ee>
			case 1 : CLR_BIT(PORTB,copy_u8pin); break; 
     f52:	a8 e3       	ldi	r26, 0x38	; 56
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	e8 e3       	ldi	r30, 0x38	; 56
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	48 2f       	mov	r20, r24
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	28 2f       	mov	r18, r24
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	02 2e       	mov	r0, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <DIO_voidSetPinValue+0x190>
     f6c:	88 0f       	add	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	0a 94       	dec	r0
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <DIO_voidSetPinValue+0x18c>
     f74:	80 95       	com	r24
     f76:	84 23       	and	r24, r20
     f78:	8c 93       	st	X, r24
     f7a:	29 c0       	rjmp	.+82     	; 0xfce <DIO_voidSetPinValue+0x1ee>
			case 2 : CLR_BIT(PORTC,copy_u8pin); break; 
     f7c:	a5 e3       	ldi	r26, 0x35	; 53
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e5 e3       	ldi	r30, 0x35	; 53
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	48 2f       	mov	r20, r24
     f88:	8a 81       	ldd	r24, Y+2	; 0x02
     f8a:	28 2f       	mov	r18, r24
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	02 2e       	mov	r0, r18
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <DIO_voidSetPinValue+0x1ba>
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	0a 94       	dec	r0
     f9c:	e2 f7       	brpl	.-8      	; 0xf96 <DIO_voidSetPinValue+0x1b6>
     f9e:	80 95       	com	r24
     fa0:	84 23       	and	r24, r20
     fa2:	8c 93       	st	X, r24
     fa4:	14 c0       	rjmp	.+40     	; 0xfce <DIO_voidSetPinValue+0x1ee>
			case 3 : CLR_BIT(PORTD,copy_u8pin); break; 
     fa6:	a2 e3       	ldi	r26, 0x32	; 50
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e2 e3       	ldi	r30, 0x32	; 50
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	48 2f       	mov	r20, r24
     fb2:	8a 81       	ldd	r24, Y+2	; 0x02
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	02 2e       	mov	r0, r18
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <DIO_voidSetPinValue+0x1e4>
     fc0:	88 0f       	add	r24, r24
     fc2:	99 1f       	adc	r25, r25
     fc4:	0a 94       	dec	r0
     fc6:	e2 f7       	brpl	.-8      	; 0xfc0 <DIO_voidSetPinValue+0x1e0>
     fc8:	80 95       	com	r24
     fca:	84 23       	and	r24, r20
     fcc:	8c 93       	st	X, r24
		}
	}
	
	
}
     fce:	27 96       	adiw	r28, 0x07	; 7
     fd0:	0f b6       	in	r0, 0x3f	; 63
     fd2:	f8 94       	cli
     fd4:	de bf       	out	0x3e, r29	; 62
     fd6:	0f be       	out	0x3f, r0	; 63
     fd8:	cd bf       	out	0x3d, r28	; 61
     fda:	cf 91       	pop	r28
     fdc:	df 91       	pop	r29
     fde:	08 95       	ret

00000fe0 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 copy_u8port, u8 copy_u8pin)
{
     fe0:	df 93       	push	r29
     fe2:	cf 93       	push	r28
     fe4:	00 d0       	rcall	.+0      	; 0xfe6 <DIO_u8GetPinValue+0x6>
     fe6:	00 d0       	rcall	.+0      	; 0xfe8 <DIO_u8GetPinValue+0x8>
     fe8:	00 d0       	rcall	.+0      	; 0xfea <DIO_u8GetPinValue+0xa>
     fea:	cd b7       	in	r28, 0x3d	; 61
     fec:	de b7       	in	r29, 0x3e	; 62
     fee:	89 83       	std	Y+1, r24	; 0x01
     ff0:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8port)
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	3d 83       	std	Y+5, r19	; 0x05
     ffa:	2c 83       	std	Y+4, r18	; 0x04
     ffc:	4c 81       	ldd	r20, Y+4	; 0x04
     ffe:	5d 81       	ldd	r21, Y+5	; 0x05
    1000:	41 30       	cpi	r20, 0x01	; 1
    1002:	51 05       	cpc	r21, r1
    1004:	49 f1       	breq	.+82     	; 0x1058 <DIO_u8GetPinValue+0x78>
    1006:	8c 81       	ldd	r24, Y+4	; 0x04
    1008:	9d 81       	ldd	r25, Y+5	; 0x05
    100a:	82 30       	cpi	r24, 0x02	; 2
    100c:	91 05       	cpc	r25, r1
    100e:	34 f4       	brge	.+12     	; 0x101c <DIO_u8GetPinValue+0x3c>
    1010:	2c 81       	ldd	r18, Y+4	; 0x04
    1012:	3d 81       	ldd	r19, Y+5	; 0x05
    1014:	21 15       	cp	r18, r1
    1016:	31 05       	cpc	r19, r1
    1018:	61 f0       	breq	.+24     	; 0x1032 <DIO_u8GetPinValue+0x52>
    101a:	57 c0       	rjmp	.+174    	; 0x10ca <DIO_u8GetPinValue+0xea>
    101c:	4c 81       	ldd	r20, Y+4	; 0x04
    101e:	5d 81       	ldd	r21, Y+5	; 0x05
    1020:	42 30       	cpi	r20, 0x02	; 2
    1022:	51 05       	cpc	r21, r1
    1024:	61 f1       	breq	.+88     	; 0x107e <DIO_u8GetPinValue+0x9e>
    1026:	8c 81       	ldd	r24, Y+4	; 0x04
    1028:	9d 81       	ldd	r25, Y+5	; 0x05
    102a:	83 30       	cpi	r24, 0x03	; 3
    102c:	91 05       	cpc	r25, r1
    102e:	d1 f1       	breq	.+116    	; 0x10a4 <DIO_u8GetPinValue+0xc4>
    1030:	4c c0       	rjmp	.+152    	; 0x10ca <DIO_u8GetPinValue+0xea>
	{   
		case 0 : return GET_BIT(PINA,copy_u8pin); break; 
    1032:	e9 e3       	ldi	r30, 0x39	; 57
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	28 2f       	mov	r18, r24
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	88 2f       	mov	r24, r24
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	a9 01       	movw	r20, r18
    1044:	02 c0       	rjmp	.+4      	; 0x104a <DIO_u8GetPinValue+0x6a>
    1046:	55 95       	asr	r21
    1048:	47 95       	ror	r20
    104a:	8a 95       	dec	r24
    104c:	e2 f7       	brpl	.-8      	; 0x1046 <DIO_u8GetPinValue+0x66>
    104e:	ca 01       	movw	r24, r20
    1050:	58 2f       	mov	r21, r24
    1052:	51 70       	andi	r21, 0x01	; 1
    1054:	5b 83       	std	Y+3, r21	; 0x03
    1056:	3a c0       	rjmp	.+116    	; 0x10cc <DIO_u8GetPinValue+0xec>
		case 1 : return GET_BIT(PINB,copy_u8pin); break; 
    1058:	e6 e3       	ldi	r30, 0x36	; 54
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
    1064:	88 2f       	mov	r24, r24
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	a9 01       	movw	r20, r18
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <DIO_u8GetPinValue+0x90>
    106c:	55 95       	asr	r21
    106e:	47 95       	ror	r20
    1070:	8a 95       	dec	r24
    1072:	e2 f7       	brpl	.-8      	; 0x106c <DIO_u8GetPinValue+0x8c>
    1074:	ca 01       	movw	r24, r20
    1076:	58 2f       	mov	r21, r24
    1078:	51 70       	andi	r21, 0x01	; 1
    107a:	5b 83       	std	Y+3, r21	; 0x03
    107c:	27 c0       	rjmp	.+78     	; 0x10cc <DIO_u8GetPinValue+0xec>
		case 2 : return GET_BIT(PINC,copy_u8pin); break; 
    107e:	e3 e3       	ldi	r30, 0x33	; 51
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	88 2f       	mov	r24, r24
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	a9 01       	movw	r20, r18
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <DIO_u8GetPinValue+0xb6>
    1092:	55 95       	asr	r21
    1094:	47 95       	ror	r20
    1096:	8a 95       	dec	r24
    1098:	e2 f7       	brpl	.-8      	; 0x1092 <DIO_u8GetPinValue+0xb2>
    109a:	ca 01       	movw	r24, r20
    109c:	58 2f       	mov	r21, r24
    109e:	51 70       	andi	r21, 0x01	; 1
    10a0:	5b 83       	std	Y+3, r21	; 0x03
    10a2:	14 c0       	rjmp	.+40     	; 0x10cc <DIO_u8GetPinValue+0xec>
		case 3 : return GET_BIT(PIND,copy_u8pin); break; 
    10a4:	e0 e3       	ldi	r30, 0x30	; 48
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	8a 81       	ldd	r24, Y+2	; 0x02
    10b0:	88 2f       	mov	r24, r24
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	a9 01       	movw	r20, r18
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <DIO_u8GetPinValue+0xdc>
    10b8:	55 95       	asr	r21
    10ba:	47 95       	ror	r20
    10bc:	8a 95       	dec	r24
    10be:	e2 f7       	brpl	.-8      	; 0x10b8 <DIO_u8GetPinValue+0xd8>
    10c0:	ca 01       	movw	r24, r20
    10c2:	58 2f       	mov	r21, r24
    10c4:	51 70       	andi	r21, 0x01	; 1
    10c6:	5b 83       	std	Y+3, r21	; 0x03
    10c8:	01 c0       	rjmp	.+2      	; 0x10cc <DIO_u8GetPinValue+0xec>
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <DIO_u8GetPinValue+0xf0>
	}
	
}
    10cc:	8b 81       	ldd	r24, Y+3	; 0x03
    10ce:	8e 83       	std	Y+6, r24	; 0x06
    10d0:	8e 81       	ldd	r24, Y+6	; 0x06
    10d2:	26 96       	adiw	r28, 0x06	; 6
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	f8 94       	cli
    10d8:	de bf       	out	0x3e, r29	; 62
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	cd bf       	out	0x3d, r28	; 61
    10de:	cf 91       	pop	r28
    10e0:	df 91       	pop	r29
    10e2:	08 95       	ret

000010e4 <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection(u8 copy_u8port, u8 copy_u8Direction) 
{
    10e4:	df 93       	push	r29
    10e6:	cf 93       	push	r28
    10e8:	00 d0       	rcall	.+0      	; 0x10ea <DIO_voidSetPortDirection+0x6>
    10ea:	00 d0       	rcall	.+0      	; 0x10ec <DIO_voidSetPortDirection+0x8>
    10ec:	cd b7       	in	r28, 0x3d	; 61
    10ee:	de b7       	in	r29, 0x3e	; 62
    10f0:	89 83       	std	Y+1, r24	; 0x01
    10f2:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8port)
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	3c 83       	std	Y+4, r19	; 0x04
    10fc:	2b 83       	std	Y+3, r18	; 0x03
    10fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1100:	9c 81       	ldd	r25, Y+4	; 0x04
    1102:	81 30       	cpi	r24, 0x01	; 1
    1104:	91 05       	cpc	r25, r1
    1106:	d1 f0       	breq	.+52     	; 0x113c <DIO_voidSetPortDirection+0x58>
    1108:	2b 81       	ldd	r18, Y+3	; 0x03
    110a:	3c 81       	ldd	r19, Y+4	; 0x04
    110c:	22 30       	cpi	r18, 0x02	; 2
    110e:	31 05       	cpc	r19, r1
    1110:	2c f4       	brge	.+10     	; 0x111c <DIO_voidSetPortDirection+0x38>
    1112:	8b 81       	ldd	r24, Y+3	; 0x03
    1114:	9c 81       	ldd	r25, Y+4	; 0x04
    1116:	00 97       	sbiw	r24, 0x00	; 0
    1118:	61 f0       	breq	.+24     	; 0x1132 <DIO_voidSetPortDirection+0x4e>
    111a:	1e c0       	rjmp	.+60     	; 0x1158 <DIO_voidSetPortDirection+0x74>
    111c:	2b 81       	ldd	r18, Y+3	; 0x03
    111e:	3c 81       	ldd	r19, Y+4	; 0x04
    1120:	22 30       	cpi	r18, 0x02	; 2
    1122:	31 05       	cpc	r19, r1
    1124:	81 f0       	breq	.+32     	; 0x1146 <DIO_voidSetPortDirection+0x62>
    1126:	8b 81       	ldd	r24, Y+3	; 0x03
    1128:	9c 81       	ldd	r25, Y+4	; 0x04
    112a:	83 30       	cpi	r24, 0x03	; 3
    112c:	91 05       	cpc	r25, r1
    112e:	81 f0       	breq	.+32     	; 0x1150 <DIO_voidSetPortDirection+0x6c>
    1130:	13 c0       	rjmp	.+38     	; 0x1158 <DIO_voidSetPortDirection+0x74>
	{
		case 0 : DDRA = copy_u8Direction; break;
    1132:	ea e3       	ldi	r30, 0x3A	; 58
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	8a 81       	ldd	r24, Y+2	; 0x02
    1138:	80 83       	st	Z, r24
    113a:	0e c0       	rjmp	.+28     	; 0x1158 <DIO_voidSetPortDirection+0x74>
		case 1 : DDRB = copy_u8Direction; break;
    113c:	e7 e3       	ldi	r30, 0x37	; 55
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	80 83       	st	Z, r24
    1144:	09 c0       	rjmp	.+18     	; 0x1158 <DIO_voidSetPortDirection+0x74>
		case 2 : DDRC = copy_u8Direction; break;
    1146:	e4 e3       	ldi	r30, 0x34	; 52
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	8a 81       	ldd	r24, Y+2	; 0x02
    114c:	80 83       	st	Z, r24
    114e:	04 c0       	rjmp	.+8      	; 0x1158 <DIO_voidSetPortDirection+0x74>
		case 3 : DDRD = copy_u8Direction; break;
    1150:	e1 e3       	ldi	r30, 0x31	; 49
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	8a 81       	ldd	r24, Y+2	; 0x02
    1156:	80 83       	st	Z, r24
	}
	
}
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	0f 90       	pop	r0
    115e:	0f 90       	pop	r0
    1160:	cf 91       	pop	r28
    1162:	df 91       	pop	r29
    1164:	08 95       	ret

00001166 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 copy_u8port, u8 copy_u8Value)
{
    1166:	df 93       	push	r29
    1168:	cf 93       	push	r28
    116a:	00 d0       	rcall	.+0      	; 0x116c <DIO_voidSetPortValue+0x6>
    116c:	00 d0       	rcall	.+0      	; 0x116e <DIO_voidSetPortValue+0x8>
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
    1172:	89 83       	std	Y+1, r24	; 0x01
    1174:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8port)
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	3c 83       	std	Y+4, r19	; 0x04
    117e:	2b 83       	std	Y+3, r18	; 0x03
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	81 30       	cpi	r24, 0x01	; 1
    1186:	91 05       	cpc	r25, r1
    1188:	d1 f0       	breq	.+52     	; 0x11be <DIO_voidSetPortValue+0x58>
    118a:	2b 81       	ldd	r18, Y+3	; 0x03
    118c:	3c 81       	ldd	r19, Y+4	; 0x04
    118e:	22 30       	cpi	r18, 0x02	; 2
    1190:	31 05       	cpc	r19, r1
    1192:	2c f4       	brge	.+10     	; 0x119e <DIO_voidSetPortValue+0x38>
    1194:	8b 81       	ldd	r24, Y+3	; 0x03
    1196:	9c 81       	ldd	r25, Y+4	; 0x04
    1198:	00 97       	sbiw	r24, 0x00	; 0
    119a:	61 f0       	breq	.+24     	; 0x11b4 <DIO_voidSetPortValue+0x4e>
    119c:	1e c0       	rjmp	.+60     	; 0x11da <DIO_voidSetPortValue+0x74>
    119e:	2b 81       	ldd	r18, Y+3	; 0x03
    11a0:	3c 81       	ldd	r19, Y+4	; 0x04
    11a2:	22 30       	cpi	r18, 0x02	; 2
    11a4:	31 05       	cpc	r19, r1
    11a6:	81 f0       	breq	.+32     	; 0x11c8 <DIO_voidSetPortValue+0x62>
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	9c 81       	ldd	r25, Y+4	; 0x04
    11ac:	83 30       	cpi	r24, 0x03	; 3
    11ae:	91 05       	cpc	r25, r1
    11b0:	81 f0       	breq	.+32     	; 0x11d2 <DIO_voidSetPortValue+0x6c>
    11b2:	13 c0       	rjmp	.+38     	; 0x11da <DIO_voidSetPortValue+0x74>
	{
		case 0 : PORTA = copy_u8Value; break;
    11b4:	eb e3       	ldi	r30, 0x3B	; 59
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	80 83       	st	Z, r24
    11bc:	0e c0       	rjmp	.+28     	; 0x11da <DIO_voidSetPortValue+0x74>
		case 1 : PORTB = copy_u8Value; break;
    11be:	e8 e3       	ldi	r30, 0x38	; 56
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	8a 81       	ldd	r24, Y+2	; 0x02
    11c4:	80 83       	st	Z, r24
    11c6:	09 c0       	rjmp	.+18     	; 0x11da <DIO_voidSetPortValue+0x74>
		case 2 : PORTC = copy_u8Value; break;
    11c8:	e5 e3       	ldi	r30, 0x35	; 53
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	8a 81       	ldd	r24, Y+2	; 0x02
    11ce:	80 83       	st	Z, r24
    11d0:	04 c0       	rjmp	.+8      	; 0x11da <DIO_voidSetPortValue+0x74>
		case 3 : PORTD = copy_u8Value; break;
    11d2:	e2 e3       	ldi	r30, 0x32	; 50
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	80 83       	st	Z, r24
	}
}
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	cf 91       	pop	r28
    11e4:	df 91       	pop	r29
    11e6:	08 95       	ret

000011e8 <DIO_voidTogglePinValue>:

void DIO_voidTogglePinValue(u8 copy_u8port,u8 copy_u8Pin)
{
    11e8:	df 93       	push	r29
    11ea:	cf 93       	push	r28
    11ec:	00 d0       	rcall	.+0      	; 0x11ee <DIO_voidTogglePinValue+0x6>
    11ee:	00 d0       	rcall	.+0      	; 0x11f0 <DIO_voidTogglePinValue+0x8>
    11f0:	cd b7       	in	r28, 0x3d	; 61
    11f2:	de b7       	in	r29, 0x3e	; 62
    11f4:	89 83       	std	Y+1, r24	; 0x01
    11f6:	6a 83       	std	Y+2, r22	; 0x02
	
	switch(copy_u8port)
    11f8:	89 81       	ldd	r24, Y+1	; 0x01
    11fa:	28 2f       	mov	r18, r24
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	3c 83       	std	Y+4, r19	; 0x04
    1200:	2b 83       	std	Y+3, r18	; 0x03
    1202:	8b 81       	ldd	r24, Y+3	; 0x03
    1204:	9c 81       	ldd	r25, Y+4	; 0x04
    1206:	81 30       	cpi	r24, 0x01	; 1
    1208:	91 05       	cpc	r25, r1
    120a:	49 f1       	breq	.+82     	; 0x125e <DIO_voidTogglePinValue+0x76>
    120c:	2b 81       	ldd	r18, Y+3	; 0x03
    120e:	3c 81       	ldd	r19, Y+4	; 0x04
    1210:	22 30       	cpi	r18, 0x02	; 2
    1212:	31 05       	cpc	r19, r1
    1214:	2c f4       	brge	.+10     	; 0x1220 <DIO_voidTogglePinValue+0x38>
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	9c 81       	ldd	r25, Y+4	; 0x04
    121a:	00 97       	sbiw	r24, 0x00	; 0
    121c:	61 f0       	breq	.+24     	; 0x1236 <DIO_voidTogglePinValue+0x4e>
    121e:	5a c0       	rjmp	.+180    	; 0x12d4 <DIO_voidTogglePinValue+0xec>
    1220:	2b 81       	ldd	r18, Y+3	; 0x03
    1222:	3c 81       	ldd	r19, Y+4	; 0x04
    1224:	22 30       	cpi	r18, 0x02	; 2
    1226:	31 05       	cpc	r19, r1
    1228:	71 f1       	breq	.+92     	; 0x1286 <DIO_voidTogglePinValue+0x9e>
    122a:	8b 81       	ldd	r24, Y+3	; 0x03
    122c:	9c 81       	ldd	r25, Y+4	; 0x04
    122e:	83 30       	cpi	r24, 0x03	; 3
    1230:	91 05       	cpc	r25, r1
    1232:	e9 f1       	breq	.+122    	; 0x12ae <DIO_voidTogglePinValue+0xc6>
    1234:	4f c0       	rjmp	.+158    	; 0x12d4 <DIO_voidTogglePinValue+0xec>
	{   
		case 0 :  TOG_BIT(PORTA,copy_u8Pin); break;
    1236:	ab e3       	ldi	r26, 0x3B	; 59
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	eb e3       	ldi	r30, 0x3B	; 59
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	48 2f       	mov	r20, r24
    1242:	8a 81       	ldd	r24, Y+2	; 0x02
    1244:	28 2f       	mov	r18, r24
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	02 2e       	mov	r0, r18
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <DIO_voidTogglePinValue+0x6c>
    1250:	88 0f       	add	r24, r24
    1252:	99 1f       	adc	r25, r25
    1254:	0a 94       	dec	r0
    1256:	e2 f7       	brpl	.-8      	; 0x1250 <DIO_voidTogglePinValue+0x68>
    1258:	84 27       	eor	r24, r20
    125a:	8c 93       	st	X, r24
    125c:	3b c0       	rjmp	.+118    	; 0x12d4 <DIO_voidTogglePinValue+0xec>
		case 1 :  TOG_BIT(PORTB,copy_u8Pin); break;
    125e:	a8 e3       	ldi	r26, 0x38	; 56
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	e8 e3       	ldi	r30, 0x38	; 56
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	48 2f       	mov	r20, r24
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	02 2e       	mov	r0, r18
    1276:	02 c0       	rjmp	.+4      	; 0x127c <DIO_voidTogglePinValue+0x94>
    1278:	88 0f       	add	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	0a 94       	dec	r0
    127e:	e2 f7       	brpl	.-8      	; 0x1278 <DIO_voidTogglePinValue+0x90>
    1280:	84 27       	eor	r24, r20
    1282:	8c 93       	st	X, r24
    1284:	27 c0       	rjmp	.+78     	; 0x12d4 <DIO_voidTogglePinValue+0xec>
		case 2 :  TOG_BIT(PORTC,copy_u8Pin); break;
    1286:	a5 e3       	ldi	r26, 0x35	; 53
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e5 e3       	ldi	r30, 0x35	; 53
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	48 2f       	mov	r20, r24
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	28 2f       	mov	r18, r24
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	02 2e       	mov	r0, r18
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <DIO_voidTogglePinValue+0xbc>
    12a0:	88 0f       	add	r24, r24
    12a2:	99 1f       	adc	r25, r25
    12a4:	0a 94       	dec	r0
    12a6:	e2 f7       	brpl	.-8      	; 0x12a0 <DIO_voidTogglePinValue+0xb8>
    12a8:	84 27       	eor	r24, r20
    12aa:	8c 93       	st	X, r24
    12ac:	13 c0       	rjmp	.+38     	; 0x12d4 <DIO_voidTogglePinValue+0xec>
		case 3 :  TOG_BIT(PORTD,copy_u8Pin); break;
    12ae:	a2 e3       	ldi	r26, 0x32	; 50
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	e2 e3       	ldi	r30, 0x32	; 50
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	48 2f       	mov	r20, r24
    12ba:	8a 81       	ldd	r24, Y+2	; 0x02
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	02 2e       	mov	r0, r18
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <DIO_voidTogglePinValue+0xe4>
    12c8:	88 0f       	add	r24, r24
    12ca:	99 1f       	adc	r25, r25
    12cc:	0a 94       	dec	r0
    12ce:	e2 f7       	brpl	.-8      	; 0x12c8 <DIO_voidTogglePinValue+0xe0>
    12d0:	84 27       	eor	r24, r20
    12d2:	8c 93       	st	X, r24
	}
}
    12d4:	0f 90       	pop	r0
    12d6:	0f 90       	pop	r0
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	cf 91       	pop	r28
    12de:	df 91       	pop	r29
    12e0:	08 95       	ret

000012e2 <EEPROM_VidWriteDataByte>:
#include "EEPROM.h"



void EEPROM_VidWriteDataByte(u16 Copy_u16ByteAddress, u8 Copy_u8ByteData)
{
    12e2:	df 93       	push	r29
    12e4:	cf 93       	push	r28
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
    12ea:	61 97       	sbiw	r28, 0x11	; 17
    12ec:	0f b6       	in	r0, 0x3f	; 63
    12ee:	f8 94       	cli
    12f0:	de bf       	out	0x3e, r29	; 62
    12f2:	0f be       	out	0x3f, r0	; 63
    12f4:	cd bf       	out	0x3d, r28	; 61
    12f6:	98 8b       	std	Y+16, r25	; 0x10
    12f8:	8f 87       	std	Y+15, r24	; 0x0f
    12fa:	69 8b       	std	Y+17, r22	; 0x11
	/* START CONDITION */
	TWI_VidStartCondition();
    12fc:	0e 94 4d 10 	call	0x209a	; 0x209a <TWI_VidStartCondition>
    /* ADDRESS WITH WRITE */
	TWI_VidSlaveAddWrite(Init_Address | (A2_PIN<<2) | (Copy_u16ByteAddress >> 8));
    1300:	8f 85       	ldd	r24, Y+15	; 0x0f
    1302:	98 89       	ldd	r25, Y+16	; 0x10
    1304:	89 2f       	mov	r24, r25
    1306:	99 27       	eor	r25, r25
    1308:	80 65       	ori	r24, 0x50	; 80
    130a:	0e 94 96 10 	call	0x212c	; 0x212c <TWI_VidSlaveAddWrite>
    /* ADDRESS BYTE */
	TWI_VidMasterSendData((u8)Copy_u16ByteAddress);
    130e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1310:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <TWI_VidMasterSendData>
    /* DATA BYTE */
	TWI_VidMasterSendData(Copy_u8ByteData);
    1314:	89 89       	ldd	r24, Y+17	; 0x11
    1316:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <TWI_VidMasterSendData>
    /* STOP CONDITION */
	TWI_VidStopCondition();
    131a:	0e 94 81 10 	call	0x2102	; 0x2102 <TWI_VidStopCondition>
    131e:	80 e0       	ldi	r24, 0x00	; 0
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	a0 e2       	ldi	r26, 0x20	; 32
    1324:	b1 e4       	ldi	r27, 0x41	; 65
    1326:	8b 87       	std	Y+11, r24	; 0x0b
    1328:	9c 87       	std	Y+12, r25	; 0x0c
    132a:	ad 87       	std	Y+13, r26	; 0x0d
    132c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    132e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1330:	7c 85       	ldd	r23, Y+12	; 0x0c
    1332:	8d 85       	ldd	r24, Y+13	; 0x0d
    1334:	9e 85       	ldd	r25, Y+14	; 0x0e
    1336:	20 e0       	ldi	r18, 0x00	; 0
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	4a ef       	ldi	r20, 0xFA	; 250
    133c:	54 e4       	ldi	r21, 0x44	; 68
    133e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1342:	dc 01       	movw	r26, r24
    1344:	cb 01       	movw	r24, r22
    1346:	8f 83       	std	Y+7, r24	; 0x07
    1348:	98 87       	std	Y+8, r25	; 0x08
    134a:	a9 87       	std	Y+9, r26	; 0x09
    134c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    134e:	6f 81       	ldd	r22, Y+7	; 0x07
    1350:	78 85       	ldd	r23, Y+8	; 0x08
    1352:	89 85       	ldd	r24, Y+9	; 0x09
    1354:	9a 85       	ldd	r25, Y+10	; 0x0a
    1356:	20 e0       	ldi	r18, 0x00	; 0
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	40 e8       	ldi	r20, 0x80	; 128
    135c:	5f e3       	ldi	r21, 0x3F	; 63
    135e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1362:	88 23       	and	r24, r24
    1364:	2c f4       	brge	.+10     	; 0x1370 <EEPROM_VidWriteDataByte+0x8e>
		__ticks = 1;
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	9e 83       	std	Y+6, r25	; 0x06
    136c:	8d 83       	std	Y+5, r24	; 0x05
    136e:	3f c0       	rjmp	.+126    	; 0x13ee <EEPROM_VidWriteDataByte+0x10c>
	else if (__tmp > 65535)
    1370:	6f 81       	ldd	r22, Y+7	; 0x07
    1372:	78 85       	ldd	r23, Y+8	; 0x08
    1374:	89 85       	ldd	r24, Y+9	; 0x09
    1376:	9a 85       	ldd	r25, Y+10	; 0x0a
    1378:	20 e0       	ldi	r18, 0x00	; 0
    137a:	3f ef       	ldi	r19, 0xFF	; 255
    137c:	4f e7       	ldi	r20, 0x7F	; 127
    137e:	57 e4       	ldi	r21, 0x47	; 71
    1380:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1384:	18 16       	cp	r1, r24
    1386:	4c f5       	brge	.+82     	; 0x13da <EEPROM_VidWriteDataByte+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1388:	6b 85       	ldd	r22, Y+11	; 0x0b
    138a:	7c 85       	ldd	r23, Y+12	; 0x0c
    138c:	8d 85       	ldd	r24, Y+13	; 0x0d
    138e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1390:	20 e0       	ldi	r18, 0x00	; 0
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	40 e2       	ldi	r20, 0x20	; 32
    1396:	51 e4       	ldi	r21, 0x41	; 65
    1398:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    139c:	dc 01       	movw	r26, r24
    139e:	cb 01       	movw	r24, r22
    13a0:	bc 01       	movw	r22, r24
    13a2:	cd 01       	movw	r24, r26
    13a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13a8:	dc 01       	movw	r26, r24
    13aa:	cb 01       	movw	r24, r22
    13ac:	9e 83       	std	Y+6, r25	; 0x06
    13ae:	8d 83       	std	Y+5, r24	; 0x05
    13b0:	0f c0       	rjmp	.+30     	; 0x13d0 <EEPROM_VidWriteDataByte+0xee>
    13b2:	88 ec       	ldi	r24, 0xC8	; 200
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	9c 83       	std	Y+4, r25	; 0x04
    13b8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13ba:	8b 81       	ldd	r24, Y+3	; 0x03
    13bc:	9c 81       	ldd	r25, Y+4	; 0x04
    13be:	01 97       	sbiw	r24, 0x01	; 1
    13c0:	f1 f7       	brne	.-4      	; 0x13be <EEPROM_VidWriteDataByte+0xdc>
    13c2:	9c 83       	std	Y+4, r25	; 0x04
    13c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13c6:	8d 81       	ldd	r24, Y+5	; 0x05
    13c8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ca:	01 97       	sbiw	r24, 0x01	; 1
    13cc:	9e 83       	std	Y+6, r25	; 0x06
    13ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13d0:	8d 81       	ldd	r24, Y+5	; 0x05
    13d2:	9e 81       	ldd	r25, Y+6	; 0x06
    13d4:	00 97       	sbiw	r24, 0x00	; 0
    13d6:	69 f7       	brne	.-38     	; 0x13b2 <EEPROM_VidWriteDataByte+0xd0>
    13d8:	14 c0       	rjmp	.+40     	; 0x1402 <EEPROM_VidWriteDataByte+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13da:	6f 81       	ldd	r22, Y+7	; 0x07
    13dc:	78 85       	ldd	r23, Y+8	; 0x08
    13de:	89 85       	ldd	r24, Y+9	; 0x09
    13e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e6:	dc 01       	movw	r26, r24
    13e8:	cb 01       	movw	r24, r22
    13ea:	9e 83       	std	Y+6, r25	; 0x06
    13ec:	8d 83       	std	Y+5, r24	; 0x05
    13ee:	8d 81       	ldd	r24, Y+5	; 0x05
    13f0:	9e 81       	ldd	r25, Y+6	; 0x06
    13f2:	9a 83       	std	Y+2, r25	; 0x02
    13f4:	89 83       	std	Y+1, r24	; 0x01
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
    13f8:	9a 81       	ldd	r25, Y+2	; 0x02
    13fa:	01 97       	sbiw	r24, 0x01	; 1
    13fc:	f1 f7       	brne	.-4      	; 0x13fa <EEPROM_VidWriteDataByte+0x118>
    13fe:	9a 83       	std	Y+2, r25	; 0x02
    1400:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(10);
}
    1402:	61 96       	adiw	r28, 0x11	; 17
    1404:	0f b6       	in	r0, 0x3f	; 63
    1406:	f8 94       	cli
    1408:	de bf       	out	0x3e, r29	; 62
    140a:	0f be       	out	0x3f, r0	; 63
    140c:	cd bf       	out	0x3d, r28	; 61
    140e:	cf 91       	pop	r28
    1410:	df 91       	pop	r29
    1412:	08 95       	ret

00001414 <EEPROM_u8ReadDataByte>:



u8 EEPROM_u8ReadDataByte(u16 Copy_u16ByteAddress)
{
    1414:	df 93       	push	r29
    1416:	cf 93       	push	r28
    1418:	00 d0       	rcall	.+0      	; 0x141a <EEPROM_u8ReadDataByte+0x6>
    141a:	0f 92       	push	r0
    141c:	cd b7       	in	r28, 0x3d	; 61
    141e:	de b7       	in	r29, 0x3e	; 62
    1420:	9b 83       	std	Y+3, r25	; 0x03
    1422:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Data;
	TWI_VidStartCondition();
    1424:	0e 94 4d 10 	call	0x209a	; 0x209a <TWI_VidStartCondition>

	TWI_VidSlaveAddWrite(Init_Address|(A2_PIN<<2)|(Copy_u16ByteAddress>>8));
    1428:	8a 81       	ldd	r24, Y+2	; 0x02
    142a:	9b 81       	ldd	r25, Y+3	; 0x03
    142c:	89 2f       	mov	r24, r25
    142e:	99 27       	eor	r25, r25
    1430:	80 65       	ori	r24, 0x50	; 80
    1432:	0e 94 96 10 	call	0x212c	; 0x212c <TWI_VidSlaveAddWrite>

	TWI_VidMasterSendData((u8)Copy_u16ByteAddress);
    1436:	8a 81       	ldd	r24, Y+2	; 0x02
    1438:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <TWI_VidMasterSendData>

	TWI_VidStartCondition();
    143c:	0e 94 4d 10 	call	0x209a	; 0x209a <TWI_VidStartCondition>

	TWI_VidSlaveAddRead(Init_Address|(A2_PIN<<2)|(Copy_u16ByteAddress>>8));
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	9b 81       	ldd	r25, Y+3	; 0x03
    1444:	89 2f       	mov	r24, r25
    1446:	99 27       	eor	r25, r25
    1448:	80 65       	ori	r24, 0x50	; 80
    144a:	0e 94 bf 10 	call	0x217e	; 0x217e <TWI_VidSlaveAddRead>

	Local_u8Data = TWI_u8MasterRecieveData();
    144e:	0e 94 27 11 	call	0x224e	; 0x224e <TWI_u8MasterRecieveData>
    1452:	89 83       	std	Y+1, r24	; 0x01

	TWI_VidStopCondition();
    1454:	0e 94 81 10 	call	0x2102	; 0x2102 <TWI_VidStopCondition>

	return Local_u8Data;
    1458:	89 81       	ldd	r24, Y+1	; 0x01

}
    145a:	0f 90       	pop	r0
    145c:	0f 90       	pop	r0
    145e:	0f 90       	pop	r0
    1460:	cf 91       	pop	r28
    1462:	df 91       	pop	r29
    1464:	08 95       	ret

00001466 <KPD_voidInit>:
u8 KPD_Au8Keys[KPD_ROWS_NUM][KPD_COLUMNS_NUM]  = KPD_KEYS;
u8 KPD_Au8RowsPins[KPD_ROWS_NUM] = {KPD_R1_PIN, KPD_R2_PIN, KPD_R3_PIN, KPD_R4_PIN};
u8 KPD_Au8ColsPins[KPD_COLUMNS_NUM] = {KPD_C1_PIN, KPD_C2_PIN, KPD_C3_PIN, KPD_C4_PIN};

void KPD_voidInit(void)
{
    1466:	df 93       	push	r29
    1468:	cf 93       	push	r28
    146a:	cd b7       	in	r28, 0x3d	; 61
    146c:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDirection(KPD_PORT, 0b00001111);  // ROWS OUT , COLUMNS INPUT
    146e:	80 e0       	ldi	r24, 0x00	; 0
    1470:	6f e0       	ldi	r22, 0x0F	; 15
    1472:	0e 94 72 08 	call	0x10e4	; 0x10e4 <DIO_voidSetPortDirection>
	DIO_voidSetPortValue(KPD_PORT,0xff);
    1476:	80 e0       	ldi	r24, 0x00	; 0
    1478:	6f ef       	ldi	r22, 0xFF	; 255
    147a:	0e 94 b3 08 	call	0x1166	; 0x1166 <DIO_voidSetPortValue>
}
    147e:	cf 91       	pop	r28
    1480:	df 91       	pop	r29
    1482:	08 95       	ret

00001484 <KPD_u8GetKeyValue>:
u8 KPD_u8GetKeyValue(void)
{
    1484:	df 93       	push	r29
    1486:	cf 93       	push	r28
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62
    148c:	63 97       	sbiw	r28, 0x13	; 19
    148e:	0f b6       	in	r0, 0x3f	; 63
    1490:	f8 94       	cli
    1492:	de bf       	out	0x3e, r29	; 62
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8GetPin,Local_u8ReturnedKey;

	/* LOOP FOR ROWS */
	for(Local_u8RowsCounter = 0; Local_u8RowsCounter<=3; Local_u8RowsCounter++)
    1498:	1a 8a       	std	Y+18, r1	; 0x12
    149a:	de c0       	rjmp	.+444    	; 0x1658 <KPD_u8GetKeyValue+0x1d4>
	{
		/* Activate Row */
		DIO_voidSetPinValue(KPD_PORT, KPD_Au8RowsPins[Local_u8RowsCounter],DIO_LOW);
    149c:	8a 89       	ldd	r24, Y+18	; 0x12
    149e:	88 2f       	mov	r24, r24
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	fc 01       	movw	r30, r24
    14a4:	e7 56       	subi	r30, 0x67	; 103
    14a6:	fe 4f       	sbci	r31, 0xFE	; 254
    14a8:	90 81       	ld	r25, Z
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	69 2f       	mov	r22, r25
    14ae:	40 e0       	ldi	r20, 0x00	; 0
    14b0:	0e 94 f0 06 	call	0xde0	; 0xde0 <DIO_voidSetPinValue>
		/* LOOP FOR COLS */
		for(Local_u8ColsCounter = 0; Local_u8ColsCounter<=3; Local_u8ColsCounter++)
    14b4:	19 8a       	std	Y+17, r1	; 0x11
    14b6:	bd c0       	rjmp	.+378    	; 0x1632 <KPD_u8GetKeyValue+0x1ae>
		{
			/* READ CURRENT PIN IN COLUMNS */
			Local_u8GetPin = DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColsPins[Local_u8ColsCounter]);
    14b8:	89 89       	ldd	r24, Y+17	; 0x11
    14ba:	88 2f       	mov	r24, r24
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	fc 01       	movw	r30, r24
    14c0:	e3 56       	subi	r30, 0x63	; 99
    14c2:	fe 4f       	sbci	r31, 0xFE	; 254
    14c4:	80 81       	ld	r24, Z
    14c6:	28 2f       	mov	r18, r24
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	80 e0       	ldi	r24, 0x00	; 0
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	b9 01       	movw	r22, r18
    14d0:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <DIO_u8GetPinValue>
    14d4:	88 8b       	std	Y+16, r24	; 0x10
			if(Local_u8GetPin == DIO_LOW)
    14d6:	88 89       	ldd	r24, Y+16	; 0x10
    14d8:	88 23       	and	r24, r24
    14da:	09 f0       	breq	.+2      	; 0x14de <KPD_u8GetKeyValue+0x5a>
    14dc:	a7 c0       	rjmp	.+334    	; 0x162c <KPD_u8GetKeyValue+0x1a8>
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	a0 ea       	ldi	r26, 0xA0	; 160
    14e4:	b1 e4       	ldi	r27, 0x41	; 65
    14e6:	8b 87       	std	Y+11, r24	; 0x0b
    14e8:	9c 87       	std	Y+12, r25	; 0x0c
    14ea:	ad 87       	std	Y+13, r26	; 0x0d
    14ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    14f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    14f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    14f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    14f6:	20 e0       	ldi	r18, 0x00	; 0
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	4a ef       	ldi	r20, 0xFA	; 250
    14fc:	54 e4       	ldi	r21, 0x44	; 68
    14fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1502:	dc 01       	movw	r26, r24
    1504:	cb 01       	movw	r24, r22
    1506:	8f 83       	std	Y+7, r24	; 0x07
    1508:	98 87       	std	Y+8, r25	; 0x08
    150a:	a9 87       	std	Y+9, r26	; 0x09
    150c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    150e:	6f 81       	ldd	r22, Y+7	; 0x07
    1510:	78 85       	ldd	r23, Y+8	; 0x08
    1512:	89 85       	ldd	r24, Y+9	; 0x09
    1514:	9a 85       	ldd	r25, Y+10	; 0x0a
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	40 e8       	ldi	r20, 0x80	; 128
    151c:	5f e3       	ldi	r21, 0x3F	; 63
    151e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1522:	88 23       	and	r24, r24
    1524:	2c f4       	brge	.+10     	; 0x1530 <KPD_u8GetKeyValue+0xac>
		__ticks = 1;
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	9e 83       	std	Y+6, r25	; 0x06
    152c:	8d 83       	std	Y+5, r24	; 0x05
    152e:	3f c0       	rjmp	.+126    	; 0x15ae <KPD_u8GetKeyValue+0x12a>
	else if (__tmp > 65535)
    1530:	6f 81       	ldd	r22, Y+7	; 0x07
    1532:	78 85       	ldd	r23, Y+8	; 0x08
    1534:	89 85       	ldd	r24, Y+9	; 0x09
    1536:	9a 85       	ldd	r25, Y+10	; 0x0a
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	3f ef       	ldi	r19, 0xFF	; 255
    153c:	4f e7       	ldi	r20, 0x7F	; 127
    153e:	57 e4       	ldi	r21, 0x47	; 71
    1540:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1544:	18 16       	cp	r1, r24
    1546:	4c f5       	brge	.+82     	; 0x159a <KPD_u8GetKeyValue+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1548:	6b 85       	ldd	r22, Y+11	; 0x0b
    154a:	7c 85       	ldd	r23, Y+12	; 0x0c
    154c:	8d 85       	ldd	r24, Y+13	; 0x0d
    154e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1550:	20 e0       	ldi	r18, 0x00	; 0
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	40 e2       	ldi	r20, 0x20	; 32
    1556:	51 e4       	ldi	r21, 0x41	; 65
    1558:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    155c:	dc 01       	movw	r26, r24
    155e:	cb 01       	movw	r24, r22
    1560:	bc 01       	movw	r22, r24
    1562:	cd 01       	movw	r24, r26
    1564:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1568:	dc 01       	movw	r26, r24
    156a:	cb 01       	movw	r24, r22
    156c:	9e 83       	std	Y+6, r25	; 0x06
    156e:	8d 83       	std	Y+5, r24	; 0x05
    1570:	0f c0       	rjmp	.+30     	; 0x1590 <KPD_u8GetKeyValue+0x10c>
    1572:	88 ec       	ldi	r24, 0xC8	; 200
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	9c 83       	std	Y+4, r25	; 0x04
    1578:	8b 83       	std	Y+3, r24	; 0x03
    157a:	8b 81       	ldd	r24, Y+3	; 0x03
    157c:	9c 81       	ldd	r25, Y+4	; 0x04
    157e:	01 97       	sbiw	r24, 0x01	; 1
    1580:	f1 f7       	brne	.-4      	; 0x157e <KPD_u8GetKeyValue+0xfa>
    1582:	9c 83       	std	Y+4, r25	; 0x04
    1584:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1586:	8d 81       	ldd	r24, Y+5	; 0x05
    1588:	9e 81       	ldd	r25, Y+6	; 0x06
    158a:	01 97       	sbiw	r24, 0x01	; 1
    158c:	9e 83       	std	Y+6, r25	; 0x06
    158e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1590:	8d 81       	ldd	r24, Y+5	; 0x05
    1592:	9e 81       	ldd	r25, Y+6	; 0x06
    1594:	00 97       	sbiw	r24, 0x00	; 0
    1596:	69 f7       	brne	.-38     	; 0x1572 <KPD_u8GetKeyValue+0xee>
    1598:	14 c0       	rjmp	.+40     	; 0x15c2 <KPD_u8GetKeyValue+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    159a:	6f 81       	ldd	r22, Y+7	; 0x07
    159c:	78 85       	ldd	r23, Y+8	; 0x08
    159e:	89 85       	ldd	r24, Y+9	; 0x09
    15a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15a6:	dc 01       	movw	r26, r24
    15a8:	cb 01       	movw	r24, r22
    15aa:	9e 83       	std	Y+6, r25	; 0x06
    15ac:	8d 83       	std	Y+5, r24	; 0x05
    15ae:	8d 81       	ldd	r24, Y+5	; 0x05
    15b0:	9e 81       	ldd	r25, Y+6	; 0x06
    15b2:	9a 83       	std	Y+2, r25	; 0x02
    15b4:	89 83       	std	Y+1, r24	; 0x01
    15b6:	89 81       	ldd	r24, Y+1	; 0x01
    15b8:	9a 81       	ldd	r25, Y+2	; 0x02
    15ba:	01 97       	sbiw	r24, 0x01	; 1
    15bc:	f1 f7       	brne	.-4      	; 0x15ba <KPD_u8GetKeyValue+0x136>
    15be:	9a 83       	std	Y+2, r25	; 0x02
    15c0:	89 83       	std	Y+1, r24	; 0x01
			{
				/* Debouncing Problem */
				_delay_ms(20);
				Local_u8GetPin = DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColsPins[Local_u8ColsCounter]);
    15c2:	89 89       	ldd	r24, Y+17	; 0x11
    15c4:	88 2f       	mov	r24, r24
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	fc 01       	movw	r30, r24
    15ca:	e3 56       	subi	r30, 0x63	; 99
    15cc:	fe 4f       	sbci	r31, 0xFE	; 254
    15ce:	80 81       	ld	r24, Z
    15d0:	28 2f       	mov	r18, r24
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	b9 01       	movw	r22, r18
    15da:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <DIO_u8GetPinValue>
    15de:	88 8b       	std	Y+16, r24	; 0x10
    15e0:	0f c0       	rjmp	.+30     	; 0x1600 <KPD_u8GetKeyValue+0x17c>
				while(Local_u8GetPin == DIO_LOW)
				{
					Local_u8GetPin = DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColsPins[Local_u8ColsCounter]);
    15e2:	89 89       	ldd	r24, Y+17	; 0x11
    15e4:	88 2f       	mov	r24, r24
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	fc 01       	movw	r30, r24
    15ea:	e3 56       	subi	r30, 0x63	; 99
    15ec:	fe 4f       	sbci	r31, 0xFE	; 254
    15ee:	80 81       	ld	r24, Z
    15f0:	28 2f       	mov	r18, r24
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	80 e0       	ldi	r24, 0x00	; 0
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	b9 01       	movw	r22, r18
    15fa:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <DIO_u8GetPinValue>
    15fe:	88 8b       	std	Y+16, r24	; 0x10
			if(Local_u8GetPin == DIO_LOW)
			{
				/* Debouncing Problem */
				_delay_ms(20);
				Local_u8GetPin = DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColsPins[Local_u8ColsCounter]);
				while(Local_u8GetPin == DIO_LOW)
    1600:	88 89       	ldd	r24, Y+16	; 0x10
    1602:	88 23       	and	r24, r24
    1604:	71 f3       	breq	.-36     	; 0x15e2 <KPD_u8GetKeyValue+0x15e>
				{
					Local_u8GetPin = DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColsPins[Local_u8ColsCounter]);
				}
				return KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    1606:	8a 89       	ldd	r24, Y+18	; 0x12
    1608:	48 2f       	mov	r20, r24
    160a:	50 e0       	ldi	r21, 0x00	; 0
    160c:	89 89       	ldd	r24, Y+17	; 0x11
    160e:	28 2f       	mov	r18, r24
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	ca 01       	movw	r24, r20
    1614:	88 0f       	add	r24, r24
    1616:	99 1f       	adc	r25, r25
    1618:	88 0f       	add	r24, r24
    161a:	99 1f       	adc	r25, r25
    161c:	82 0f       	add	r24, r18
    161e:	93 1f       	adc	r25, r19
    1620:	fc 01       	movw	r30, r24
    1622:	e7 57       	subi	r30, 0x77	; 119
    1624:	fe 4f       	sbci	r31, 0xFE	; 254
    1626:	80 81       	ld	r24, Z
    1628:	8b 8b       	std	Y+19, r24	; 0x13
    162a:	1c c0       	rjmp	.+56     	; 0x1664 <KPD_u8GetKeyValue+0x1e0>
	for(Local_u8RowsCounter = 0; Local_u8RowsCounter<=3; Local_u8RowsCounter++)
	{
		/* Activate Row */
		DIO_voidSetPinValue(KPD_PORT, KPD_Au8RowsPins[Local_u8RowsCounter],DIO_LOW);
		/* LOOP FOR COLS */
		for(Local_u8ColsCounter = 0; Local_u8ColsCounter<=3; Local_u8ColsCounter++)
    162c:	89 89       	ldd	r24, Y+17	; 0x11
    162e:	8f 5f       	subi	r24, 0xFF	; 255
    1630:	89 8b       	std	Y+17, r24	; 0x11
    1632:	89 89       	ldd	r24, Y+17	; 0x11
    1634:	84 30       	cpi	r24, 0x04	; 4
    1636:	08 f4       	brcc	.+2      	; 0x163a <KPD_u8GetKeyValue+0x1b6>
    1638:	3f cf       	rjmp	.-386    	; 0x14b8 <KPD_u8GetKeyValue+0x34>
				}
				return KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
			}
		}
		/* Deactivate Row */
		DIO_voidSetPinValue(KPD_PORT, KPD_Au8RowsPins[Local_u8RowsCounter],DIO_HIGH);
    163a:	8a 89       	ldd	r24, Y+18	; 0x12
    163c:	88 2f       	mov	r24, r24
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	fc 01       	movw	r30, r24
    1642:	e7 56       	subi	r30, 0x67	; 103
    1644:	fe 4f       	sbci	r31, 0xFE	; 254
    1646:	90 81       	ld	r25, Z
    1648:	80 e0       	ldi	r24, 0x00	; 0
    164a:	69 2f       	mov	r22, r25
    164c:	41 e0       	ldi	r20, 0x01	; 1
    164e:	0e 94 f0 06 	call	0xde0	; 0xde0 <DIO_voidSetPinValue>
u8 KPD_u8GetKeyValue(void)
{
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8GetPin,Local_u8ReturnedKey;

	/* LOOP FOR ROWS */
	for(Local_u8RowsCounter = 0; Local_u8RowsCounter<=3; Local_u8RowsCounter++)
    1652:	8a 89       	ldd	r24, Y+18	; 0x12
    1654:	8f 5f       	subi	r24, 0xFF	; 255
    1656:	8a 8b       	std	Y+18, r24	; 0x12
    1658:	8a 89       	ldd	r24, Y+18	; 0x12
    165a:	84 30       	cpi	r24, 0x04	; 4
    165c:	08 f4       	brcc	.+2      	; 0x1660 <KPD_u8GetKeyValue+0x1dc>
    165e:	1e cf       	rjmp	.-452    	; 0x149c <KPD_u8GetKeyValue+0x18>
		}
		/* Deactivate Row */
		DIO_voidSetPinValue(KPD_PORT, KPD_Au8RowsPins[Local_u8RowsCounter],DIO_HIGH);

	}
	return KPD_KEY_NOT_PRESSED;
    1660:	8f ef       	ldi	r24, 0xFF	; 255
    1662:	8b 8b       	std	Y+19, r24	; 0x13
    1664:	8b 89       	ldd	r24, Y+19	; 0x13
}
    1666:	63 96       	adiw	r28, 0x13	; 19
    1668:	0f b6       	in	r0, 0x3f	; 63
    166a:	f8 94       	cli
    166c:	de bf       	out	0x3e, r29	; 62
    166e:	0f be       	out	0x3f, r0	; 63
    1670:	cd bf       	out	0x3d, r28	; 61
    1672:	cf 91       	pop	r28
    1674:	df 91       	pop	r29
    1676:	08 95       	ret

00001678 <LCD_voidInit>:
#include "LCD_Interface.h"



void LCD_voidInit()
{
    1678:	df 93       	push	r29
    167a:	cf 93       	push	r28
    167c:	cd b7       	in	r28, 0x3d	; 61
    167e:	de b7       	in	r29, 0x3e	; 62
    1680:	e8 97       	sbiw	r28, 0x38	; 56
    1682:	0f b6       	in	r0, 0x3f	; 63
    1684:	f8 94       	cli
    1686:	de bf       	out	0x3e, r29	; 62
    1688:	0f be       	out	0x3f, r0	; 63
    168a:	cd bf       	out	0x3d, r28	; 61
	/* SET DATA PORT OUTPUT */
	DIO_voidSetPortDirection(LCD_DATA_PORT, 0xff);
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	6f ef       	ldi	r22, 0xFF	; 255
    1690:	0e 94 72 08 	call	0x10e4	; 0x10e4 <DIO_voidSetPortDirection>
	
	/* SET PINS OF CONTROL OUTPUT */
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, RS, DIO_OUTPUT);
    1694:	83 e0       	ldi	r24, 0x03	; 3
    1696:	62 e0       	ldi	r22, 0x02	; 2
    1698:	41 e0       	ldi	r20, 0x01	; 1
    169a:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, RW, DIO_OUTPUT);
    169e:	83 e0       	ldi	r24, 0x03	; 3
    16a0:	63 e0       	ldi	r22, 0x03	; 3
    16a2:	41 e0       	ldi	r20, 0x01	; 1
    16a4:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, EN, DIO_OUTPUT);
    16a8:	83 e0       	ldi	r24, 0x03	; 3
    16aa:	64 e0       	ldi	r22, 0x04	; 4
    16ac:	41 e0       	ldi	r20, 0x01	; 1
    16ae:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <DIO_voidSetPinDirection>
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	a0 ef       	ldi	r26, 0xF0	; 240
    16b8:	b1 e4       	ldi	r27, 0x41	; 65
    16ba:	8d ab       	std	Y+53, r24	; 0x35
    16bc:	9e ab       	std	Y+54, r25	; 0x36
    16be:	af ab       	std	Y+55, r26	; 0x37
    16c0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16c2:	6d a9       	ldd	r22, Y+53	; 0x35
    16c4:	7e a9       	ldd	r23, Y+54	; 0x36
    16c6:	8f a9       	ldd	r24, Y+55	; 0x37
    16c8:	98 ad       	ldd	r25, Y+56	; 0x38
    16ca:	20 e0       	ldi	r18, 0x00	; 0
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	4a ef       	ldi	r20, 0xFA	; 250
    16d0:	54 e4       	ldi	r21, 0x44	; 68
    16d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d6:	dc 01       	movw	r26, r24
    16d8:	cb 01       	movw	r24, r22
    16da:	89 ab       	std	Y+49, r24	; 0x31
    16dc:	9a ab       	std	Y+50, r25	; 0x32
    16de:	ab ab       	std	Y+51, r26	; 0x33
    16e0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16e2:	69 a9       	ldd	r22, Y+49	; 0x31
    16e4:	7a a9       	ldd	r23, Y+50	; 0x32
    16e6:	8b a9       	ldd	r24, Y+51	; 0x33
    16e8:	9c a9       	ldd	r25, Y+52	; 0x34
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	40 e8       	ldi	r20, 0x80	; 128
    16f0:	5f e3       	ldi	r21, 0x3F	; 63
    16f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16f6:	88 23       	and	r24, r24
    16f8:	2c f4       	brge	.+10     	; 0x1704 <LCD_voidInit+0x8c>
		__ticks = 1;
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	98 ab       	std	Y+48, r25	; 0x30
    1700:	8f a7       	std	Y+47, r24	; 0x2f
    1702:	3f c0       	rjmp	.+126    	; 0x1782 <LCD_voidInit+0x10a>
	else if (__tmp > 65535)
    1704:	69 a9       	ldd	r22, Y+49	; 0x31
    1706:	7a a9       	ldd	r23, Y+50	; 0x32
    1708:	8b a9       	ldd	r24, Y+51	; 0x33
    170a:	9c a9       	ldd	r25, Y+52	; 0x34
    170c:	20 e0       	ldi	r18, 0x00	; 0
    170e:	3f ef       	ldi	r19, 0xFF	; 255
    1710:	4f e7       	ldi	r20, 0x7F	; 127
    1712:	57 e4       	ldi	r21, 0x47	; 71
    1714:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1718:	18 16       	cp	r1, r24
    171a:	4c f5       	brge	.+82     	; 0x176e <LCD_voidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    171c:	6d a9       	ldd	r22, Y+53	; 0x35
    171e:	7e a9       	ldd	r23, Y+54	; 0x36
    1720:	8f a9       	ldd	r24, Y+55	; 0x37
    1722:	98 ad       	ldd	r25, Y+56	; 0x38
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	40 e2       	ldi	r20, 0x20	; 32
    172a:	51 e4       	ldi	r21, 0x41	; 65
    172c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1730:	dc 01       	movw	r26, r24
    1732:	cb 01       	movw	r24, r22
    1734:	bc 01       	movw	r22, r24
    1736:	cd 01       	movw	r24, r26
    1738:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    173c:	dc 01       	movw	r26, r24
    173e:	cb 01       	movw	r24, r22
    1740:	98 ab       	std	Y+48, r25	; 0x30
    1742:	8f a7       	std	Y+47, r24	; 0x2f
    1744:	0f c0       	rjmp	.+30     	; 0x1764 <LCD_voidInit+0xec>
    1746:	88 ec       	ldi	r24, 0xC8	; 200
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	9e a7       	std	Y+46, r25	; 0x2e
    174c:	8d a7       	std	Y+45, r24	; 0x2d
    174e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1750:	9e a5       	ldd	r25, Y+46	; 0x2e
    1752:	01 97       	sbiw	r24, 0x01	; 1
    1754:	f1 f7       	brne	.-4      	; 0x1752 <LCD_voidInit+0xda>
    1756:	9e a7       	std	Y+46, r25	; 0x2e
    1758:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    175a:	8f a5       	ldd	r24, Y+47	; 0x2f
    175c:	98 a9       	ldd	r25, Y+48	; 0x30
    175e:	01 97       	sbiw	r24, 0x01	; 1
    1760:	98 ab       	std	Y+48, r25	; 0x30
    1762:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1764:	8f a5       	ldd	r24, Y+47	; 0x2f
    1766:	98 a9       	ldd	r25, Y+48	; 0x30
    1768:	00 97       	sbiw	r24, 0x00	; 0
    176a:	69 f7       	brne	.-38     	; 0x1746 <LCD_voidInit+0xce>
    176c:	14 c0       	rjmp	.+40     	; 0x1796 <LCD_voidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    176e:	69 a9       	ldd	r22, Y+49	; 0x31
    1770:	7a a9       	ldd	r23, Y+50	; 0x32
    1772:	8b a9       	ldd	r24, Y+51	; 0x33
    1774:	9c a9       	ldd	r25, Y+52	; 0x34
    1776:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    177a:	dc 01       	movw	r26, r24
    177c:	cb 01       	movw	r24, r22
    177e:	98 ab       	std	Y+48, r25	; 0x30
    1780:	8f a7       	std	Y+47, r24	; 0x2f
    1782:	8f a5       	ldd	r24, Y+47	; 0x2f
    1784:	98 a9       	ldd	r25, Y+48	; 0x30
    1786:	9c a7       	std	Y+44, r25	; 0x2c
    1788:	8b a7       	std	Y+43, r24	; 0x2b
    178a:	8b a5       	ldd	r24, Y+43	; 0x2b
    178c:	9c a5       	ldd	r25, Y+44	; 0x2c
    178e:	01 97       	sbiw	r24, 0x01	; 1
    1790:	f1 f7       	brne	.-4      	; 0x178e <LCD_voidInit+0x116>
    1792:	9c a7       	std	Y+44, r25	; 0x2c
    1794:	8b a7       	std	Y+43, r24	; 0x2b
	
	/* WAIT 30ms AFTER VDD RISES TO 4.5V */
	_delay_ms(30);
	
	/* FUNCTION SET */
	LCD_voidSendCommand (LCD_FUNC_SET);
    1796:	88 e3       	ldi	r24, 0x38	; 56
    1798:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <LCD_voidSendCommand>
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	a0 e8       	ldi	r26, 0x80	; 128
    17a2:	bf e3       	ldi	r27, 0x3F	; 63
    17a4:	8f a3       	std	Y+39, r24	; 0x27
    17a6:	98 a7       	std	Y+40, r25	; 0x28
    17a8:	a9 a7       	std	Y+41, r26	; 0x29
    17aa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ac:	6f a1       	ldd	r22, Y+39	; 0x27
    17ae:	78 a5       	ldd	r23, Y+40	; 0x28
    17b0:	89 a5       	ldd	r24, Y+41	; 0x29
    17b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    17b4:	20 e0       	ldi	r18, 0x00	; 0
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	4a ef       	ldi	r20, 0xFA	; 250
    17ba:	54 e4       	ldi	r21, 0x44	; 68
    17bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17c0:	dc 01       	movw	r26, r24
    17c2:	cb 01       	movw	r24, r22
    17c4:	8b a3       	std	Y+35, r24	; 0x23
    17c6:	9c a3       	std	Y+36, r25	; 0x24
    17c8:	ad a3       	std	Y+37, r26	; 0x25
    17ca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17cc:	6b a1       	ldd	r22, Y+35	; 0x23
    17ce:	7c a1       	ldd	r23, Y+36	; 0x24
    17d0:	8d a1       	ldd	r24, Y+37	; 0x25
    17d2:	9e a1       	ldd	r25, Y+38	; 0x26
    17d4:	20 e0       	ldi	r18, 0x00	; 0
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	40 e8       	ldi	r20, 0x80	; 128
    17da:	5f e3       	ldi	r21, 0x3F	; 63
    17dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17e0:	88 23       	and	r24, r24
    17e2:	2c f4       	brge	.+10     	; 0x17ee <LCD_voidInit+0x176>
		__ticks = 1;
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	9a a3       	std	Y+34, r25	; 0x22
    17ea:	89 a3       	std	Y+33, r24	; 0x21
    17ec:	3f c0       	rjmp	.+126    	; 0x186c <LCD_voidInit+0x1f4>
	else if (__tmp > 65535)
    17ee:	6b a1       	ldd	r22, Y+35	; 0x23
    17f0:	7c a1       	ldd	r23, Y+36	; 0x24
    17f2:	8d a1       	ldd	r24, Y+37	; 0x25
    17f4:	9e a1       	ldd	r25, Y+38	; 0x26
    17f6:	20 e0       	ldi	r18, 0x00	; 0
    17f8:	3f ef       	ldi	r19, 0xFF	; 255
    17fa:	4f e7       	ldi	r20, 0x7F	; 127
    17fc:	57 e4       	ldi	r21, 0x47	; 71
    17fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1802:	18 16       	cp	r1, r24
    1804:	4c f5       	brge	.+82     	; 0x1858 <LCD_voidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1806:	6f a1       	ldd	r22, Y+39	; 0x27
    1808:	78 a5       	ldd	r23, Y+40	; 0x28
    180a:	89 a5       	ldd	r24, Y+41	; 0x29
    180c:	9a a5       	ldd	r25, Y+42	; 0x2a
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	40 e2       	ldi	r20, 0x20	; 32
    1814:	51 e4       	ldi	r21, 0x41	; 65
    1816:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	bc 01       	movw	r22, r24
    1820:	cd 01       	movw	r24, r26
    1822:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1826:	dc 01       	movw	r26, r24
    1828:	cb 01       	movw	r24, r22
    182a:	9a a3       	std	Y+34, r25	; 0x22
    182c:	89 a3       	std	Y+33, r24	; 0x21
    182e:	0f c0       	rjmp	.+30     	; 0x184e <LCD_voidInit+0x1d6>
    1830:	88 ec       	ldi	r24, 0xC8	; 200
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	98 a3       	std	Y+32, r25	; 0x20
    1836:	8f 8f       	std	Y+31, r24	; 0x1f
    1838:	8f 8d       	ldd	r24, Y+31	; 0x1f
    183a:	98 a1       	ldd	r25, Y+32	; 0x20
    183c:	01 97       	sbiw	r24, 0x01	; 1
    183e:	f1 f7       	brne	.-4      	; 0x183c <LCD_voidInit+0x1c4>
    1840:	98 a3       	std	Y+32, r25	; 0x20
    1842:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1844:	89 a1       	ldd	r24, Y+33	; 0x21
    1846:	9a a1       	ldd	r25, Y+34	; 0x22
    1848:	01 97       	sbiw	r24, 0x01	; 1
    184a:	9a a3       	std	Y+34, r25	; 0x22
    184c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    184e:	89 a1       	ldd	r24, Y+33	; 0x21
    1850:	9a a1       	ldd	r25, Y+34	; 0x22
    1852:	00 97       	sbiw	r24, 0x00	; 0
    1854:	69 f7       	brne	.-38     	; 0x1830 <LCD_voidInit+0x1b8>
    1856:	14 c0       	rjmp	.+40     	; 0x1880 <LCD_voidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1858:	6b a1       	ldd	r22, Y+35	; 0x23
    185a:	7c a1       	ldd	r23, Y+36	; 0x24
    185c:	8d a1       	ldd	r24, Y+37	; 0x25
    185e:	9e a1       	ldd	r25, Y+38	; 0x26
    1860:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1864:	dc 01       	movw	r26, r24
    1866:	cb 01       	movw	r24, r22
    1868:	9a a3       	std	Y+34, r25	; 0x22
    186a:	89 a3       	std	Y+33, r24	; 0x21
    186c:	89 a1       	ldd	r24, Y+33	; 0x21
    186e:	9a a1       	ldd	r25, Y+34	; 0x22
    1870:	9e 8f       	std	Y+30, r25	; 0x1e
    1872:	8d 8f       	std	Y+29, r24	; 0x1d
    1874:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1876:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1878:	01 97       	sbiw	r24, 0x01	; 1
    187a:	f1 f7       	brne	.-4      	; 0x1878 <LCD_voidInit+0x200>
    187c:	9e 8f       	std	Y+30, r25	; 0x1e
    187e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	
	/* DISPLAY ON/OFF */
	LCD_voidSendCommand (LCD_ONOF);
    1880:	8f e0       	ldi	r24, 0x0F	; 15
    1882:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <LCD_voidSendCommand>
    1886:	80 e0       	ldi	r24, 0x00	; 0
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	a0 e8       	ldi	r26, 0x80	; 128
    188c:	bf e3       	ldi	r27, 0x3F	; 63
    188e:	89 8f       	std	Y+25, r24	; 0x19
    1890:	9a 8f       	std	Y+26, r25	; 0x1a
    1892:	ab 8f       	std	Y+27, r26	; 0x1b
    1894:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1896:	69 8d       	ldd	r22, Y+25	; 0x19
    1898:	7a 8d       	ldd	r23, Y+26	; 0x1a
    189a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    189c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	4a ef       	ldi	r20, 0xFA	; 250
    18a4:	54 e4       	ldi	r21, 0x44	; 68
    18a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18aa:	dc 01       	movw	r26, r24
    18ac:	cb 01       	movw	r24, r22
    18ae:	8d 8b       	std	Y+21, r24	; 0x15
    18b0:	9e 8b       	std	Y+22, r25	; 0x16
    18b2:	af 8b       	std	Y+23, r26	; 0x17
    18b4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18b6:	6d 89       	ldd	r22, Y+21	; 0x15
    18b8:	7e 89       	ldd	r23, Y+22	; 0x16
    18ba:	8f 89       	ldd	r24, Y+23	; 0x17
    18bc:	98 8d       	ldd	r25, Y+24	; 0x18
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	40 e8       	ldi	r20, 0x80	; 128
    18c4:	5f e3       	ldi	r21, 0x3F	; 63
    18c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18ca:	88 23       	and	r24, r24
    18cc:	2c f4       	brge	.+10     	; 0x18d8 <LCD_voidInit+0x260>
		__ticks = 1;
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	9c 8b       	std	Y+20, r25	; 0x14
    18d4:	8b 8b       	std	Y+19, r24	; 0x13
    18d6:	3f c0       	rjmp	.+126    	; 0x1956 <LCD_voidInit+0x2de>
	else if (__tmp > 65535)
    18d8:	6d 89       	ldd	r22, Y+21	; 0x15
    18da:	7e 89       	ldd	r23, Y+22	; 0x16
    18dc:	8f 89       	ldd	r24, Y+23	; 0x17
    18de:	98 8d       	ldd	r25, Y+24	; 0x18
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	3f ef       	ldi	r19, 0xFF	; 255
    18e4:	4f e7       	ldi	r20, 0x7F	; 127
    18e6:	57 e4       	ldi	r21, 0x47	; 71
    18e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18ec:	18 16       	cp	r1, r24
    18ee:	4c f5       	brge	.+82     	; 0x1942 <LCD_voidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f0:	69 8d       	ldd	r22, Y+25	; 0x19
    18f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	40 e2       	ldi	r20, 0x20	; 32
    18fe:	51 e4       	ldi	r21, 0x41	; 65
    1900:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	bc 01       	movw	r22, r24
    190a:	cd 01       	movw	r24, r26
    190c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22
    1914:	9c 8b       	std	Y+20, r25	; 0x14
    1916:	8b 8b       	std	Y+19, r24	; 0x13
    1918:	0f c0       	rjmp	.+30     	; 0x1938 <LCD_voidInit+0x2c0>
    191a:	88 ec       	ldi	r24, 0xC8	; 200
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	9a 8b       	std	Y+18, r25	; 0x12
    1920:	89 8b       	std	Y+17, r24	; 0x11
    1922:	89 89       	ldd	r24, Y+17	; 0x11
    1924:	9a 89       	ldd	r25, Y+18	; 0x12
    1926:	01 97       	sbiw	r24, 0x01	; 1
    1928:	f1 f7       	brne	.-4      	; 0x1926 <LCD_voidInit+0x2ae>
    192a:	9a 8b       	std	Y+18, r25	; 0x12
    192c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    192e:	8b 89       	ldd	r24, Y+19	; 0x13
    1930:	9c 89       	ldd	r25, Y+20	; 0x14
    1932:	01 97       	sbiw	r24, 0x01	; 1
    1934:	9c 8b       	std	Y+20, r25	; 0x14
    1936:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1938:	8b 89       	ldd	r24, Y+19	; 0x13
    193a:	9c 89       	ldd	r25, Y+20	; 0x14
    193c:	00 97       	sbiw	r24, 0x00	; 0
    193e:	69 f7       	brne	.-38     	; 0x191a <LCD_voidInit+0x2a2>
    1940:	14 c0       	rjmp	.+40     	; 0x196a <LCD_voidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1942:	6d 89       	ldd	r22, Y+21	; 0x15
    1944:	7e 89       	ldd	r23, Y+22	; 0x16
    1946:	8f 89       	ldd	r24, Y+23	; 0x17
    1948:	98 8d       	ldd	r25, Y+24	; 0x18
    194a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194e:	dc 01       	movw	r26, r24
    1950:	cb 01       	movw	r24, r22
    1952:	9c 8b       	std	Y+20, r25	; 0x14
    1954:	8b 8b       	std	Y+19, r24	; 0x13
    1956:	8b 89       	ldd	r24, Y+19	; 0x13
    1958:	9c 89       	ldd	r25, Y+20	; 0x14
    195a:	98 8b       	std	Y+16, r25	; 0x10
    195c:	8f 87       	std	Y+15, r24	; 0x0f
    195e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1960:	98 89       	ldd	r25, Y+16	; 0x10
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	f1 f7       	brne	.-4      	; 0x1962 <LCD_voidInit+0x2ea>
    1966:	98 8b       	std	Y+16, r25	; 0x10
    1968:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	
	/* DISPLAY CLEAR */
	LCD_voidSendCommand (LCD_CLEAR);
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <LCD_voidSendCommand>
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	a0 e0       	ldi	r26, 0x00	; 0
    1976:	b0 e4       	ldi	r27, 0x40	; 64
    1978:	8b 87       	std	Y+11, r24	; 0x0b
    197a:	9c 87       	std	Y+12, r25	; 0x0c
    197c:	ad 87       	std	Y+13, r26	; 0x0d
    197e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1980:	6b 85       	ldd	r22, Y+11	; 0x0b
    1982:	7c 85       	ldd	r23, Y+12	; 0x0c
    1984:	8d 85       	ldd	r24, Y+13	; 0x0d
    1986:	9e 85       	ldd	r25, Y+14	; 0x0e
    1988:	20 e0       	ldi	r18, 0x00	; 0
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	4a ef       	ldi	r20, 0xFA	; 250
    198e:	54 e4       	ldi	r21, 0x44	; 68
    1990:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1994:	dc 01       	movw	r26, r24
    1996:	cb 01       	movw	r24, r22
    1998:	8f 83       	std	Y+7, r24	; 0x07
    199a:	98 87       	std	Y+8, r25	; 0x08
    199c:	a9 87       	std	Y+9, r26	; 0x09
    199e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19a0:	6f 81       	ldd	r22, Y+7	; 0x07
    19a2:	78 85       	ldd	r23, Y+8	; 0x08
    19a4:	89 85       	ldd	r24, Y+9	; 0x09
    19a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	40 e8       	ldi	r20, 0x80	; 128
    19ae:	5f e3       	ldi	r21, 0x3F	; 63
    19b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19b4:	88 23       	and	r24, r24
    19b6:	2c f4       	brge	.+10     	; 0x19c2 <LCD_voidInit+0x34a>
		__ticks = 1;
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	9e 83       	std	Y+6, r25	; 0x06
    19be:	8d 83       	std	Y+5, r24	; 0x05
    19c0:	3f c0       	rjmp	.+126    	; 0x1a40 <LCD_voidInit+0x3c8>
	else if (__tmp > 65535)
    19c2:	6f 81       	ldd	r22, Y+7	; 0x07
    19c4:	78 85       	ldd	r23, Y+8	; 0x08
    19c6:	89 85       	ldd	r24, Y+9	; 0x09
    19c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	3f ef       	ldi	r19, 0xFF	; 255
    19ce:	4f e7       	ldi	r20, 0x7F	; 127
    19d0:	57 e4       	ldi	r21, 0x47	; 71
    19d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19d6:	18 16       	cp	r1, r24
    19d8:	4c f5       	brge	.+82     	; 0x1a2c <LCD_voidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19da:	6b 85       	ldd	r22, Y+11	; 0x0b
    19dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    19de:	8d 85       	ldd	r24, Y+13	; 0x0d
    19e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    19e2:	20 e0       	ldi	r18, 0x00	; 0
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	40 e2       	ldi	r20, 0x20	; 32
    19e8:	51 e4       	ldi	r21, 0x41	; 65
    19ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ee:	dc 01       	movw	r26, r24
    19f0:	cb 01       	movw	r24, r22
    19f2:	bc 01       	movw	r22, r24
    19f4:	cd 01       	movw	r24, r26
    19f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	9e 83       	std	Y+6, r25	; 0x06
    1a00:	8d 83       	std	Y+5, r24	; 0x05
    1a02:	0f c0       	rjmp	.+30     	; 0x1a22 <LCD_voidInit+0x3aa>
    1a04:	88 ec       	ldi	r24, 0xC8	; 200
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	9c 83       	std	Y+4, r25	; 0x04
    1a0a:	8b 83       	std	Y+3, r24	; 0x03
    1a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a10:	01 97       	sbiw	r24, 0x01	; 1
    1a12:	f1 f7       	brne	.-4      	; 0x1a10 <LCD_voidInit+0x398>
    1a14:	9c 83       	std	Y+4, r25	; 0x04
    1a16:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a18:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
    1a1e:	9e 83       	std	Y+6, r25	; 0x06
    1a20:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a22:	8d 81       	ldd	r24, Y+5	; 0x05
    1a24:	9e 81       	ldd	r25, Y+6	; 0x06
    1a26:	00 97       	sbiw	r24, 0x00	; 0
    1a28:	69 f7       	brne	.-38     	; 0x1a04 <LCD_voidInit+0x38c>
    1a2a:	14 c0       	rjmp	.+40     	; 0x1a54 <LCD_voidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a2e:	78 85       	ldd	r23, Y+8	; 0x08
    1a30:	89 85       	ldd	r24, Y+9	; 0x09
    1a32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a38:	dc 01       	movw	r26, r24
    1a3a:	cb 01       	movw	r24, r22
    1a3c:	9e 83       	std	Y+6, r25	; 0x06
    1a3e:	8d 83       	std	Y+5, r24	; 0x05
    1a40:	8d 81       	ldd	r24, Y+5	; 0x05
    1a42:	9e 81       	ldd	r25, Y+6	; 0x06
    1a44:	9a 83       	std	Y+2, r25	; 0x02
    1a46:	89 83       	std	Y+1, r24	; 0x01
    1a48:	89 81       	ldd	r24, Y+1	; 0x01
    1a4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a4c:	01 97       	sbiw	r24, 0x01	; 1
    1a4e:	f1 f7       	brne	.-4      	; 0x1a4c <LCD_voidInit+0x3d4>
    1a50:	9a 83       	std	Y+2, r25	; 0x02
    1a52:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	
}
    1a54:	e8 96       	adiw	r28, 0x38	; 56
    1a56:	0f b6       	in	r0, 0x3f	; 63
    1a58:	f8 94       	cli
    1a5a:	de bf       	out	0x3e, r29	; 62
    1a5c:	0f be       	out	0x3f, r0	; 63
    1a5e:	cd bf       	out	0x3d, r28	; 61
    1a60:	cf 91       	pop	r28
    1a62:	df 91       	pop	r29
    1a64:	08 95       	ret

00001a66 <LCD_voidSendCommand>:

void LCD_voidSendCommand(u8 Copy_U8Command)
{
    1a66:	df 93       	push	r29
    1a68:	cf 93       	push	r28
    1a6a:	cd b7       	in	r28, 0x3d	; 61
    1a6c:	de b7       	in	r29, 0x3e	; 62
    1a6e:	2f 97       	sbiw	r28, 0x0f	; 15
    1a70:	0f b6       	in	r0, 0x3f	; 63
    1a72:	f8 94       	cli
    1a74:	de bf       	out	0x3e, r29	; 62
    1a76:	0f be       	out	0x3f, r0	; 63
    1a78:	cd bf       	out	0x3d, r28	; 61
    1a7a:	8f 87       	std	Y+15, r24	; 0x0f
	/* RS = 0 */
	DIO_voidSetPinValue(LCD_CONTROL_PORT, RS, DIO_LOW);
    1a7c:	83 e0       	ldi	r24, 0x03	; 3
    1a7e:	62 e0       	ldi	r22, 0x02	; 2
    1a80:	40 e0       	ldi	r20, 0x00	; 0
    1a82:	0e 94 f0 06 	call	0xde0	; 0xde0 <DIO_voidSetPinValue>
	/* RW = 0 */
	DIO_voidSetPinValue(LCD_CONTROL_PORT, RW, DIO_LOW);
    1a86:	83 e0       	ldi	r24, 0x03	; 3
    1a88:	63 e0       	ldi	r22, 0x03	; 3
    1a8a:	40 e0       	ldi	r20, 0x00	; 0
    1a8c:	0e 94 f0 06 	call	0xde0	; 0xde0 <DIO_voidSetPinValue>
	/* PUT THE COMMAND ON DATA PINS */
	DIO_voidSetPortValue(LCD_DATA_PORT, Copy_U8Command);
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a94:	0e 94 b3 08 	call	0x1166	; 0x1166 <DIO_voidSetPortValue>
	/* E = 1 */
	DIO_voidSetPinValue(LCD_CONTROL_PORT, EN, DIO_HIGH);
    1a98:	83 e0       	ldi	r24, 0x03	; 3
    1a9a:	64 e0       	ldi	r22, 0x04	; 4
    1a9c:	41 e0       	ldi	r20, 0x01	; 1
    1a9e:	0e 94 f0 06 	call	0xde0	; 0xde0 <DIO_voidSetPinValue>
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	a0 e0       	ldi	r26, 0x00	; 0
    1aa8:	b0 e4       	ldi	r27, 0x40	; 64
    1aaa:	8b 87       	std	Y+11, r24	; 0x0b
    1aac:	9c 87       	std	Y+12, r25	; 0x0c
    1aae:	ad 87       	std	Y+13, r26	; 0x0d
    1ab0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ab4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ab6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	4a ef       	ldi	r20, 0xFA	; 250
    1ac0:	54 e4       	ldi	r21, 0x44	; 68
    1ac2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac6:	dc 01       	movw	r26, r24
    1ac8:	cb 01       	movw	r24, r22
    1aca:	8f 83       	std	Y+7, r24	; 0x07
    1acc:	98 87       	std	Y+8, r25	; 0x08
    1ace:	a9 87       	std	Y+9, r26	; 0x09
    1ad0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ad2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad4:	78 85       	ldd	r23, Y+8	; 0x08
    1ad6:	89 85       	ldd	r24, Y+9	; 0x09
    1ad8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ada:	20 e0       	ldi	r18, 0x00	; 0
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	40 e8       	ldi	r20, 0x80	; 128
    1ae0:	5f e3       	ldi	r21, 0x3F	; 63
    1ae2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ae6:	88 23       	and	r24, r24
    1ae8:	2c f4       	brge	.+10     	; 0x1af4 <LCD_voidSendCommand+0x8e>
		__ticks = 1;
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	9e 83       	std	Y+6, r25	; 0x06
    1af0:	8d 83       	std	Y+5, r24	; 0x05
    1af2:	3f c0       	rjmp	.+126    	; 0x1b72 <LCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    1af4:	6f 81       	ldd	r22, Y+7	; 0x07
    1af6:	78 85       	ldd	r23, Y+8	; 0x08
    1af8:	89 85       	ldd	r24, Y+9	; 0x09
    1afa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	3f ef       	ldi	r19, 0xFF	; 255
    1b00:	4f e7       	ldi	r20, 0x7F	; 127
    1b02:	57 e4       	ldi	r21, 0x47	; 71
    1b04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b08:	18 16       	cp	r1, r24
    1b0a:	4c f5       	brge	.+82     	; 0x1b5e <LCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b10:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b12:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	40 e2       	ldi	r20, 0x20	; 32
    1b1a:	51 e4       	ldi	r21, 0x41	; 65
    1b1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	bc 01       	movw	r22, r24
    1b26:	cd 01       	movw	r24, r26
    1b28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	9e 83       	std	Y+6, r25	; 0x06
    1b32:	8d 83       	std	Y+5, r24	; 0x05
    1b34:	0f c0       	rjmp	.+30     	; 0x1b54 <LCD_voidSendCommand+0xee>
    1b36:	88 ec       	ldi	r24, 0xC8	; 200
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	9c 83       	std	Y+4, r25	; 0x04
    1b3c:	8b 83       	std	Y+3, r24	; 0x03
    1b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b40:	9c 81       	ldd	r25, Y+4	; 0x04
    1b42:	01 97       	sbiw	r24, 0x01	; 1
    1b44:	f1 f7       	brne	.-4      	; 0x1b42 <LCD_voidSendCommand+0xdc>
    1b46:	9c 83       	std	Y+4, r25	; 0x04
    1b48:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4e:	01 97       	sbiw	r24, 0x01	; 1
    1b50:	9e 83       	std	Y+6, r25	; 0x06
    1b52:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b54:	8d 81       	ldd	r24, Y+5	; 0x05
    1b56:	9e 81       	ldd	r25, Y+6	; 0x06
    1b58:	00 97       	sbiw	r24, 0x00	; 0
    1b5a:	69 f7       	brne	.-38     	; 0x1b36 <LCD_voidSendCommand+0xd0>
    1b5c:	14 c0       	rjmp	.+40     	; 0x1b86 <LCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b60:	78 85       	ldd	r23, Y+8	; 0x08
    1b62:	89 85       	ldd	r24, Y+9	; 0x09
    1b64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	cb 01       	movw	r24, r22
    1b6e:	9e 83       	std	Y+6, r25	; 0x06
    1b70:	8d 83       	std	Y+5, r24	; 0x05
    1b72:	8d 81       	ldd	r24, Y+5	; 0x05
    1b74:	9e 81       	ldd	r25, Y+6	; 0x06
    1b76:	9a 83       	std	Y+2, r25	; 0x02
    1b78:	89 83       	std	Y+1, r24	; 0x01
    1b7a:	89 81       	ldd	r24, Y+1	; 0x01
    1b7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b7e:	01 97       	sbiw	r24, 0x01	; 1
    1b80:	f1 f7       	brne	.-4      	; 0x1b7e <LCD_voidSendCommand+0x118>
    1b82:	9a 83       	std	Y+2, r25	; 0x02
    1b84:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/* E = 0 */
	DIO_voidSetPinValue(LCD_CONTROL_PORT, EN, DIO_LOW);
    1b86:	83 e0       	ldi	r24, 0x03	; 3
    1b88:	64 e0       	ldi	r22, 0x04	; 4
    1b8a:	40 e0       	ldi	r20, 0x00	; 0
    1b8c:	0e 94 f0 06 	call	0xde0	; 0xde0 <DIO_voidSetPinValue>
	
}
    1b90:	2f 96       	adiw	r28, 0x0f	; 15
    1b92:	0f b6       	in	r0, 0x3f	; 63
    1b94:	f8 94       	cli
    1b96:	de bf       	out	0x3e, r29	; 62
    1b98:	0f be       	out	0x3f, r0	; 63
    1b9a:	cd bf       	out	0x3d, r28	; 61
    1b9c:	cf 91       	pop	r28
    1b9e:	df 91       	pop	r29
    1ba0:	08 95       	ret

00001ba2 <LCD_voidSendChar>:

void LCD_voidSendChar (u8 Copy_U8Data)
{
    1ba2:	df 93       	push	r29
    1ba4:	cf 93       	push	r28
    1ba6:	cd b7       	in	r28, 0x3d	; 61
    1ba8:	de b7       	in	r29, 0x3e	; 62
    1baa:	6d 97       	sbiw	r28, 0x1d	; 29
    1bac:	0f b6       	in	r0, 0x3f	; 63
    1bae:	f8 94       	cli
    1bb0:	de bf       	out	0x3e, r29	; 62
    1bb2:	0f be       	out	0x3f, r0	; 63
    1bb4:	cd bf       	out	0x3d, r28	; 61
    1bb6:	8d 8f       	std	Y+29, r24	; 0x1d
	/* RS = 1 */
	DIO_voidSetPinValue(LCD_CONTROL_PORT, RS, DIO_HIGH);
    1bb8:	83 e0       	ldi	r24, 0x03	; 3
    1bba:	62 e0       	ldi	r22, 0x02	; 2
    1bbc:	41 e0       	ldi	r20, 0x01	; 1
    1bbe:	0e 94 f0 06 	call	0xde0	; 0xde0 <DIO_voidSetPinValue>
    /* RW = 0 */
    DIO_voidSetPinValue(LCD_CONTROL_PORT, RW, DIO_LOW);
    1bc2:	83 e0       	ldi	r24, 0x03	; 3
    1bc4:	63 e0       	ldi	r22, 0x03	; 3
    1bc6:	40 e0       	ldi	r20, 0x00	; 0
    1bc8:	0e 94 f0 06 	call	0xde0	; 0xde0 <DIO_voidSetPinValue>
    /* PUT THE COMMAND ON DATA PINS */
    DIO_voidSetPortValue(LCD_DATA_PORT, Copy_U8Data);
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1bd0:	0e 94 b3 08 	call	0x1166	; 0x1166 <DIO_voidSetPortValue>
    /* E = 1 */
    DIO_voidSetPinValue(LCD_CONTROL_PORT, EN, DIO_HIGH);
    1bd4:	83 e0       	ldi	r24, 0x03	; 3
    1bd6:	64 e0       	ldi	r22, 0x04	; 4
    1bd8:	41 e0       	ldi	r20, 0x01	; 1
    1bda:	0e 94 f0 06 	call	0xde0	; 0xde0 <DIO_voidSetPinValue>
    1bde:	80 e0       	ldi	r24, 0x00	; 0
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	a0 e0       	ldi	r26, 0x00	; 0
    1be4:	b0 e4       	ldi	r27, 0x40	; 64
    1be6:	89 8f       	std	Y+25, r24	; 0x19
    1be8:	9a 8f       	std	Y+26, r25	; 0x1a
    1bea:	ab 8f       	std	Y+27, r26	; 0x1b
    1bec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bee:	69 8d       	ldd	r22, Y+25	; 0x19
    1bf0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bf2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bf4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	4a ef       	ldi	r20, 0xFA	; 250
    1bfc:	54 e4       	ldi	r21, 0x44	; 68
    1bfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	8d 8b       	std	Y+21, r24	; 0x15
    1c08:	9e 8b       	std	Y+22, r25	; 0x16
    1c0a:	af 8b       	std	Y+23, r26	; 0x17
    1c0c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c0e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c10:	7e 89       	ldd	r23, Y+22	; 0x16
    1c12:	8f 89       	ldd	r24, Y+23	; 0x17
    1c14:	98 8d       	ldd	r25, Y+24	; 0x18
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	40 e8       	ldi	r20, 0x80	; 128
    1c1c:	5f e3       	ldi	r21, 0x3F	; 63
    1c1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c22:	88 23       	and	r24, r24
    1c24:	2c f4       	brge	.+10     	; 0x1c30 <LCD_voidSendChar+0x8e>
		__ticks = 1;
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	9c 8b       	std	Y+20, r25	; 0x14
    1c2c:	8b 8b       	std	Y+19, r24	; 0x13
    1c2e:	3f c0       	rjmp	.+126    	; 0x1cae <LCD_voidSendChar+0x10c>
	else if (__tmp > 65535)
    1c30:	6d 89       	ldd	r22, Y+21	; 0x15
    1c32:	7e 89       	ldd	r23, Y+22	; 0x16
    1c34:	8f 89       	ldd	r24, Y+23	; 0x17
    1c36:	98 8d       	ldd	r25, Y+24	; 0x18
    1c38:	20 e0       	ldi	r18, 0x00	; 0
    1c3a:	3f ef       	ldi	r19, 0xFF	; 255
    1c3c:	4f e7       	ldi	r20, 0x7F	; 127
    1c3e:	57 e4       	ldi	r21, 0x47	; 71
    1c40:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c44:	18 16       	cp	r1, r24
    1c46:	4c f5       	brge	.+82     	; 0x1c9a <LCD_voidSendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c48:	69 8d       	ldd	r22, Y+25	; 0x19
    1c4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	40 e2       	ldi	r20, 0x20	; 32
    1c56:	51 e4       	ldi	r21, 0x41	; 65
    1c58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	bc 01       	movw	r22, r24
    1c62:	cd 01       	movw	r24, r26
    1c64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	9c 8b       	std	Y+20, r25	; 0x14
    1c6e:	8b 8b       	std	Y+19, r24	; 0x13
    1c70:	0f c0       	rjmp	.+30     	; 0x1c90 <LCD_voidSendChar+0xee>
    1c72:	88 ec       	ldi	r24, 0xC8	; 200
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	9a 8b       	std	Y+18, r25	; 0x12
    1c78:	89 8b       	std	Y+17, r24	; 0x11
    1c7a:	89 89       	ldd	r24, Y+17	; 0x11
    1c7c:	9a 89       	ldd	r25, Y+18	; 0x12
    1c7e:	01 97       	sbiw	r24, 0x01	; 1
    1c80:	f1 f7       	brne	.-4      	; 0x1c7e <LCD_voidSendChar+0xdc>
    1c82:	9a 8b       	std	Y+18, r25	; 0x12
    1c84:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c86:	8b 89       	ldd	r24, Y+19	; 0x13
    1c88:	9c 89       	ldd	r25, Y+20	; 0x14
    1c8a:	01 97       	sbiw	r24, 0x01	; 1
    1c8c:	9c 8b       	std	Y+20, r25	; 0x14
    1c8e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c90:	8b 89       	ldd	r24, Y+19	; 0x13
    1c92:	9c 89       	ldd	r25, Y+20	; 0x14
    1c94:	00 97       	sbiw	r24, 0x00	; 0
    1c96:	69 f7       	brne	.-38     	; 0x1c72 <LCD_voidSendChar+0xd0>
    1c98:	14 c0       	rjmp	.+40     	; 0x1cc2 <LCD_voidSendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c9a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c9c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c9e:	8f 89       	ldd	r24, Y+23	; 0x17
    1ca0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ca2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	9c 8b       	std	Y+20, r25	; 0x14
    1cac:	8b 8b       	std	Y+19, r24	; 0x13
    1cae:	8b 89       	ldd	r24, Y+19	; 0x13
    1cb0:	9c 89       	ldd	r25, Y+20	; 0x14
    1cb2:	98 8b       	std	Y+16, r25	; 0x10
    1cb4:	8f 87       	std	Y+15, r24	; 0x0f
    1cb6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cb8:	98 89       	ldd	r25, Y+16	; 0x10
    1cba:	01 97       	sbiw	r24, 0x01	; 1
    1cbc:	f1 f7       	brne	.-4      	; 0x1cba <LCD_voidSendChar+0x118>
    1cbe:	98 8b       	std	Y+16, r25	; 0x10
    1cc0:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2);
    /* E = 0 */
    DIO_voidSetPinValue(LCD_CONTROL_PORT, EN, DIO_LOW);
    1cc2:	83 e0       	ldi	r24, 0x03	; 3
    1cc4:	64 e0       	ldi	r22, 0x04	; 4
    1cc6:	40 e0       	ldi	r20, 0x00	; 0
    1cc8:	0e 94 f0 06 	call	0xde0	; 0xde0 <DIO_voidSetPinValue>
    1ccc:	80 e0       	ldi	r24, 0x00	; 0
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	a0 e0       	ldi	r26, 0x00	; 0
    1cd2:	b0 e4       	ldi	r27, 0x40	; 64
    1cd4:	8b 87       	std	Y+11, r24	; 0x0b
    1cd6:	9c 87       	std	Y+12, r25	; 0x0c
    1cd8:	ad 87       	std	Y+13, r26	; 0x0d
    1cda:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cdc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cde:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ce0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ce2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	4a ef       	ldi	r20, 0xFA	; 250
    1cea:	54 e4       	ldi	r21, 0x44	; 68
    1cec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	8f 83       	std	Y+7, r24	; 0x07
    1cf6:	98 87       	std	Y+8, r25	; 0x08
    1cf8:	a9 87       	std	Y+9, r26	; 0x09
    1cfa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cfc:	6f 81       	ldd	r22, Y+7	; 0x07
    1cfe:	78 85       	ldd	r23, Y+8	; 0x08
    1d00:	89 85       	ldd	r24, Y+9	; 0x09
    1d02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	40 e8       	ldi	r20, 0x80	; 128
    1d0a:	5f e3       	ldi	r21, 0x3F	; 63
    1d0c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d10:	88 23       	and	r24, r24
    1d12:	2c f4       	brge	.+10     	; 0x1d1e <LCD_voidSendChar+0x17c>
		__ticks = 1;
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	9e 83       	std	Y+6, r25	; 0x06
    1d1a:	8d 83       	std	Y+5, r24	; 0x05
    1d1c:	3f c0       	rjmp	.+126    	; 0x1d9c <LCD_voidSendChar+0x1fa>
	else if (__tmp > 65535)
    1d1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d20:	78 85       	ldd	r23, Y+8	; 0x08
    1d22:	89 85       	ldd	r24, Y+9	; 0x09
    1d24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	3f ef       	ldi	r19, 0xFF	; 255
    1d2a:	4f e7       	ldi	r20, 0x7F	; 127
    1d2c:	57 e4       	ldi	r21, 0x47	; 71
    1d2e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d32:	18 16       	cp	r1, r24
    1d34:	4c f5       	brge	.+82     	; 0x1d88 <LCD_voidSendChar+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d36:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d38:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d3e:	20 e0       	ldi	r18, 0x00	; 0
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	40 e2       	ldi	r20, 0x20	; 32
    1d44:	51 e4       	ldi	r21, 0x41	; 65
    1d46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	bc 01       	movw	r22, r24
    1d50:	cd 01       	movw	r24, r26
    1d52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d56:	dc 01       	movw	r26, r24
    1d58:	cb 01       	movw	r24, r22
    1d5a:	9e 83       	std	Y+6, r25	; 0x06
    1d5c:	8d 83       	std	Y+5, r24	; 0x05
    1d5e:	0f c0       	rjmp	.+30     	; 0x1d7e <LCD_voidSendChar+0x1dc>
    1d60:	88 ec       	ldi	r24, 0xC8	; 200
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	9c 83       	std	Y+4, r25	; 0x04
    1d66:	8b 83       	std	Y+3, r24	; 0x03
    1d68:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d6c:	01 97       	sbiw	r24, 0x01	; 1
    1d6e:	f1 f7       	brne	.-4      	; 0x1d6c <LCD_voidSendChar+0x1ca>
    1d70:	9c 83       	std	Y+4, r25	; 0x04
    1d72:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d74:	8d 81       	ldd	r24, Y+5	; 0x05
    1d76:	9e 81       	ldd	r25, Y+6	; 0x06
    1d78:	01 97       	sbiw	r24, 0x01	; 1
    1d7a:	9e 83       	std	Y+6, r25	; 0x06
    1d7c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d80:	9e 81       	ldd	r25, Y+6	; 0x06
    1d82:	00 97       	sbiw	r24, 0x00	; 0
    1d84:	69 f7       	brne	.-38     	; 0x1d60 <LCD_voidSendChar+0x1be>
    1d86:	14 c0       	rjmp	.+40     	; 0x1db0 <LCD_voidSendChar+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d88:	6f 81       	ldd	r22, Y+7	; 0x07
    1d8a:	78 85       	ldd	r23, Y+8	; 0x08
    1d8c:	89 85       	ldd	r24, Y+9	; 0x09
    1d8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d94:	dc 01       	movw	r26, r24
    1d96:	cb 01       	movw	r24, r22
    1d98:	9e 83       	std	Y+6, r25	; 0x06
    1d9a:	8d 83       	std	Y+5, r24	; 0x05
    1d9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1da0:	9a 83       	std	Y+2, r25	; 0x02
    1da2:	89 83       	std	Y+1, r24	; 0x01
    1da4:	89 81       	ldd	r24, Y+1	; 0x01
    1da6:	9a 81       	ldd	r25, Y+2	; 0x02
    1da8:	01 97       	sbiw	r24, 0x01	; 1
    1daa:	f1 f7       	brne	.-4      	; 0x1da8 <LCD_voidSendChar+0x206>
    1dac:	9a 83       	std	Y+2, r25	; 0x02
    1dae:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
}
    1db0:	6d 96       	adiw	r28, 0x1d	; 29
    1db2:	0f b6       	in	r0, 0x3f	; 63
    1db4:	f8 94       	cli
    1db6:	de bf       	out	0x3e, r29	; 62
    1db8:	0f be       	out	0x3f, r0	; 63
    1dba:	cd bf       	out	0x3d, r28	; 61
    1dbc:	cf 91       	pop	r28
    1dbe:	df 91       	pop	r29
    1dc0:	08 95       	ret

00001dc2 <LCD_voidSendString>:

void LCD_voidSendString (u8 *Copy_U8String)
{
    1dc2:	df 93       	push	r29
    1dc4:	cf 93       	push	r28
    1dc6:	cd b7       	in	r28, 0x3d	; 61
    1dc8:	de b7       	in	r29, 0x3e	; 62
    1dca:	60 97       	sbiw	r28, 0x10	; 16
    1dcc:	0f b6       	in	r0, 0x3f	; 63
    1dce:	f8 94       	cli
    1dd0:	de bf       	out	0x3e, r29	; 62
    1dd2:	0f be       	out	0x3f, r0	; 63
    1dd4:	cd bf       	out	0x3d, r28	; 61
    1dd6:	98 8b       	std	Y+16, r25	; 0x10
    1dd8:	8f 87       	std	Y+15, r24	; 0x0f
    1dda:	7c c0       	rjmp	.+248    	; 0x1ed4 <LCD_voidSendString+0x112>
	
	while((*Copy_U8String) !=0)
	{
		LCD_voidSendChar(*Copy_U8String);
    1ddc:	ef 85       	ldd	r30, Y+15	; 0x0f
    1dde:	f8 89       	ldd	r31, Y+16	; 0x10
    1de0:	80 81       	ld	r24, Z
    1de2:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <LCD_voidSendChar>
		Copy_U8String++;
    1de6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1de8:	98 89       	ldd	r25, Y+16	; 0x10
    1dea:	01 96       	adiw	r24, 0x01	; 1
    1dec:	98 8b       	std	Y+16, r25	; 0x10
    1dee:	8f 87       	std	Y+15, r24	; 0x0f
    1df0:	80 e0       	ldi	r24, 0x00	; 0
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	a0 ea       	ldi	r26, 0xA0	; 160
    1df6:	b0 e4       	ldi	r27, 0x40	; 64
    1df8:	8b 87       	std	Y+11, r24	; 0x0b
    1dfa:	9c 87       	std	Y+12, r25	; 0x0c
    1dfc:	ad 87       	std	Y+13, r26	; 0x0d
    1dfe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e00:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e02:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e08:	20 e0       	ldi	r18, 0x00	; 0
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	4a ef       	ldi	r20, 0xFA	; 250
    1e0e:	54 e4       	ldi	r21, 0x44	; 68
    1e10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e14:	dc 01       	movw	r26, r24
    1e16:	cb 01       	movw	r24, r22
    1e18:	8f 83       	std	Y+7, r24	; 0x07
    1e1a:	98 87       	std	Y+8, r25	; 0x08
    1e1c:	a9 87       	std	Y+9, r26	; 0x09
    1e1e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e20:	6f 81       	ldd	r22, Y+7	; 0x07
    1e22:	78 85       	ldd	r23, Y+8	; 0x08
    1e24:	89 85       	ldd	r24, Y+9	; 0x09
    1e26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	40 e8       	ldi	r20, 0x80	; 128
    1e2e:	5f e3       	ldi	r21, 0x3F	; 63
    1e30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e34:	88 23       	and	r24, r24
    1e36:	2c f4       	brge	.+10     	; 0x1e42 <LCD_voidSendString+0x80>
		__ticks = 1;
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	9e 83       	std	Y+6, r25	; 0x06
    1e3e:	8d 83       	std	Y+5, r24	; 0x05
    1e40:	3f c0       	rjmp	.+126    	; 0x1ec0 <LCD_voidSendString+0xfe>
	else if (__tmp > 65535)
    1e42:	6f 81       	ldd	r22, Y+7	; 0x07
    1e44:	78 85       	ldd	r23, Y+8	; 0x08
    1e46:	89 85       	ldd	r24, Y+9	; 0x09
    1e48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e4a:	20 e0       	ldi	r18, 0x00	; 0
    1e4c:	3f ef       	ldi	r19, 0xFF	; 255
    1e4e:	4f e7       	ldi	r20, 0x7F	; 127
    1e50:	57 e4       	ldi	r21, 0x47	; 71
    1e52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e56:	18 16       	cp	r1, r24
    1e58:	4c f5       	brge	.+82     	; 0x1eac <LCD_voidSendString+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e60:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e62:	20 e0       	ldi	r18, 0x00	; 0
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	40 e2       	ldi	r20, 0x20	; 32
    1e68:	51 e4       	ldi	r21, 0x41	; 65
    1e6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e6e:	dc 01       	movw	r26, r24
    1e70:	cb 01       	movw	r24, r22
    1e72:	bc 01       	movw	r22, r24
    1e74:	cd 01       	movw	r24, r26
    1e76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	cb 01       	movw	r24, r22
    1e7e:	9e 83       	std	Y+6, r25	; 0x06
    1e80:	8d 83       	std	Y+5, r24	; 0x05
    1e82:	0f c0       	rjmp	.+30     	; 0x1ea2 <LCD_voidSendString+0xe0>
    1e84:	88 ec       	ldi	r24, 0xC8	; 200
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	9c 83       	std	Y+4, r25	; 0x04
    1e8a:	8b 83       	std	Y+3, r24	; 0x03
    1e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e90:	01 97       	sbiw	r24, 0x01	; 1
    1e92:	f1 f7       	brne	.-4      	; 0x1e90 <LCD_voidSendString+0xce>
    1e94:	9c 83       	std	Y+4, r25	; 0x04
    1e96:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e98:	8d 81       	ldd	r24, Y+5	; 0x05
    1e9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e9c:	01 97       	sbiw	r24, 0x01	; 1
    1e9e:	9e 83       	std	Y+6, r25	; 0x06
    1ea0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ea2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea6:	00 97       	sbiw	r24, 0x00	; 0
    1ea8:	69 f7       	brne	.-38     	; 0x1e84 <LCD_voidSendString+0xc2>
    1eaa:	14 c0       	rjmp	.+40     	; 0x1ed4 <LCD_voidSendString+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eac:	6f 81       	ldd	r22, Y+7	; 0x07
    1eae:	78 85       	ldd	r23, Y+8	; 0x08
    1eb0:	89 85       	ldd	r24, Y+9	; 0x09
    1eb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb8:	dc 01       	movw	r26, r24
    1eba:	cb 01       	movw	r24, r22
    1ebc:	9e 83       	std	Y+6, r25	; 0x06
    1ebe:	8d 83       	std	Y+5, r24	; 0x05
    1ec0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec4:	9a 83       	std	Y+2, r25	; 0x02
    1ec6:	89 83       	std	Y+1, r24	; 0x01
    1ec8:	89 81       	ldd	r24, Y+1	; 0x01
    1eca:	9a 81       	ldd	r25, Y+2	; 0x02
    1ecc:	01 97       	sbiw	r24, 0x01	; 1
    1ece:	f1 f7       	brne	.-4      	; 0x1ecc <LCD_voidSendString+0x10a>
    1ed0:	9a 83       	std	Y+2, r25	; 0x02
    1ed2:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidSendString (u8 *Copy_U8String)
{
	
	while((*Copy_U8String) !=0)
    1ed4:	ef 85       	ldd	r30, Y+15	; 0x0f
    1ed6:	f8 89       	ldd	r31, Y+16	; 0x10
    1ed8:	80 81       	ld	r24, Z
    1eda:	88 23       	and	r24, r24
    1edc:	09 f0       	breq	.+2      	; 0x1ee0 <LCD_voidSendString+0x11e>
    1ede:	7e cf       	rjmp	.-260    	; 0x1ddc <LCD_voidSendString+0x1a>
		LCD_voidSendChar(*Copy_U8String);
		Copy_U8String++;
		_delay_ms(5);
	}
		
}
    1ee0:	60 96       	adiw	r28, 0x10	; 16
    1ee2:	0f b6       	in	r0, 0x3f	; 63
    1ee4:	f8 94       	cli
    1ee6:	de bf       	out	0x3e, r29	; 62
    1ee8:	0f be       	out	0x3f, r0	; 63
    1eea:	cd bf       	out	0x3d, r28	; 61
    1eec:	cf 91       	pop	r28
    1eee:	df 91       	pop	r29
    1ef0:	08 95       	ret

00001ef2 <LCD_voidSetLocation>:
void LCD_voidSetLocation (u8 Copy_U8LineNum , u8 Copy_U8CharNum)
{
    1ef2:	df 93       	push	r29
    1ef4:	cf 93       	push	r28
    1ef6:	00 d0       	rcall	.+0      	; 0x1ef8 <LCD_voidSetLocation+0x6>
    1ef8:	00 d0       	rcall	.+0      	; 0x1efa <LCD_voidSetLocation+0x8>
    1efa:	cd b7       	in	r28, 0x3d	; 61
    1efc:	de b7       	in	r29, 0x3e	; 62
    1efe:	89 83       	std	Y+1, r24	; 0x01
    1f00:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_U8LineNum)
    1f02:	89 81       	ldd	r24, Y+1	; 0x01
    1f04:	28 2f       	mov	r18, r24
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	3c 83       	std	Y+4, r19	; 0x04
    1f0a:	2b 83       	std	Y+3, r18	; 0x03
    1f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f10:	81 30       	cpi	r24, 0x01	; 1
    1f12:	91 05       	cpc	r25, r1
    1f14:	31 f0       	breq	.+12     	; 0x1f22 <LCD_voidSetLocation+0x30>
    1f16:	2b 81       	ldd	r18, Y+3	; 0x03
    1f18:	3c 81       	ldd	r19, Y+4	; 0x04
    1f1a:	22 30       	cpi	r18, 0x02	; 2
    1f1c:	31 05       	cpc	r19, r1
    1f1e:	31 f0       	breq	.+12     	; 0x1f2c <LCD_voidSetLocation+0x3a>
    1f20:	09 c0       	rjmp	.+18     	; 0x1f34 <LCD_voidSetLocation+0x42>
	{
		case LCD_U8_LINE1 : LCD_voidSendCommand(0x80+Copy_U8CharNum); break ;
    1f22:	8a 81       	ldd	r24, Y+2	; 0x02
    1f24:	80 58       	subi	r24, 0x80	; 128
    1f26:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <LCD_voidSendCommand>
    1f2a:	04 c0       	rjmp	.+8      	; 0x1f34 <LCD_voidSetLocation+0x42>
		
		case LCD_U8_LINE2 : LCD_voidSendCommand(0xc0+Copy_U8CharNum); break ;
    1f2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2e:	80 54       	subi	r24, 0x40	; 64
    1f30:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <LCD_voidSendCommand>
	}
}
    1f34:	0f 90       	pop	r0
    1f36:	0f 90       	pop	r0
    1f38:	0f 90       	pop	r0
    1f3a:	0f 90       	pop	r0
    1f3c:	cf 91       	pop	r28
    1f3e:	df 91       	pop	r29
    1f40:	08 95       	ret

00001f42 <TIMER1_voidFPWM>:
#include <avr/interrupt.h>
#include "DIO_Interface.h"
#include "SERVOMOTOR_Interface.h"

void TIMER1_voidFPWM(void)
{
    1f42:	df 93       	push	r29
    1f44:	cf 93       	push	r28
    1f46:	cd b7       	in	r28, 0x3d	; 61
    1f48:	de b7       	in	r29, 0x3e	; 62
	/* SELECT FAST PWM */
	CLR_BIT(TCCR1A, WGM10);
    1f4a:	af e4       	ldi	r26, 0x4F	; 79
    1f4c:	b0 e0       	ldi	r27, 0x00	; 0
    1f4e:	ef e4       	ldi	r30, 0x4F	; 79
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	80 81       	ld	r24, Z
    1f54:	8e 7f       	andi	r24, 0xFE	; 254
    1f56:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, WGM11);
    1f58:	af e4       	ldi	r26, 0x4F	; 79
    1f5a:	b0 e0       	ldi	r27, 0x00	; 0
    1f5c:	ef e4       	ldi	r30, 0x4F	; 79
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	80 81       	ld	r24, Z
    1f62:	82 60       	ori	r24, 0x02	; 2
    1f64:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM12);
    1f66:	ae e4       	ldi	r26, 0x4E	; 78
    1f68:	b0 e0       	ldi	r27, 0x00	; 0
    1f6a:	ee e4       	ldi	r30, 0x4E	; 78
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	80 81       	ld	r24, Z
    1f70:	88 60       	ori	r24, 0x08	; 8
    1f72:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM13);
    1f74:	ae e4       	ldi	r26, 0x4E	; 78
    1f76:	b0 e0       	ldi	r27, 0x00	; 0
    1f78:	ee e4       	ldi	r30, 0x4E	; 78
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	80 81       	ld	r24, Z
    1f7e:	80 61       	ori	r24, 0x10	; 16
    1f80:	8c 93       	st	X, r24

	/* CLEAR OC1A */
	CLR_BIT(TCCR1A, COM1A0);
    1f82:	af e4       	ldi	r26, 0x4F	; 79
    1f84:	b0 e0       	ldi	r27, 0x00	; 0
    1f86:	ef e4       	ldi	r30, 0x4F	; 79
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	80 81       	ld	r24, Z
    1f8c:	8f 7b       	andi	r24, 0xBF	; 191
    1f8e:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, COM1A1);
    1f90:	af e4       	ldi	r26, 0x4F	; 79
    1f92:	b0 e0       	ldi	r27, 0x00	; 0
    1f94:	ef e4       	ldi	r30, 0x4F	; 79
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	80 81       	ld	r24, Z
    1f9a:	80 68       	ori	r24, 0x80	; 128
    1f9c:	8c 93       	st	X, r24

	/* ICR1 */
	ICR1 = 19999;
    1f9e:	e6 e4       	ldi	r30, 0x46	; 70
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	8f e1       	ldi	r24, 0x1F	; 31
    1fa4:	9e e4       	ldi	r25, 0x4E	; 78
    1fa6:	91 83       	std	Z+1, r25	; 0x01
    1fa8:	80 83       	st	Z, r24

	/* CLK/8 */
	CLR_BIT(TCCR1B, CS10);
    1faa:	ae e4       	ldi	r26, 0x4E	; 78
    1fac:	b0 e0       	ldi	r27, 0x00	; 0
    1fae:	ee e4       	ldi	r30, 0x4E	; 78
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	80 81       	ld	r24, Z
    1fb4:	8e 7f       	andi	r24, 0xFE	; 254
    1fb6:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS11);
    1fb8:	ae e4       	ldi	r26, 0x4E	; 78
    1fba:	b0 e0       	ldi	r27, 0x00	; 0
    1fbc:	ee e4       	ldi	r30, 0x4E	; 78
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	80 81       	ld	r24, Z
    1fc2:	82 60       	ori	r24, 0x02	; 2
    1fc4:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS12);
    1fc6:	ae e4       	ldi	r26, 0x4E	; 78
    1fc8:	b0 e0       	ldi	r27, 0x00	; 0
    1fca:	ee e4       	ldi	r30, 0x4E	; 78
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	80 81       	ld	r24, Z
    1fd0:	8b 7f       	andi	r24, 0xFB	; 251
    1fd2:	8c 93       	st	X, r24
}
    1fd4:	cf 91       	pop	r28
    1fd6:	df 91       	pop	r29
    1fd8:	08 95       	ret

00001fda <SERVO_voidSetAngle>:

void SERVO_voidSetAngle(u8 copy_u8Angle)
{
    1fda:	df 93       	push	r29
    1fdc:	cf 93       	push	r28
    1fde:	0f 92       	push	r0
    1fe0:	cd b7       	in	r28, 0x3d	; 61
    1fe2:	de b7       	in	r29, 0x3e	; 62
    1fe4:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = ((50* copy_u8Angle)+8991)/9;
    1fe6:	ea e4       	ldi	r30, 0x4A	; 74
    1fe8:	f0 e0       	ldi	r31, 0x00	; 0
    1fea:	89 81       	ldd	r24, Y+1	; 0x01
    1fec:	28 2f       	mov	r18, r24
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	82 e3       	ldi	r24, 0x32	; 50
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	ac 01       	movw	r20, r24
    1ff6:	24 9f       	mul	r18, r20
    1ff8:	c0 01       	movw	r24, r0
    1ffa:	25 9f       	mul	r18, r21
    1ffc:	90 0d       	add	r25, r0
    1ffe:	34 9f       	mul	r19, r20
    2000:	90 0d       	add	r25, r0
    2002:	11 24       	eor	r1, r1
    2004:	81 5e       	subi	r24, 0xE1	; 225
    2006:	9c 4d       	sbci	r25, 0xDC	; 220
    2008:	29 e0       	ldi	r18, 0x09	; 9
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	b9 01       	movw	r22, r18
    200e:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <__divmodhi4>
    2012:	cb 01       	movw	r24, r22
    2014:	91 83       	std	Z+1, r25	; 0x01
    2016:	80 83       	st	Z, r24
}
    2018:	0f 90       	pop	r0
    201a:	cf 91       	pop	r28
    201c:	df 91       	pop	r29
    201e:	08 95       	ret

00002020 <TWI_VidMasterInit>:
#include "BIT_MATH.h"
#include <avr/io.h>
#include "TWI.h"

void TWI_VidMasterInit(void)
{
    2020:	df 93       	push	r29
    2022:	cf 93       	push	r28
    2024:	cd b7       	in	r28, 0x3d	; 61
    2026:	de b7       	in	r29, 0x3e	; 62
	/*Frequancy->200KHZ*/
	TWBR = 12;
    2028:	e0 e2       	ldi	r30, 0x20	; 32
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	8c e0       	ldi	r24, 0x0C	; 12
    202e:	80 83       	st	Z, r24
	/*Prescaller value->1*/
	CLR_BIT(TWSR,TWPS0);
    2030:	a1 e2       	ldi	r26, 0x21	; 33
    2032:	b0 e0       	ldi	r27, 0x00	; 0
    2034:	e1 e2       	ldi	r30, 0x21	; 33
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	80 81       	ld	r24, Z
    203a:	8e 7f       	andi	r24, 0xFE	; 254
    203c:	8c 93       	st	X, r24
	CLR_BIT(TWSR,TWPS1);
    203e:	a1 e2       	ldi	r26, 0x21	; 33
    2040:	b0 e0       	ldi	r27, 0x00	; 0
    2042:	e1 e2       	ldi	r30, 0x21	; 33
    2044:	f0 e0       	ldi	r31, 0x00	; 0
    2046:	80 81       	ld	r24, Z
    2048:	8d 7f       	andi	r24, 0xFD	; 253
    204a:	8c 93       	st	X, r24
	/*Enable I2C*/
	SET_BIT(TWCR,TWEN);
    204c:	a6 e5       	ldi	r26, 0x56	; 86
    204e:	b0 e0       	ldi	r27, 0x00	; 0
    2050:	e6 e5       	ldi	r30, 0x56	; 86
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	80 81       	ld	r24, Z
    2056:	84 60       	ori	r24, 0x04	; 4
    2058:	8c 93       	st	X, r24
}
    205a:	cf 91       	pop	r28
    205c:	df 91       	pop	r29
    205e:	08 95       	ret

00002060 <TWI_VidSlaveInit>:
void TWI_VidSlaveInit(u8 Copy_u8Address)
{
    2060:	df 93       	push	r29
    2062:	cf 93       	push	r28
    2064:	0f 92       	push	r0
    2066:	cd b7       	in	r28, 0x3d	; 61
    2068:	de b7       	in	r29, 0x3e	; 62
    206a:	89 83       	std	Y+1, r24	; 0x01
	/*Enable ACK */
	SET_BIT(TWCR,TWEA);
    206c:	a6 e5       	ldi	r26, 0x56	; 86
    206e:	b0 e0       	ldi	r27, 0x00	; 0
    2070:	e6 e5       	ldi	r30, 0x56	; 86
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	80 81       	ld	r24, Z
    2076:	80 64       	ori	r24, 0x40	; 64
    2078:	8c 93       	st	X, r24
	/*Write Address*/
	TWAR = Copy_u8Address<<1;
    207a:	e2 e2       	ldi	r30, 0x22	; 34
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	89 81       	ldd	r24, Y+1	; 0x01
    2080:	88 0f       	add	r24, r24
    2082:	80 83       	st	Z, r24
	/*Enable I2C*/
	SET_BIT(TWCR,TWEN);
    2084:	a6 e5       	ldi	r26, 0x56	; 86
    2086:	b0 e0       	ldi	r27, 0x00	; 0
    2088:	e6 e5       	ldi	r30, 0x56	; 86
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	80 81       	ld	r24, Z
    208e:	84 60       	ori	r24, 0x04	; 4
    2090:	8c 93       	st	X, r24
}
    2092:	0f 90       	pop	r0
    2094:	cf 91       	pop	r28
    2096:	df 91       	pop	r29
    2098:	08 95       	ret

0000209a <TWI_VidStartCondition>:


void TWI_VidStartCondition(void)
{
    209a:	df 93       	push	r29
    209c:	cf 93       	push	r28
    209e:	cd b7       	in	r28, 0x3d	; 61
    20a0:	de b7       	in	r29, 0x3e	; 62
	/*Clear Flag+ start condition*/
	SET_BIT(TWCR,TWSTA);
    20a2:	a6 e5       	ldi	r26, 0x56	; 86
    20a4:	b0 e0       	ldi	r27, 0x00	; 0
    20a6:	e6 e5       	ldi	r30, 0x56	; 86
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	80 81       	ld	r24, Z
    20ac:	80 62       	ori	r24, 0x20	; 32
    20ae:	8c 93       	st	X, r24
	SET_BIT(TWCR,TWINT);
    20b0:	a6 e5       	ldi	r26, 0x56	; 86
    20b2:	b0 e0       	ldi	r27, 0x00	; 0
    20b4:	e6 e5       	ldi	r30, 0x56	; 86
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	80 68       	ori	r24, 0x80	; 128
    20bc:	8c 93       	st	X, r24
	/*wait flag*/
	while(GET_BIT(TWCR,TWINT)==0);
    20be:	e6 e5       	ldi	r30, 0x56	; 86
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	80 81       	ld	r24, Z
    20c4:	88 23       	and	r24, r24
    20c6:	dc f7       	brge	.-10     	; 0x20be <TWI_VidStartCondition+0x24>
	/*Check ACK"status code"0x08*/
}
    20c8:	cf 91       	pop	r28
    20ca:	df 91       	pop	r29
    20cc:	08 95       	ret

000020ce <TWI_VidReStartCondition>:
void TWI_VidReStartCondition(void)
{
    20ce:	df 93       	push	r29
    20d0:	cf 93       	push	r28
    20d2:	cd b7       	in	r28, 0x3d	; 61
    20d4:	de b7       	in	r29, 0x3e	; 62
	/* Clear Flag + start condition */
	SET_BIT(TWCR,TWINT);
    20d6:	a6 e5       	ldi	r26, 0x56	; 86
    20d8:	b0 e0       	ldi	r27, 0x00	; 0
    20da:	e6 e5       	ldi	r30, 0x56	; 86
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	80 81       	ld	r24, Z
    20e0:	80 68       	ori	r24, 0x80	; 128
    20e2:	8c 93       	st	X, r24
	SET_BIT(TWCR,TWSTA);
    20e4:	a6 e5       	ldi	r26, 0x56	; 86
    20e6:	b0 e0       	ldi	r27, 0x00	; 0
    20e8:	e6 e5       	ldi	r30, 0x56	; 86
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	80 81       	ld	r24, Z
    20ee:	80 62       	ori	r24, 0x20	; 32
    20f0:	8c 93       	st	X, r24
	/* wait flag */
	while(!GET_BIT(TWCR,TWINT));
    20f2:	e6 e5       	ldi	r30, 0x56	; 86
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	80 81       	ld	r24, Z
    20f8:	88 23       	and	r24, r24
    20fa:	dc f7       	brge	.-10     	; 0x20f2 <TWI_VidReStartCondition+0x24>

}
    20fc:	cf 91       	pop	r28
    20fe:	df 91       	pop	r29
    2100:	08 95       	ret

00002102 <TWI_VidStopCondition>:
void TWI_VidStopCondition(void)
{
    2102:	df 93       	push	r29
    2104:	cf 93       	push	r28
    2106:	cd b7       	in	r28, 0x3d	; 61
    2108:	de b7       	in	r29, 0x3e	; 62
	/*Clear Flag+ Stop condition*/
	SET_BIT(TWCR,TWSTO);
    210a:	a6 e5       	ldi	r26, 0x56	; 86
    210c:	b0 e0       	ldi	r27, 0x00	; 0
    210e:	e6 e5       	ldi	r30, 0x56	; 86
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	80 81       	ld	r24, Z
    2114:	80 61       	ori	r24, 0x10	; 16
    2116:	8c 93       	st	X, r24
	SET_BIT(TWCR,TWINT);
    2118:	a6 e5       	ldi	r26, 0x56	; 86
    211a:	b0 e0       	ldi	r27, 0x00	; 0
    211c:	e6 e5       	ldi	r30, 0x56	; 86
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
    2122:	80 68       	ori	r24, 0x80	; 128
    2124:	8c 93       	st	X, r24
}
    2126:	cf 91       	pop	r28
    2128:	df 91       	pop	r29
    212a:	08 95       	ret

0000212c <TWI_VidSlaveAddWrite>:


void TWI_VidSlaveAddWrite(u8 Copy_u8SlaveAdd)
{
    212c:	df 93       	push	r29
    212e:	cf 93       	push	r28
    2130:	0f 92       	push	r0
    2132:	cd b7       	in	r28, 0x3d	; 61
    2134:	de b7       	in	r29, 0x3e	; 62
    2136:	89 83       	std	Y+1, r24	; 0x01
	/*write slave Address & 0 in TWDR*/
	TWDR=Copy_u8SlaveAdd<<1;
    2138:	e3 e2       	ldi	r30, 0x23	; 35
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	89 81       	ldd	r24, Y+1	; 0x01
    213e:	88 0f       	add	r24, r24
    2140:	80 83       	st	Z, r24
	CLR_BIT(TWDR,0);
    2142:	a3 e2       	ldi	r26, 0x23	; 35
    2144:	b0 e0       	ldi	r27, 0x00	; 0
    2146:	e3 e2       	ldi	r30, 0x23	; 35
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	80 81       	ld	r24, Z
    214c:	8e 7f       	andi	r24, 0xFE	; 254
    214e:	8c 93       	st	X, r24
	/*Clear Start Condition*/
	CLR_BIT(TWCR,TWSTA);
    2150:	a6 e5       	ldi	r26, 0x56	; 86
    2152:	b0 e0       	ldi	r27, 0x00	; 0
    2154:	e6 e5       	ldi	r30, 0x56	; 86
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	80 81       	ld	r24, Z
    215a:	8f 7d       	andi	r24, 0xDF	; 223
    215c:	8c 93       	st	X, r24
	/*Clear Flag*/
	SET_BIT(TWCR,TWINT);
    215e:	a6 e5       	ldi	r26, 0x56	; 86
    2160:	b0 e0       	ldi	r27, 0x00	; 0
    2162:	e6 e5       	ldi	r30, 0x56	; 86
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	80 81       	ld	r24, Z
    2168:	80 68       	ori	r24, 0x80	; 128
    216a:	8c 93       	st	X, r24
	/*Check ACK"status code"0x18*/
	/*wait flag*/
	while(GET_BIT(TWCR,TWINT)==0);
    216c:	e6 e5       	ldi	r30, 0x56	; 86
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	80 81       	ld	r24, Z
    2172:	88 23       	and	r24, r24
    2174:	dc f7       	brge	.-10     	; 0x216c <TWI_VidSlaveAddWrite+0x40>
}
    2176:	0f 90       	pop	r0
    2178:	cf 91       	pop	r28
    217a:	df 91       	pop	r29
    217c:	08 95       	ret

0000217e <TWI_VidSlaveAddRead>:

void TWI_VidSlaveAddRead(u8 Copy_u8SlaveAdd)
{
    217e:	df 93       	push	r29
    2180:	cf 93       	push	r28
    2182:	0f 92       	push	r0
    2184:	cd b7       	in	r28, 0x3d	; 61
    2186:	de b7       	in	r29, 0x3e	; 62
    2188:	89 83       	std	Y+1, r24	; 0x01
	/*write slave Address & 1 in TWDR*/
	TWDR = Copy_u8SlaveAdd<<1;
    218a:	e3 e2       	ldi	r30, 0x23	; 35
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	89 81       	ldd	r24, Y+1	; 0x01
    2190:	88 0f       	add	r24, r24
    2192:	80 83       	st	Z, r24
	SET_BIT(TWDR,0);
    2194:	a3 e2       	ldi	r26, 0x23	; 35
    2196:	b0 e0       	ldi	r27, 0x00	; 0
    2198:	e3 e2       	ldi	r30, 0x23	; 35
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	80 81       	ld	r24, Z
    219e:	81 60       	ori	r24, 0x01	; 1
    21a0:	8c 93       	st	X, r24
	/*Clear Start Condition*/
	CLR_BIT(TWCR,TWSTA);
    21a2:	a6 e5       	ldi	r26, 0x56	; 86
    21a4:	b0 e0       	ldi	r27, 0x00	; 0
    21a6:	e6 e5       	ldi	r30, 0x56	; 86
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	80 81       	ld	r24, Z
    21ac:	8f 7d       	andi	r24, 0xDF	; 223
    21ae:	8c 93       	st	X, r24
	/*Clear Flag*/
	SET_BIT(TWCR,TWINT);
    21b0:	a6 e5       	ldi	r26, 0x56	; 86
    21b2:	b0 e0       	ldi	r27, 0x00	; 0
    21b4:	e6 e5       	ldi	r30, 0x56	; 86
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	80 81       	ld	r24, Z
    21ba:	80 68       	ori	r24, 0x80	; 128
    21bc:	8c 93       	st	X, r24
	/*Check ACK"status code"0x40*/
	while(GET_BIT(TWCR,TWINT)==0);
    21be:	e6 e5       	ldi	r30, 0x56	; 86
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	88 23       	and	r24, r24
    21c6:	dc f7       	brge	.-10     	; 0x21be <TWI_VidSlaveAddRead+0x40>
}
    21c8:	0f 90       	pop	r0
    21ca:	cf 91       	pop	r28
    21cc:	df 91       	pop	r29
    21ce:	08 95       	ret

000021d0 <TWI_VidMasterSendData>:


void TWI_VidMasterSendData(u8 Copy_u8Data)
{
    21d0:	df 93       	push	r29
    21d2:	cf 93       	push	r28
    21d4:	0f 92       	push	r0
    21d6:	cd b7       	in	r28, 0x3d	; 61
    21d8:	de b7       	in	r29, 0x3e	; 62
    21da:	89 83       	std	Y+1, r24	; 0x01
	/*write Data in TWDR*/
	TWDR = Copy_u8Data;
    21dc:	e3 e2       	ldi	r30, 0x23	; 35
    21de:	f0 e0       	ldi	r31, 0x00	; 0
    21e0:	89 81       	ldd	r24, Y+1	; 0x01
    21e2:	80 83       	st	Z, r24
	/*Clear Flag*/
	SET_BIT(TWCR,TWINT);
    21e4:	a6 e5       	ldi	r26, 0x56	; 86
    21e6:	b0 e0       	ldi	r27, 0x00	; 0
    21e8:	e6 e5       	ldi	r30, 0x56	; 86
    21ea:	f0 e0       	ldi	r31, 0x00	; 0
    21ec:	80 81       	ld	r24, Z
    21ee:	80 68       	ori	r24, 0x80	; 128
    21f0:	8c 93       	st	X, r24
	/*Check ACK"status code"0x28*/
	while(!GET_BIT(TWCR,TWINT));
    21f2:	e6 e5       	ldi	r30, 0x56	; 86
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	80 81       	ld	r24, Z
    21f8:	88 23       	and	r24, r24
    21fa:	dc f7       	brge	.-10     	; 0x21f2 <TWI_VidMasterSendData+0x22>
}
    21fc:	0f 90       	pop	r0
    21fe:	cf 91       	pop	r28
    2200:	df 91       	pop	r29
    2202:	08 95       	ret

00002204 <TWI_VidSlaveReadData>:

u8 TWI_VidSlaveReadData(void)
{
    2204:	df 93       	push	r29
    2206:	cf 93       	push	r28
    2208:	cd b7       	in	r28, 0x3d	; 61
    220a:	de b7       	in	r29, 0x3e	; 62
	//Wait to receive own slave address
	while((TWSR & 0xf8)!=0x60);//0B1111 1000
    220c:	e1 e2       	ldi	r30, 0x21	; 33
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	80 81       	ld	r24, Z
    2212:	88 2f       	mov	r24, r24
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	88 7f       	andi	r24, 0xF8	; 248
    2218:	90 70       	andi	r25, 0x00	; 0
    221a:	80 36       	cpi	r24, 0x60	; 96
    221c:	91 05       	cpc	r25, r1
    221e:	b1 f7       	brne	.-20     	; 0x220c <TWI_VidSlaveReadData+0x8>
	/*Clear flag*/
	SET_BIT(TWCR,TWINT);
    2220:	a6 e5       	ldi	r26, 0x56	; 86
    2222:	b0 e0       	ldi	r27, 0x00	; 0
    2224:	e6 e5       	ldi	r30, 0x56	; 86
    2226:	f0 e0       	ldi	r31, 0x00	; 0
    2228:	80 81       	ld	r24, Z
    222a:	80 68       	ori	r24, 0x80	; 128
    222c:	8c 93       	st	X, r24
	//Wait to receive correct message
	while((TWSR & 0xf8)!=0x80);
    222e:	e1 e2       	ldi	r30, 0x21	; 33
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	80 81       	ld	r24, Z
    2234:	88 2f       	mov	r24, r24
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	88 7f       	andi	r24, 0xF8	; 248
    223a:	90 70       	andi	r25, 0x00	; 0
    223c:	80 38       	cpi	r24, 0x80	; 128
    223e:	91 05       	cpc	r25, r1
    2240:	b1 f7       	brne	.-20     	; 0x222e <TWI_VidSlaveReadData+0x2a>
	/*Check ACK"status code"0x50*/
	/* Return Data */
	return TWDR;
    2242:	e3 e2       	ldi	r30, 0x23	; 35
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	80 81       	ld	r24, Z
}
    2248:	cf 91       	pop	r28
    224a:	df 91       	pop	r29
    224c:	08 95       	ret

0000224e <TWI_u8MasterRecieveData>:

u8 TWI_u8MasterRecieveData(void)
{
    224e:	df 93       	push	r29
    2250:	cf 93       	push	r28
    2252:	cd b7       	in	r28, 0x3d	; 61
    2254:	de b7       	in	r29, 0x3e	; 62
	/* Clear Flag */
	SET_BIT(TWCR, TWINT);
    2256:	a6 e5       	ldi	r26, 0x56	; 86
    2258:	b0 e0       	ldi	r27, 0x00	; 0
    225a:	e6 e5       	ldi	r30, 0x56	; 86
    225c:	f0 e0       	ldi	r31, 0x00	; 0
    225e:	80 81       	ld	r24, Z
    2260:	80 68       	ori	r24, 0x80	; 128
    2262:	8c 93       	st	X, r24
	/* Check ACK"status code"0x28 */
	while(!GET_BIT(TWCR, TWINT));
    2264:	e6 e5       	ldi	r30, 0x56	; 86
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	80 81       	ld	r24, Z
    226a:	88 23       	and	r24, r24
    226c:	dc f7       	brge	.-10     	; 0x2264 <TWI_u8MasterRecieveData+0x16>
	return TWDR;
    226e:	e3 e2       	ldi	r30, 0x23	; 35
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	80 81       	ld	r24, Z
}
    2274:	cf 91       	pop	r28
    2276:	df 91       	pop	r29
    2278:	08 95       	ret

0000227a <UART_voidInit>:

#include <avr/io.h>
#include "UART.h"

void UART_voidInit (void)
{
    227a:	df 93       	push	r29
    227c:	cf 93       	push	r28
    227e:	00 d0       	rcall	.+0      	; 0x2280 <UART_voidInit+0x6>
    2280:	0f 92       	push	r0
    2282:	cd b7       	in	r28, 0x3d	; 61
    2284:	de b7       	in	r29, 0x3e	; 62
	u16 Local_u16BaudRate = 51 ;
    2286:	83 e3       	ldi	r24, 0x33	; 51
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	9b 83       	std	Y+3, r25	; 0x03
    228c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8UCSRCValue = 0b10000000 ;
    228e:	80 e8       	ldi	r24, 0x80	; 128
    2290:	89 83       	std	Y+1, r24	; 0x01

	/* 1- Select Baud Rate = 9600 ==> UBRRL & UBRRH = 51 */
	UBRRL = (u8) Local_u16BaudRate ;
    2292:	e9 e2       	ldi	r30, 0x29	; 41
    2294:	f0 e0       	ldi	r31, 0x00	; 0
    2296:	8a 81       	ldd	r24, Y+2	; 0x02
    2298:	80 83       	st	Z, r24
	UBRRH = (u8) (Local_u16BaudRate >> 8);
    229a:	e0 e4       	ldi	r30, 0x40	; 64
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	8a 81       	ldd	r24, Y+2	; 0x02
    22a0:	9b 81       	ldd	r25, Y+3	; 0x03
    22a2:	89 2f       	mov	r24, r25
    22a4:	99 27       	eor	r25, r25
    22a6:	80 83       	st	Z, r24

	/* 2- Select Normal Speed */
	CLR_BIT(UCSRA , U2X);
    22a8:	ab e2       	ldi	r26, 0x2B	; 43
    22aa:	b0 e0       	ldi	r27, 0x00	; 0
    22ac:	eb e2       	ldi	r30, 0x2B	; 43
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	80 81       	ld	r24, Z
    22b2:	8d 7f       	andi	r24, 0xFD	; 253
    22b4:	8c 93       	st	X, r24

	/* 3- Disable Multi-processor Communication Mode */
	CLR_BIT(UCSRA , MPCM);
    22b6:	ab e2       	ldi	r26, 0x2B	; 43
    22b8:	b0 e0       	ldi	r27, 0x00	; 0
    22ba:	eb e2       	ldi	r30, 0x2B	; 43
    22bc:	f0 e0       	ldi	r31, 0x00	; 0
    22be:	80 81       	ld	r24, Z
    22c0:	8e 7f       	andi	r24, 0xFE	; 254
    22c2:	8c 93       	st	X, r24

	/* 4- Receiver and Transmitter Enable */
	SET_BIT(UCSRB , RXEN);
    22c4:	aa e2       	ldi	r26, 0x2A	; 42
    22c6:	b0 e0       	ldi	r27, 0x00	; 0
    22c8:	ea e2       	ldi	r30, 0x2A	; 42
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	80 81       	ld	r24, Z
    22ce:	80 61       	ori	r24, 0x10	; 16
    22d0:	8c 93       	st	X, r24
	SET_BIT(UCSRB , TXEN);
    22d2:	aa e2       	ldi	r26, 0x2A	; 42
    22d4:	b0 e0       	ldi	r27, 0x00	; 0
    22d6:	ea e2       	ldi	r30, 0x2A	; 42
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	80 81       	ld	r24, Z
    22dc:	88 60       	ori	r24, 0x08	; 8
    22de:	8c 93       	st	X, r24

	/* 5- Select 8 bits Data */
	CLR_BIT(UCSRB , UCSZ2);
    22e0:	aa e2       	ldi	r26, 0x2A	; 42
    22e2:	b0 e0       	ldi	r27, 0x00	; 0
    22e4:	ea e2       	ldi	r30, 0x2A	; 42
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	80 81       	ld	r24, Z
    22ea:	8b 7f       	andi	r24, 0xFB	; 251
    22ec:	8c 93       	st	X, r24
	SET_BIT(Local_u8UCSRCValue , UCSZ0);
    22ee:	89 81       	ldd	r24, Y+1	; 0x01
    22f0:	82 60       	ori	r24, 0x02	; 2
    22f2:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8UCSRCValue , UCSZ1);
    22f4:	89 81       	ldd	r24, Y+1	; 0x01
    22f6:	84 60       	ori	r24, 0x04	; 4
    22f8:	89 83       	std	Y+1, r24	; 0x01

	/* 6- Select Asynchronous Mode */
	CLR_BIT(Local_u8UCSRCValue , UMSEL);
    22fa:	89 81       	ldd	r24, Y+1	; 0x01
    22fc:	8f 7b       	andi	r24, 0xBF	; 191
    22fe:	89 83       	std	Y+1, r24	; 0x01

	/* 7- Disable Parity Mode */
	CLR_BIT(Local_u8UCSRCValue , UPM0);
    2300:	89 81       	ldd	r24, Y+1	; 0x01
    2302:	8f 7e       	andi	r24, 0xEF	; 239
    2304:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_u8UCSRCValue , UPM1);
    2306:	89 81       	ldd	r24, Y+1	; 0x01
    2308:	8f 7d       	andi	r24, 0xDF	; 223
    230a:	89 83       	std	Y+1, r24	; 0x01

	/* 8- Select 2 Stop Bit  */
	SET_BIT(Local_u8UCSRCValue , USBS);
    230c:	89 81       	ldd	r24, Y+1	; 0x01
    230e:	88 60       	ori	r24, 0x08	; 8
    2310:	89 83       	std	Y+1, r24	; 0x01

	/* 9- Update The UCSRC Value */
	UCSRC = Local_u8UCSRCValue ;
    2312:	e0 e4       	ldi	r30, 0x40	; 64
    2314:	f0 e0       	ldi	r31, 0x00	; 0
    2316:	89 81       	ldd	r24, Y+1	; 0x01
    2318:	80 83       	st	Z, r24
}
    231a:	0f 90       	pop	r0
    231c:	0f 90       	pop	r0
    231e:	0f 90       	pop	r0
    2320:	cf 91       	pop	r28
    2322:	df 91       	pop	r29
    2324:	08 95       	ret

00002326 <UART_voidSendData>:

void UART_voidSendData 	(u8 Copy_u8Data)
{
    2326:	df 93       	push	r29
    2328:	cf 93       	push	r28
    232a:	0f 92       	push	r0
    232c:	cd b7       	in	r28, 0x3d	; 61
    232e:	de b7       	in	r29, 0x3e	; 62
    2330:	89 83       	std	Y+1, r24	; 0x01
	/*Wait until the Transmitter Register is Empty*/
	while(GET_BIT(UCSRA , UDRE)==0);
    2332:	eb e2       	ldi	r30, 0x2B	; 43
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	80 81       	ld	r24, Z
    2338:	82 95       	swap	r24
    233a:	86 95       	lsr	r24
    233c:	87 70       	andi	r24, 0x07	; 7
    233e:	88 2f       	mov	r24, r24
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	81 70       	andi	r24, 0x01	; 1
    2344:	90 70       	andi	r25, 0x00	; 0
    2346:	00 97       	sbiw	r24, 0x00	; 0
    2348:	a1 f3       	breq	.-24     	; 0x2332 <UART_voidSendData+0xc>
	/*Send Data Byte*/
	UDR = Copy_u8Data ;
    234a:	ec e2       	ldi	r30, 0x2C	; 44
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	89 81       	ldd	r24, Y+1	; 0x01
    2350:	80 83       	st	Z, r24
}
    2352:	0f 90       	pop	r0
    2354:	cf 91       	pop	r28
    2356:	df 91       	pop	r29
    2358:	08 95       	ret

0000235a <UART_voidReciveData>:

u8 UART_voidReciveData 	(void)
{
    235a:	df 93       	push	r29
    235c:	cf 93       	push	r28
    235e:	cd b7       	in	r28, 0x3d	; 61
    2360:	de b7       	in	r29, 0x3e	; 62
	/*Wait until the Transmitter Register is Empty*/
	while(GET_BIT(UCSRA , RXC)==0);
    2362:	eb e2       	ldi	r30, 0x2B	; 43
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	80 81       	ld	r24, Z
    2368:	88 23       	and	r24, r24
    236a:	dc f7       	brge	.-10     	; 0x2362 <UART_voidReciveData+0x8>
	/*Send Data Byte*/
	return UDR ;
    236c:	ec e2       	ldi	r30, 0x2C	; 44
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	80 81       	ld	r24, Z
}
    2372:	cf 91       	pop	r28
    2374:	df 91       	pop	r29
    2376:	08 95       	ret

00002378 <main>:
u8 Exit_EditPassFlag = 1 ;
u8 EEPROM_PASSWORD = 0 ;
u8 ModeKey = 0 ;

int main(void)
{
    2378:	df 93       	push	r29
    237a:	cf 93       	push	r28
    237c:	cd b7       	in	r28, 0x3d	; 61
    237e:	de b7       	in	r29, 0x3e	; 62
    2380:	61 97       	sbiw	r28, 0x11	; 17
    2382:	0f b6       	in	r0, 0x3f	; 63
    2384:	f8 94       	cli
    2386:	de bf       	out	0x3e, r29	; 62
    2388:	0f be       	out	0x3f, r0	; 63
    238a:	cd bf       	out	0x3d, r28	; 61


LCD_voidInit();
    238c:	0e 94 3c 0b 	call	0x1678	; 0x1678 <LCD_voidInit>
KPD_voidInit();
    2390:	0e 94 33 0a 	call	0x1466	; 0x1466 <KPD_voidInit>
UART_voidInit();
    2394:	0e 94 3d 11 	call	0x227a	; 0x227a <UART_voidInit>
ADC_voidInit();
    2398:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_voidInit>
TWI_VidMasterInit();
    239c:	0e 94 10 10 	call	0x2020	; 0x2020 <TWI_VidMasterInit>
EEPROM_VidWriteDataByte(1,123);
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	6b e7       	ldi	r22, 0x7B	; 123
    23a6:	0e 94 71 09 	call	0x12e2	; 0x12e2 <EEPROM_VidWriteDataByte>

StartProgram();
    23aa:	0e 94 0e 13 	call	0x261c	; 0x261c <StartProgram>
DIO_voidSetPinDirection(DIO_PORTC,DIO_PIN2,DIO_OUTPUT);
    23ae:	82 e0       	ldi	r24, 0x02	; 2
    23b0:	62 e0       	ldi	r22, 0x02	; 2
    23b2:	41 e0       	ldi	r20, 0x01	; 1
    23b4:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <DIO_voidSetPinDirection>
DIO_voidSetPinDirection(DIO_PORTC,DIO_PIN3,DIO_OUTPUT);
    23b8:	82 e0       	ldi	r24, 0x02	; 2
    23ba:	63 e0       	ldi	r22, 0x03	; 3
    23bc:	41 e0       	ldi	r20, 0x01	; 1
    23be:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <DIO_voidSetPinDirection>
DIO_voidSetPinValue(DIO_PORTC,DIO_PIN3,DIO_LOW);
    23c2:	82 e0       	ldi	r24, 0x02	; 2
    23c4:	63 e0       	ldi	r22, 0x03	; 3
    23c6:	40 e0       	ldi	r20, 0x00	; 0
    23c8:	0e 94 f0 06 	call	0xde0	; 0xde0 <DIO_voidSetPinValue>

LCD_voidSendCommand(LCD_CLEAR);
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <LCD_voidSendCommand>
LCD_voidSetLocation (1,0);
    23d2:	81 e0       	ldi	r24, 0x01	; 1
    23d4:	60 e0       	ldi	r22, 0x00	; 0
    23d6:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_voidSetLocation>
LCD_voidSendString ("Enter Password :");
    23da:	80 e6       	ldi	r24, 0x60	; 96
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <LCD_voidSendString>
LCD_voidSetLocation (2,13);
    23e2:	82 e0       	ldi	r24, 0x02	; 2
    23e4:	6d e0       	ldi	r22, 0x0D	; 13
    23e6:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_voidSetLocation>
LCD_voidSendString ("[1]");
    23ea:	81 e7       	ldi	r24, 0x71	; 113
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <LCD_voidSendString>
u16 PASSWORD=0;
    23f2:	19 8a       	std	Y+17, r1	; 0x11
    23f4:	18 8a       	std	Y+16, r1	; 0x10
EEPROM_PASSWORD=EEPROM_u8ReadDataByte(1);
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	0e 94 0a 0a 	call	0x1414	; 0x1414 <EEPROM_u8ReadDataByte>
    23fe:	80 93 a2 01 	sts	0x01A2, r24
	while(1)
		{
		for ( u8 i=0 ; i < 3 ; i++ )
    2402:	1f 86       	std	Y+15, r1	; 0x0f
    2404:	06 c1       	rjmp	.+524    	; 0x2612 <main+0x29a>
				{
					PASSWORD = GetPassword();
    2406:	0e 94 34 15 	call	0x2a68	; 0x2a68 <GetPassword>
    240a:	99 8b       	std	Y+17, r25	; 0x11
    240c:	88 8b       	std	Y+16, r24	; 0x10
					if( PASSWORD == EEPROM_PASSWORD )
    240e:	80 91 a2 01 	lds	r24, 0x01A2
    2412:	28 2f       	mov	r18, r24
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	88 89       	ldd	r24, Y+16	; 0x10
    2418:	99 89       	ldd	r25, Y+17	; 0x11
    241a:	28 17       	cp	r18, r24
    241c:	39 07       	cpc	r19, r25
    241e:	09 f0       	breq	.+2      	; 0x2422 <main+0xaa>
    2420:	b3 c0       	rjmp	.+358    	; 0x2588 <main+0x210>
					{
						UART_voidSendData('Z');
    2422:	8a e5       	ldi	r24, 0x5A	; 90
    2424:	0e 94 93 11 	call	0x2326	; 0x2326 <UART_voidSendData>
						LCD_voidSendCommand(LCD_CLEAR);
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <LCD_voidSendCommand>
						OpenDoor();
    242e:	0e 94 78 15 	call	0x2af0	; 0x2af0 <OpenDoor>
						LCD_voidSetLocation (1,1);
    2432:	81 e0       	ldi	r24, 0x01	; 1
    2434:	61 e0       	ldi	r22, 0x01	; 1
    2436:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_voidSetLocation>
						LCD_voidSendString ("Door is OPened");
    243a:	85 e7       	ldi	r24, 0x75	; 117
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <LCD_voidSendString>
						LCD_voidSetLocation (2,3);
    2442:	82 e0       	ldi	r24, 0x02	; 2
    2444:	63 e0       	ldi	r22, 0x03	; 3
    2446:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_voidSetLocation>
						LCD_voidSendString ("Welcome..");
    244a:	84 e8       	ldi	r24, 0x84	; 132
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <LCD_voidSendString>
    2452:	80 e0       	ldi	r24, 0x00	; 0
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	aa ef       	ldi	r26, 0xFA	; 250
    2458:	b3 e4       	ldi	r27, 0x43	; 67
    245a:	8b 87       	std	Y+11, r24	; 0x0b
    245c:	9c 87       	std	Y+12, r25	; 0x0c
    245e:	ad 87       	std	Y+13, r26	; 0x0d
    2460:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2462:	6b 85       	ldd	r22, Y+11	; 0x0b
    2464:	7c 85       	ldd	r23, Y+12	; 0x0c
    2466:	8d 85       	ldd	r24, Y+13	; 0x0d
    2468:	9e 85       	ldd	r25, Y+14	; 0x0e
    246a:	20 e0       	ldi	r18, 0x00	; 0
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	4a ef       	ldi	r20, 0xFA	; 250
    2470:	54 e4       	ldi	r21, 0x44	; 68
    2472:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2476:	dc 01       	movw	r26, r24
    2478:	cb 01       	movw	r24, r22
    247a:	8f 83       	std	Y+7, r24	; 0x07
    247c:	98 87       	std	Y+8, r25	; 0x08
    247e:	a9 87       	std	Y+9, r26	; 0x09
    2480:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2482:	6f 81       	ldd	r22, Y+7	; 0x07
    2484:	78 85       	ldd	r23, Y+8	; 0x08
    2486:	89 85       	ldd	r24, Y+9	; 0x09
    2488:	9a 85       	ldd	r25, Y+10	; 0x0a
    248a:	20 e0       	ldi	r18, 0x00	; 0
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	40 e8       	ldi	r20, 0x80	; 128
    2490:	5f e3       	ldi	r21, 0x3F	; 63
    2492:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2496:	88 23       	and	r24, r24
    2498:	2c f4       	brge	.+10     	; 0x24a4 <main+0x12c>
		__ticks = 1;
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	9e 83       	std	Y+6, r25	; 0x06
    24a0:	8d 83       	std	Y+5, r24	; 0x05
    24a2:	3f c0       	rjmp	.+126    	; 0x2522 <main+0x1aa>
	else if (__tmp > 65535)
    24a4:	6f 81       	ldd	r22, Y+7	; 0x07
    24a6:	78 85       	ldd	r23, Y+8	; 0x08
    24a8:	89 85       	ldd	r24, Y+9	; 0x09
    24aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	3f ef       	ldi	r19, 0xFF	; 255
    24b0:	4f e7       	ldi	r20, 0x7F	; 127
    24b2:	57 e4       	ldi	r21, 0x47	; 71
    24b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24b8:	18 16       	cp	r1, r24
    24ba:	4c f5       	brge	.+82     	; 0x250e <main+0x196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    24be:	7c 85       	ldd	r23, Y+12	; 0x0c
    24c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    24c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    24c4:	20 e0       	ldi	r18, 0x00	; 0
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	40 e2       	ldi	r20, 0x20	; 32
    24ca:	51 e4       	ldi	r21, 0x41	; 65
    24cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d0:	dc 01       	movw	r26, r24
    24d2:	cb 01       	movw	r24, r22
    24d4:	bc 01       	movw	r22, r24
    24d6:	cd 01       	movw	r24, r26
    24d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24dc:	dc 01       	movw	r26, r24
    24de:	cb 01       	movw	r24, r22
    24e0:	9e 83       	std	Y+6, r25	; 0x06
    24e2:	8d 83       	std	Y+5, r24	; 0x05
    24e4:	0f c0       	rjmp	.+30     	; 0x2504 <main+0x18c>
    24e6:	88 ec       	ldi	r24, 0xC8	; 200
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	9c 83       	std	Y+4, r25	; 0x04
    24ec:	8b 83       	std	Y+3, r24	; 0x03
    24ee:	8b 81       	ldd	r24, Y+3	; 0x03
    24f0:	9c 81       	ldd	r25, Y+4	; 0x04
    24f2:	01 97       	sbiw	r24, 0x01	; 1
    24f4:	f1 f7       	brne	.-4      	; 0x24f2 <main+0x17a>
    24f6:	9c 83       	std	Y+4, r25	; 0x04
    24f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24fa:	8d 81       	ldd	r24, Y+5	; 0x05
    24fc:	9e 81       	ldd	r25, Y+6	; 0x06
    24fe:	01 97       	sbiw	r24, 0x01	; 1
    2500:	9e 83       	std	Y+6, r25	; 0x06
    2502:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2504:	8d 81       	ldd	r24, Y+5	; 0x05
    2506:	9e 81       	ldd	r25, Y+6	; 0x06
    2508:	00 97       	sbiw	r24, 0x00	; 0
    250a:	69 f7       	brne	.-38     	; 0x24e6 <main+0x16e>
    250c:	14 c0       	rjmp	.+40     	; 0x2536 <main+0x1be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    250e:	6f 81       	ldd	r22, Y+7	; 0x07
    2510:	78 85       	ldd	r23, Y+8	; 0x08
    2512:	89 85       	ldd	r24, Y+9	; 0x09
    2514:	9a 85       	ldd	r25, Y+10	; 0x0a
    2516:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	9e 83       	std	Y+6, r25	; 0x06
    2520:	8d 83       	std	Y+5, r24	; 0x05
    2522:	8d 81       	ldd	r24, Y+5	; 0x05
    2524:	9e 81       	ldd	r25, Y+6	; 0x06
    2526:	9a 83       	std	Y+2, r25	; 0x02
    2528:	89 83       	std	Y+1, r24	; 0x01
    252a:	89 81       	ldd	r24, Y+1	; 0x01
    252c:	9a 81       	ldd	r25, Y+2	; 0x02
    252e:	01 97       	sbiw	r24, 0x01	; 1
    2530:	f1 f7       	brne	.-4      	; 0x252e <main+0x1b6>
    2532:	9a 83       	std	Y+2, r25	; 0x02
    2534:	89 83       	std	Y+1, r24	; 0x01
						_delay_ms(500);
						LCD_voidSendCommand(LCD_CLEAR);
    2536:	81 e0       	ldi	r24, 0x01	; 1
    2538:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <LCD_voidSendCommand>
						while(1)
						{

							LCD_voidSetLocation (1,0);
    253c:	81 e0       	ldi	r24, 0x01	; 1
    253e:	60 e0       	ldi	r22, 0x00	; 0
    2540:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_voidSetLocation>
							LCD_voidSendString ("1-Room1         ");
    2544:	8e e8       	ldi	r24, 0x8E	; 142
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <LCD_voidSendString>
							LCD_voidSetLocation (2,0);
    254c:	82 e0       	ldi	r24, 0x02	; 2
    254e:	60 e0       	ldi	r22, 0x00	; 0
    2550:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_voidSetLocation>
							LCD_voidSendString ("2-Room2         ");
    2554:	8f e9       	ldi	r24, 0x9F	; 159
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <LCD_voidSendString>
							ModeKey =KPD_u8GetKeyValue();
    255c:	0e 94 42 0a 	call	0x1484	; 0x1484 <KPD_u8GetKeyValue>
    2560:	80 93 a3 01 	sts	0x01A3, r24
							if ( ModeKey != KPD_KEY_NOT_PRESSED  )
    2564:	80 91 a3 01 	lds	r24, 0x01A3
    2568:	8f 3f       	cpi	r24, 0xFF	; 255
    256a:	41 f3       	breq	.-48     	; 0x253c <main+0x1c4>
							{
								if( ModeKey == '1' )
    256c:	80 91 a3 01 	lds	r24, 0x01A3
    2570:	81 33       	cpi	r24, 0x31	; 49
    2572:	19 f4       	brne	.+6      	; 0x257a <main+0x202>
								{
									Room1();
    2574:	0e 94 a3 13 	call	0x2746	; 0x2746 <Room1>
    2578:	e1 cf       	rjmp	.-62     	; 0x253c <main+0x1c4>
								}
								else if( ModeKey == '2' )
    257a:	80 91 a3 01 	lds	r24, 0x01A3
    257e:	82 33       	cpi	r24, 0x32	; 50
    2580:	e9 f6       	brne	.-70     	; 0x253c <main+0x1c4>
								{
									Room2();
    2582:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <Room2>
    2586:	da cf       	rjmp	.-76     	; 0x253c <main+0x1c4>

						}
					}
					else
					{
						if (i==2)
    2588:	8f 85       	ldd	r24, Y+15	; 0x0f
    258a:	82 30       	cpi	r24, 0x02	; 2
    258c:	e1 f4       	brne	.+56     	; 0x25c6 <main+0x24e>
						{
							LCD_voidSendCommand(LCD_CLEAR);
    258e:	81 e0       	ldi	r24, 0x01	; 1
    2590:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <LCD_voidSendCommand>
							LCD_voidSetLocation (1,3);
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	63 e0       	ldi	r22, 0x03	; 3
    2598:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_voidSetLocation>
							LCD_voidSendString ("7aramy !!");
    259c:	80 eb       	ldi	r24, 0xB0	; 176
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <LCD_voidSendString>
							LCD_voidSetLocation (2,0);
    25a4:	82 e0       	ldi	r24, 0x02	; 2
    25a6:	60 e0       	ldi	r22, 0x00	; 0
    25a8:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_voidSetLocation>
							LCD_voidSendString ("Restart System..");
    25ac:	8a eb       	ldi	r24, 0xBA	; 186
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <LCD_voidSendString>
							UART_voidSendData('N');
    25b4:	8e e4       	ldi	r24, 0x4E	; 78
    25b6:	0e 94 93 11 	call	0x2326	; 0x2326 <UART_voidSendData>
							DIO_voidSetPinValue(DIO_PORTC,DIO_PIN3,DIO_HIGH);	// Buzzer ON
    25ba:	82 e0       	ldi	r24, 0x02	; 2
    25bc:	63 e0       	ldi	r22, 0x03	; 3
    25be:	41 e0       	ldi	r20, 0x01	; 1
    25c0:	0e 94 f0 06 	call	0xde0	; 0xde0 <DIO_voidSetPinValue>
    25c4:	1e cf       	rjmp	.-452    	; 0x2402 <main+0x8a>

							break;
						}
						else
						{
							LCD_voidSendCommand(LCD_CLEAR);
    25c6:	81 e0       	ldi	r24, 0x01	; 1
    25c8:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <LCD_voidSendCommand>
							LCD_voidSetLocation (1,0);
    25cc:	81 e0       	ldi	r24, 0x01	; 1
    25ce:	60 e0       	ldi	r22, 0x00	; 0
    25d0:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_voidSetLocation>
							LCD_voidSendString ("Try again..");
    25d4:	8b ec       	ldi	r24, 0xCB	; 203
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <LCD_voidSendString>
							LCD_voidSetLocation (2,13);
    25dc:	82 e0       	ldi	r24, 0x02	; 2
    25de:	6d e0       	ldi	r22, 0x0D	; 13
    25e0:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_voidSetLocation>
							LCD_voidSendString ("[");
    25e4:	87 ed       	ldi	r24, 0xD7	; 215
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <LCD_voidSendString>
							LCD_voidWrite_u32Number(i+2);
    25ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    25ee:	88 2f       	mov	r24, r24
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	02 96       	adiw	r24, 0x02	; 2
    25f4:	aa 27       	eor	r26, r26
    25f6:	97 fd       	sbrc	r25, 7
    25f8:	a0 95       	com	r26
    25fa:	ba 2f       	mov	r27, r26
    25fc:	bc 01       	movw	r22, r24
    25fe:	cd 01       	movw	r24, r26
    2600:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <LCD_voidWrite_u32Number>
							LCD_voidSendString ("]");
    2604:	89 ed       	ldi	r24, 0xD9	; 217
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <LCD_voidSendString>
LCD_voidSendString ("[1]");
u16 PASSWORD=0;
EEPROM_PASSWORD=EEPROM_u8ReadDataByte(1);
	while(1)
		{
		for ( u8 i=0 ; i < 3 ; i++ )
    260c:	8f 85       	ldd	r24, Y+15	; 0x0f
    260e:	8f 5f       	subi	r24, 0xFF	; 255
    2610:	8f 87       	std	Y+15, r24	; 0x0f
    2612:	8f 85       	ldd	r24, Y+15	; 0x0f
    2614:	83 30       	cpi	r24, 0x03	; 3
    2616:	08 f4       	brcc	.+2      	; 0x261a <main+0x2a2>
    2618:	f6 ce       	rjmp	.-532    	; 0x2406 <main+0x8e>
    261a:	f3 ce       	rjmp	.-538    	; 0x2402 <main+0x8a>

0000261c <StartProgram>:
return 0;
}

/*----------------------------------------------------------------------------------------------------------------------*/
void StartProgram (void)
{
    261c:	df 93       	push	r29
    261e:	cf 93       	push	r28
    2620:	cd b7       	in	r28, 0x3d	; 61
    2622:	de b7       	in	r29, 0x3e	; 62
    2624:	2e 97       	sbiw	r28, 0x0e	; 14
    2626:	0f b6       	in	r0, 0x3f	; 63
    2628:	f8 94       	cli
    262a:	de bf       	out	0x3e, r29	; 62
    262c:	0f be       	out	0x3f, r0	; 63
    262e:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSetLocation(1,0);
    2630:	81 e0       	ldi	r24, 0x01	; 1
    2632:	60 e0       	ldi	r22, 0x00	; 0
    2634:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_voidSetLocation>
	LCD_voidSendString(" Welcome To MY");
    2638:	8b ed       	ldi	r24, 0xDB	; 219
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <LCD_voidSendString>
	LCD_voidSetLocation(2,0);
    2640:	82 e0       	ldi	r24, 0x02	; 2
    2642:	60 e0       	ldi	r22, 0x00	; 0
    2644:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_voidSetLocation>
	LCD_voidSendString("  Smart Home :) ");
    2648:	8a ee       	ldi	r24, 0xEA	; 234
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <LCD_voidSendString>
    2650:	80 e0       	ldi	r24, 0x00	; 0
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	a6 e1       	ldi	r26, 0x16	; 22
    2656:	b4 e4       	ldi	r27, 0x44	; 68
    2658:	8b 87       	std	Y+11, r24	; 0x0b
    265a:	9c 87       	std	Y+12, r25	; 0x0c
    265c:	ad 87       	std	Y+13, r26	; 0x0d
    265e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2660:	6b 85       	ldd	r22, Y+11	; 0x0b
    2662:	7c 85       	ldd	r23, Y+12	; 0x0c
    2664:	8d 85       	ldd	r24, Y+13	; 0x0d
    2666:	9e 85       	ldd	r25, Y+14	; 0x0e
    2668:	20 e0       	ldi	r18, 0x00	; 0
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	4a ef       	ldi	r20, 0xFA	; 250
    266e:	54 e4       	ldi	r21, 0x44	; 68
    2670:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2674:	dc 01       	movw	r26, r24
    2676:	cb 01       	movw	r24, r22
    2678:	8f 83       	std	Y+7, r24	; 0x07
    267a:	98 87       	std	Y+8, r25	; 0x08
    267c:	a9 87       	std	Y+9, r26	; 0x09
    267e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2680:	6f 81       	ldd	r22, Y+7	; 0x07
    2682:	78 85       	ldd	r23, Y+8	; 0x08
    2684:	89 85       	ldd	r24, Y+9	; 0x09
    2686:	9a 85       	ldd	r25, Y+10	; 0x0a
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	40 e8       	ldi	r20, 0x80	; 128
    268e:	5f e3       	ldi	r21, 0x3F	; 63
    2690:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2694:	88 23       	and	r24, r24
    2696:	2c f4       	brge	.+10     	; 0x26a2 <StartProgram+0x86>
		__ticks = 1;
    2698:	81 e0       	ldi	r24, 0x01	; 1
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	9e 83       	std	Y+6, r25	; 0x06
    269e:	8d 83       	std	Y+5, r24	; 0x05
    26a0:	3f c0       	rjmp	.+126    	; 0x2720 <StartProgram+0x104>
	else if (__tmp > 65535)
    26a2:	6f 81       	ldd	r22, Y+7	; 0x07
    26a4:	78 85       	ldd	r23, Y+8	; 0x08
    26a6:	89 85       	ldd	r24, Y+9	; 0x09
    26a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26aa:	20 e0       	ldi	r18, 0x00	; 0
    26ac:	3f ef       	ldi	r19, 0xFF	; 255
    26ae:	4f e7       	ldi	r20, 0x7F	; 127
    26b0:	57 e4       	ldi	r21, 0x47	; 71
    26b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26b6:	18 16       	cp	r1, r24
    26b8:	4c f5       	brge	.+82     	; 0x270c <StartProgram+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    26bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    26be:	8d 85       	ldd	r24, Y+13	; 0x0d
    26c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    26c2:	20 e0       	ldi	r18, 0x00	; 0
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	40 e2       	ldi	r20, 0x20	; 32
    26c8:	51 e4       	ldi	r21, 0x41	; 65
    26ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ce:	dc 01       	movw	r26, r24
    26d0:	cb 01       	movw	r24, r22
    26d2:	bc 01       	movw	r22, r24
    26d4:	cd 01       	movw	r24, r26
    26d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26da:	dc 01       	movw	r26, r24
    26dc:	cb 01       	movw	r24, r22
    26de:	9e 83       	std	Y+6, r25	; 0x06
    26e0:	8d 83       	std	Y+5, r24	; 0x05
    26e2:	0f c0       	rjmp	.+30     	; 0x2702 <StartProgram+0xe6>
    26e4:	88 ec       	ldi	r24, 0xC8	; 200
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	9c 83       	std	Y+4, r25	; 0x04
    26ea:	8b 83       	std	Y+3, r24	; 0x03
    26ec:	8b 81       	ldd	r24, Y+3	; 0x03
    26ee:	9c 81       	ldd	r25, Y+4	; 0x04
    26f0:	01 97       	sbiw	r24, 0x01	; 1
    26f2:	f1 f7       	brne	.-4      	; 0x26f0 <StartProgram+0xd4>
    26f4:	9c 83       	std	Y+4, r25	; 0x04
    26f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f8:	8d 81       	ldd	r24, Y+5	; 0x05
    26fa:	9e 81       	ldd	r25, Y+6	; 0x06
    26fc:	01 97       	sbiw	r24, 0x01	; 1
    26fe:	9e 83       	std	Y+6, r25	; 0x06
    2700:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2702:	8d 81       	ldd	r24, Y+5	; 0x05
    2704:	9e 81       	ldd	r25, Y+6	; 0x06
    2706:	00 97       	sbiw	r24, 0x00	; 0
    2708:	69 f7       	brne	.-38     	; 0x26e4 <StartProgram+0xc8>
    270a:	14 c0       	rjmp	.+40     	; 0x2734 <StartProgram+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    270c:	6f 81       	ldd	r22, Y+7	; 0x07
    270e:	78 85       	ldd	r23, Y+8	; 0x08
    2710:	89 85       	ldd	r24, Y+9	; 0x09
    2712:	9a 85       	ldd	r25, Y+10	; 0x0a
    2714:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2718:	dc 01       	movw	r26, r24
    271a:	cb 01       	movw	r24, r22
    271c:	9e 83       	std	Y+6, r25	; 0x06
    271e:	8d 83       	std	Y+5, r24	; 0x05
    2720:	8d 81       	ldd	r24, Y+5	; 0x05
    2722:	9e 81       	ldd	r25, Y+6	; 0x06
    2724:	9a 83       	std	Y+2, r25	; 0x02
    2726:	89 83       	std	Y+1, r24	; 0x01
    2728:	89 81       	ldd	r24, Y+1	; 0x01
    272a:	9a 81       	ldd	r25, Y+2	; 0x02
    272c:	01 97       	sbiw	r24, 0x01	; 1
    272e:	f1 f7       	brne	.-4      	; 0x272c <StartProgram+0x110>
    2730:	9a 83       	std	Y+2, r25	; 0x02
    2732:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(600);
}
    2734:	2e 96       	adiw	r28, 0x0e	; 14
    2736:	0f b6       	in	r0, 0x3f	; 63
    2738:	f8 94       	cli
    273a:	de bf       	out	0x3e, r29	; 62
    273c:	0f be       	out	0x3f, r0	; 63
    273e:	cd bf       	out	0x3d, r28	; 61
    2740:	cf 91       	pop	r28
    2742:	df 91       	pop	r29
    2744:	08 95       	ret

00002746 <Room1>:


/*----------------------------------------------------------------------------------------------------------------------*/
void Room1    (void)
{
    2746:	df 93       	push	r29
    2748:	cf 93       	push	r28
    274a:	0f 92       	push	r0
    274c:	cd b7       	in	r28, 0x3d	; 61
    274e:	de b7       	in	r29, 0x3e	; 62

	u8 ActuatorKey = 0 ;
    2750:	19 82       	std	Y+1, r1	; 0x01
	LCD_voidSendCommand(LCD_CLEAR);
    2752:	81 e0       	ldi	r24, 0x01	; 1
    2754:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <LCD_voidSendCommand>
	UART_voidSendData('R');
    2758:	82 e5       	ldi	r24, 0x52	; 82
    275a:	0e 94 93 11 	call	0x2326	; 0x2326 <UART_voidSendData>
	while(1)
	{
		LCD_voidSetLocation(1,0);
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	60 e0       	ldi	r22, 0x00	; 0
    2762:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_voidSetLocation>
		LCD_voidSendString ("(1)Fan (2)Light ");
    2766:	8b ef       	ldi	r24, 0xFB	; 251
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <LCD_voidSendString>
		LCD_voidSetLocation (2,0);
    276e:	82 e0       	ldi	r24, 0x02	; 2
    2770:	60 e0       	ldi	r22, 0x00	; 0
    2772:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_voidSetLocation>
		LCD_voidSendString ("(3)TV ");
    2776:	8c e0       	ldi	r24, 0x0C	; 12
    2778:	91 e0       	ldi	r25, 0x01	; 1
    277a:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <LCD_voidSendString>
		ActuatorKey = KPD_u8GetKeyValue ();
    277e:	0e 94 42 0a 	call	0x1484	; 0x1484 <KPD_u8GetKeyValue>
    2782:	89 83       	std	Y+1, r24	; 0x01
		if ( ActuatorKey != 0xff  )
    2784:	89 81       	ldd	r24, Y+1	; 0x01
    2786:	8f 3f       	cpi	r24, 0xFF	; 255
    2788:	51 f3       	breq	.-44     	; 0x275e <Room1+0x18>
		{
			if ( ActuatorKey == '1' )
    278a:	89 81       	ldd	r24, Y+1	; 0x01
    278c:	81 33       	cpi	r24, 0x31	; 49
    278e:	19 f4       	brne	.+6      	; 0x2796 <Room1+0x50>
			{
				Control_Fan1();
    2790:	0e 94 17 14 	call	0x282e	; 0x282e <Control_Fan1>
    2794:	e4 cf       	rjmp	.-56     	; 0x275e <Room1+0x18>
			}
			else if ( ActuatorKey == '2' )
    2796:	89 81       	ldd	r24, Y+1	; 0x01
    2798:	82 33       	cpi	r24, 0x32	; 50
    279a:	19 f4       	brne	.+6      	; 0x27a2 <Room1+0x5c>
			{
				Control_Light1();
    279c:	0e 94 50 14 	call	0x28a0	; 0x28a0 <Control_Light1>
    27a0:	de cf       	rjmp	.-68     	; 0x275e <Room1+0x18>

			}
			else if ( ActuatorKey == '3' )
    27a2:	89 81       	ldd	r24, Y+1	; 0x01
    27a4:	83 33       	cpi	r24, 0x33	; 51
    27a6:	19 f4       	brne	.+6      	; 0x27ae <Room1+0x68>
			{
				Control_TV();
    27a8:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <Control_TV>
    27ac:	d8 cf       	rjmp	.-80     	; 0x275e <Room1+0x18>
			}
			else
			{
				UART_voidSendData('#');
    27ae:	83 e2       	ldi	r24, 0x23	; 35
    27b0:	0e 94 93 11 	call	0x2326	; 0x2326 <UART_voidSendData>
				ModeKey = 0 ;
    27b4:	10 92 a3 01 	sts	0x01A3, r1
				break;
			}
		}
	}
    27b8:	0f 90       	pop	r0
    27ba:	cf 91       	pop	r28
    27bc:	df 91       	pop	r29
    27be:	08 95       	ret

000027c0 <Room2>:

}

/*----------------------------------------------------------------------------------------------------------------------*/
void Room2    (void)
{
    27c0:	df 93       	push	r29
    27c2:	cf 93       	push	r28
    27c4:	0f 92       	push	r0
    27c6:	cd b7       	in	r28, 0x3d	; 61
    27c8:	de b7       	in	r29, 0x3e	; 62

	u8 ActuatorKey = 0 ;
    27ca:	19 82       	std	Y+1, r1	; 0x01
	LCD_voidSendCommand(LCD_CLEAR);
    27cc:	81 e0       	ldi	r24, 0x01	; 1
    27ce:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <LCD_voidSendCommand>
	UART_voidSendData('r');
    27d2:	82 e7       	ldi	r24, 0x72	; 114
    27d4:	0e 94 93 11 	call	0x2326	; 0x2326 <UART_voidSendData>
	while(1)
	{
		LCD_voidSetLocation(1,0);
    27d8:	81 e0       	ldi	r24, 0x01	; 1
    27da:	60 e0       	ldi	r22, 0x00	; 0
    27dc:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_voidSetLocation>
		LCD_voidSendString ("(1)AIR-Condition ");
    27e0:	83 e1       	ldi	r24, 0x13	; 19
    27e2:	91 e0       	ldi	r25, 0x01	; 1
    27e4:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <LCD_voidSendString>
		LCD_voidSetLocation(2,0);
    27e8:	82 e0       	ldi	r24, 0x02	; 2
    27ea:	60 e0       	ldi	r22, 0x00	; 0
    27ec:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_voidSetLocation>
		LCD_voidSendString ("(2)Light         ");
    27f0:	85 e2       	ldi	r24, 0x25	; 37
    27f2:	91 e0       	ldi	r25, 0x01	; 1
    27f4:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <LCD_voidSendString>
		ActuatorKey = KPD_u8GetKeyValue ();
    27f8:	0e 94 42 0a 	call	0x1484	; 0x1484 <KPD_u8GetKeyValue>
    27fc:	89 83       	std	Y+1, r24	; 0x01
		if ( ActuatorKey != 0xff  )
    27fe:	89 81       	ldd	r24, Y+1	; 0x01
    2800:	8f 3f       	cpi	r24, 0xFF	; 255
    2802:	51 f3       	breq	.-44     	; 0x27d8 <Room2+0x18>
		{
			if ( ActuatorKey == '1' )
    2804:	89 81       	ldd	r24, Y+1	; 0x01
    2806:	81 33       	cpi	r24, 0x31	; 49
    2808:	19 f4       	brne	.+6      	; 0x2810 <Room2+0x50>
			{
				Control_Fan2();
    280a:	0e 94 89 14 	call	0x2912	; 0x2912 <Control_Fan2>
    280e:	e4 cf       	rjmp	.-56     	; 0x27d8 <Room2+0x18>
			}
			else if ( ActuatorKey == '2' )
    2810:	89 81       	ldd	r24, Y+1	; 0x01
    2812:	82 33       	cpi	r24, 0x32	; 50
    2814:	19 f4       	brne	.+6      	; 0x281c <Room2+0x5c>
			{
				Control_Light2();
    2816:	0e 94 c2 14 	call	0x2984	; 0x2984 <Control_Light2>
    281a:	de cf       	rjmp	.-68     	; 0x27d8 <Room2+0x18>

			}
			else
			{
				UART_voidSendData('#');
    281c:	83 e2       	ldi	r24, 0x23	; 35
    281e:	0e 94 93 11 	call	0x2326	; 0x2326 <UART_voidSendData>
				ModeKey = 0 ;
    2822:	10 92 a3 01 	sts	0x01A3, r1
				break;
			}
		}
	}
    2826:	0f 90       	pop	r0
    2828:	cf 91       	pop	r28
    282a:	df 91       	pop	r29
    282c:	08 95       	ret

0000282e <Control_Fan1>:



/*----------------------------------------------------------------------------------------------------------------------*/
void Control_Fan1 (void)
{
    282e:	df 93       	push	r29
    2830:	cf 93       	push	r28
    2832:	0f 92       	push	r0
    2834:	cd b7       	in	r28, 0x3d	; 61
    2836:	de b7       	in	r29, 0x3e	; 62
	u8 FanKey = 0 ;
    2838:	19 82       	std	Y+1, r1	; 0x01
	LCD_voidSendCommand(LCD_CLEAR);
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <LCD_voidSendCommand>
	UART_voidSendData('F');
    2840:	86 e4       	ldi	r24, 0x46	; 70
    2842:	0e 94 93 11 	call	0x2326	; 0x2326 <UART_voidSendData>
	LCD_voidSetLocation (1,0);
    2846:	81 e0       	ldi	r24, 0x01	; 1
    2848:	60 e0       	ldi	r22, 0x00	; 0
    284a:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_voidSetLocation>
	LCD_voidSendString ("(1)Fan: ON ");
    284e:	87 e3       	ldi	r24, 0x37	; 55
    2850:	91 e0       	ldi	r25, 0x01	; 1
    2852:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <LCD_voidSendString>
	LCD_voidSetLocation (2,0);
    2856:	82 e0       	ldi	r24, 0x02	; 2
    2858:	60 e0       	ldi	r22, 0x00	; 0
    285a:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_voidSetLocation>
	LCD_voidSendString ("(0)Fan: OFF");
    285e:	83 e4       	ldi	r24, 0x43	; 67
    2860:	91 e0       	ldi	r25, 0x01	; 1
    2862:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <LCD_voidSendString>
	while(1)
	{
		FanKey = KPD_u8GetKeyValue();
    2866:	0e 94 42 0a 	call	0x1484	; 0x1484 <KPD_u8GetKeyValue>
    286a:	89 83       	std	Y+1, r24	; 0x01
		if ( FanKey != 0xff  )
    286c:	89 81       	ldd	r24, Y+1	; 0x01
    286e:	8f 3f       	cpi	r24, 0xFF	; 255
    2870:	d1 f3       	breq	.-12     	; 0x2866 <Control_Fan1+0x38>
		{
			if ( FanKey == '1' )
    2872:	89 81       	ldd	r24, Y+1	; 0x01
    2874:	81 33       	cpi	r24, 0x31	; 49
    2876:	39 f4       	brne	.+14     	; 0x2886 <Control_Fan1+0x58>
			{
				UART_voidSendData('1');
    2878:	81 e3       	ldi	r24, 0x31	; 49
    287a:	0e 94 93 11 	call	0x2326	; 0x2326 <UART_voidSendData>
				LCD_voidSendCommand(LCD_CLEAR);
    287e:	81 e0       	ldi	r24, 0x01	; 1
    2880:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <LCD_voidSendCommand>
    2884:	09 c0       	rjmp	.+18     	; 0x2898 <Control_Fan1+0x6a>

				break;
			}
			else if ( FanKey == '0' )
    2886:	89 81       	ldd	r24, Y+1	; 0x01
    2888:	80 33       	cpi	r24, 0x30	; 48
    288a:	69 f7       	brne	.-38     	; 0x2866 <Control_Fan1+0x38>
			{
				UART_voidSendData('0');
    288c:	80 e3       	ldi	r24, 0x30	; 48
    288e:	0e 94 93 11 	call	0x2326	; 0x2326 <UART_voidSendData>
				LCD_voidSendCommand(LCD_CLEAR);
    2892:	81 e0       	ldi	r24, 0x01	; 1
    2894:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <LCD_voidSendCommand>
			}
		}
	}


}
    2898:	0f 90       	pop	r0
    289a:	cf 91       	pop	r28
    289c:	df 91       	pop	r29
    289e:	08 95       	ret

000028a0 <Control_Light1>:
/*----------------------------------------------------------------------------------------------------------------------*/

void Control_Light1 (void)
{
    28a0:	df 93       	push	r29
    28a2:	cf 93       	push	r28
    28a4:	0f 92       	push	r0
    28a6:	cd b7       	in	r28, 0x3d	; 61
    28a8:	de b7       	in	r29, 0x3e	; 62
	u8 LightKey = 0 ;
    28aa:	19 82       	std	Y+1, r1	; 0x01
	LCD_voidSendCommand(LCD_CLEAR);
    28ac:	81 e0       	ldi	r24, 0x01	; 1
    28ae:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <LCD_voidSendCommand>
	UART_voidSendData('L');
    28b2:	8c e4       	ldi	r24, 0x4C	; 76
    28b4:	0e 94 93 11 	call	0x2326	; 0x2326 <UART_voidSendData>
	LCD_voidSetLocation (1,0);
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	60 e0       	ldi	r22, 0x00	; 0
    28bc:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_voidSetLocation>
	LCD_voidSendString ("(1)Light: ON ");
    28c0:	8f e4       	ldi	r24, 0x4F	; 79
    28c2:	91 e0       	ldi	r25, 0x01	; 1
    28c4:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <LCD_voidSendString>
	LCD_voidSetLocation (2,0);
    28c8:	82 e0       	ldi	r24, 0x02	; 2
    28ca:	60 e0       	ldi	r22, 0x00	; 0
    28cc:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_voidSetLocation>
	LCD_voidSendString ("(0)Light: OFF");
    28d0:	8d e5       	ldi	r24, 0x5D	; 93
    28d2:	91 e0       	ldi	r25, 0x01	; 1
    28d4:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <LCD_voidSendString>
	while(1)
	{
		LightKey = KPD_u8GetKeyValue();
    28d8:	0e 94 42 0a 	call	0x1484	; 0x1484 <KPD_u8GetKeyValue>
    28dc:	89 83       	std	Y+1, r24	; 0x01
		if ( LightKey != 0xff  )
    28de:	89 81       	ldd	r24, Y+1	; 0x01
    28e0:	8f 3f       	cpi	r24, 0xFF	; 255
    28e2:	d1 f3       	breq	.-12     	; 0x28d8 <Control_Light1+0x38>
		{
			if ( LightKey == '1' )
    28e4:	89 81       	ldd	r24, Y+1	; 0x01
    28e6:	81 33       	cpi	r24, 0x31	; 49
    28e8:	39 f4       	brne	.+14     	; 0x28f8 <Control_Light1+0x58>
			{
				UART_voidSendData('1');
    28ea:	81 e3       	ldi	r24, 0x31	; 49
    28ec:	0e 94 93 11 	call	0x2326	; 0x2326 <UART_voidSendData>
				LCD_voidSendCommand(LCD_CLEAR);
    28f0:	81 e0       	ldi	r24, 0x01	; 1
    28f2:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <LCD_voidSendCommand>
    28f6:	09 c0       	rjmp	.+18     	; 0x290a <Control_Light1+0x6a>

				break;
			}
			else if ( LightKey == '0' )
    28f8:	89 81       	ldd	r24, Y+1	; 0x01
    28fa:	80 33       	cpi	r24, 0x30	; 48
    28fc:	69 f7       	brne	.-38     	; 0x28d8 <Control_Light1+0x38>
			{
				UART_voidSendData('0');
    28fe:	80 e3       	ldi	r24, 0x30	; 48
    2900:	0e 94 93 11 	call	0x2326	; 0x2326 <UART_voidSendData>
				LCD_voidSendCommand(LCD_CLEAR);
    2904:	81 e0       	ldi	r24, 0x01	; 1
    2906:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <LCD_voidSendCommand>
				break;
			}
		}
	}

}
    290a:	0f 90       	pop	r0
    290c:	cf 91       	pop	r28
    290e:	df 91       	pop	r29
    2910:	08 95       	ret

00002912 <Control_Fan2>:
/*----------------------------------------------------------------------------------------------------------------------*/
void Control_Fan2 (void)
{
    2912:	df 93       	push	r29
    2914:	cf 93       	push	r28
    2916:	0f 92       	push	r0
    2918:	cd b7       	in	r28, 0x3d	; 61
    291a:	de b7       	in	r29, 0x3e	; 62
	u8 FanKey = 0 ;
    291c:	19 82       	std	Y+1, r1	; 0x01
	LCD_voidSendCommand(LCD_CLEAR);
    291e:	81 e0       	ldi	r24, 0x01	; 1
    2920:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <LCD_voidSendCommand>
	UART_voidSendData('f');
    2924:	86 e6       	ldi	r24, 0x66	; 102
    2926:	0e 94 93 11 	call	0x2326	; 0x2326 <UART_voidSendData>
	LCD_voidSetLocation (1,0);
    292a:	81 e0       	ldi	r24, 0x01	; 1
    292c:	60 e0       	ldi	r22, 0x00	; 0
    292e:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_voidSetLocation>
	LCD_voidSendString ("(1)Fan: ON ");
    2932:	87 e3       	ldi	r24, 0x37	; 55
    2934:	91 e0       	ldi	r25, 0x01	; 1
    2936:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <LCD_voidSendString>
	LCD_voidSetLocation (2,0);
    293a:	82 e0       	ldi	r24, 0x02	; 2
    293c:	60 e0       	ldi	r22, 0x00	; 0
    293e:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_voidSetLocation>
	LCD_voidSendString ("(0)Fan: OFF");
    2942:	83 e4       	ldi	r24, 0x43	; 67
    2944:	91 e0       	ldi	r25, 0x01	; 1
    2946:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <LCD_voidSendString>
	while(1)
	{
		FanKey = KPD_u8GetKeyValue();
    294a:	0e 94 42 0a 	call	0x1484	; 0x1484 <KPD_u8GetKeyValue>
    294e:	89 83       	std	Y+1, r24	; 0x01
		if ( FanKey != 0xff  )
    2950:	89 81       	ldd	r24, Y+1	; 0x01
    2952:	8f 3f       	cpi	r24, 0xFF	; 255
    2954:	d1 f3       	breq	.-12     	; 0x294a <Control_Fan2+0x38>
		{
			if ( FanKey == '1' )
    2956:	89 81       	ldd	r24, Y+1	; 0x01
    2958:	81 33       	cpi	r24, 0x31	; 49
    295a:	39 f4       	brne	.+14     	; 0x296a <Control_Fan2+0x58>
			{
				UART_voidSendData('1');
    295c:	81 e3       	ldi	r24, 0x31	; 49
    295e:	0e 94 93 11 	call	0x2326	; 0x2326 <UART_voidSendData>
				LCD_voidSendCommand(LCD_CLEAR);
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <LCD_voidSendCommand>
    2968:	09 c0       	rjmp	.+18     	; 0x297c <Control_Fan2+0x6a>

				break;
			}
			else if ( FanKey == '0' )
    296a:	89 81       	ldd	r24, Y+1	; 0x01
    296c:	80 33       	cpi	r24, 0x30	; 48
    296e:	69 f7       	brne	.-38     	; 0x294a <Control_Fan2+0x38>
			{
				UART_voidSendData('0');
    2970:	80 e3       	ldi	r24, 0x30	; 48
    2972:	0e 94 93 11 	call	0x2326	; 0x2326 <UART_voidSendData>
				LCD_voidSendCommand(LCD_CLEAR);
    2976:	81 e0       	ldi	r24, 0x01	; 1
    2978:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <LCD_voidSendCommand>
			}
		}
	}


}
    297c:	0f 90       	pop	r0
    297e:	cf 91       	pop	r28
    2980:	df 91       	pop	r29
    2982:	08 95       	ret

00002984 <Control_Light2>:
/*----------------------------------------------------------------------------------------------------------------------*/

void Control_Light2 (void)
{
    2984:	df 93       	push	r29
    2986:	cf 93       	push	r28
    2988:	0f 92       	push	r0
    298a:	cd b7       	in	r28, 0x3d	; 61
    298c:	de b7       	in	r29, 0x3e	; 62
	u8 LightKey = 0 ;
    298e:	19 82       	std	Y+1, r1	; 0x01
	LCD_voidSendCommand(LCD_CLEAR);
    2990:	81 e0       	ldi	r24, 0x01	; 1
    2992:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <LCD_voidSendCommand>
	UART_voidSendData('l');
    2996:	8c e6       	ldi	r24, 0x6C	; 108
    2998:	0e 94 93 11 	call	0x2326	; 0x2326 <UART_voidSendData>
	LCD_voidSetLocation (1,0);
    299c:	81 e0       	ldi	r24, 0x01	; 1
    299e:	60 e0       	ldi	r22, 0x00	; 0
    29a0:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_voidSetLocation>
	LCD_voidSendString ("(1)Light: ON ");
    29a4:	8f e4       	ldi	r24, 0x4F	; 79
    29a6:	91 e0       	ldi	r25, 0x01	; 1
    29a8:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <LCD_voidSendString>
	LCD_voidSetLocation (2,0);
    29ac:	82 e0       	ldi	r24, 0x02	; 2
    29ae:	60 e0       	ldi	r22, 0x00	; 0
    29b0:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_voidSetLocation>
	LCD_voidSendString ("(0)Light: OFF");
    29b4:	8d e5       	ldi	r24, 0x5D	; 93
    29b6:	91 e0       	ldi	r25, 0x01	; 1
    29b8:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <LCD_voidSendString>
	while(1)
	{
		LightKey = KPD_u8GetKeyValue();
    29bc:	0e 94 42 0a 	call	0x1484	; 0x1484 <KPD_u8GetKeyValue>
    29c0:	89 83       	std	Y+1, r24	; 0x01
		if ( LightKey != 0xff  )
    29c2:	89 81       	ldd	r24, Y+1	; 0x01
    29c4:	8f 3f       	cpi	r24, 0xFF	; 255
    29c6:	d1 f3       	breq	.-12     	; 0x29bc <Control_Light2+0x38>
		{
			if ( LightKey == '1' )
    29c8:	89 81       	ldd	r24, Y+1	; 0x01
    29ca:	81 33       	cpi	r24, 0x31	; 49
    29cc:	39 f4       	brne	.+14     	; 0x29dc <Control_Light2+0x58>
			{
				UART_voidSendData('1');
    29ce:	81 e3       	ldi	r24, 0x31	; 49
    29d0:	0e 94 93 11 	call	0x2326	; 0x2326 <UART_voidSendData>
				LCD_voidSendCommand(LCD_CLEAR);
    29d4:	81 e0       	ldi	r24, 0x01	; 1
    29d6:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <LCD_voidSendCommand>
    29da:	09 c0       	rjmp	.+18     	; 0x29ee <Control_Light2+0x6a>

				break;
			}
			else if ( LightKey == '0' )
    29dc:	89 81       	ldd	r24, Y+1	; 0x01
    29de:	80 33       	cpi	r24, 0x30	; 48
    29e0:	69 f7       	brne	.-38     	; 0x29bc <Control_Light2+0x38>
			{
				UART_voidSendData('0');
    29e2:	80 e3       	ldi	r24, 0x30	; 48
    29e4:	0e 94 93 11 	call	0x2326	; 0x2326 <UART_voidSendData>
				LCD_voidSendCommand(LCD_CLEAR);
    29e8:	81 e0       	ldi	r24, 0x01	; 1
    29ea:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <LCD_voidSendCommand>
				break;
			}
		}
	}

}
    29ee:	0f 90       	pop	r0
    29f0:	cf 91       	pop	r28
    29f2:	df 91       	pop	r29
    29f4:	08 95       	ret

000029f6 <Control_TV>:
/*----------------------------------------------------------------------------------------------------------------------*/
void Control_TV (void)
{
    29f6:	df 93       	push	r29
    29f8:	cf 93       	push	r28
    29fa:	0f 92       	push	r0
    29fc:	cd b7       	in	r28, 0x3d	; 61
    29fe:	de b7       	in	r29, 0x3e	; 62
	u8 WinKey = 0 ;
    2a00:	19 82       	std	Y+1, r1	; 0x01
	LCD_voidSendCommand(LCD_CLEAR);
    2a02:	81 e0       	ldi	r24, 0x01	; 1
    2a04:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <LCD_voidSendCommand>
	UART_voidSendData('T');
    2a08:	84 e5       	ldi	r24, 0x54	; 84
    2a0a:	0e 94 93 11 	call	0x2326	; 0x2326 <UART_voidSendData>
	LCD_voidSetLocation (1,0);
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
    2a10:	60 e0       	ldi	r22, 0x00	; 0
    2a12:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_voidSetLocation>
	LCD_voidSendString ("(1)TV: ON ");
    2a16:	8b e6       	ldi	r24, 0x6B	; 107
    2a18:	91 e0       	ldi	r25, 0x01	; 1
    2a1a:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <LCD_voidSendString>
	LCD_voidSetLocation (2,0);
    2a1e:	82 e0       	ldi	r24, 0x02	; 2
    2a20:	60 e0       	ldi	r22, 0x00	; 0
    2a22:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_voidSetLocation>
	LCD_voidSendString ("(0)TV: OFF");
    2a26:	86 e7       	ldi	r24, 0x76	; 118
    2a28:	91 e0       	ldi	r25, 0x01	; 1
    2a2a:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <LCD_voidSendString>
	while(1)
	{
		WinKey = KPD_u8GetKeyValue();
    2a2e:	0e 94 42 0a 	call	0x1484	; 0x1484 <KPD_u8GetKeyValue>
    2a32:	89 83       	std	Y+1, r24	; 0x01
		if ( WinKey != 0xff  )
    2a34:	89 81       	ldd	r24, Y+1	; 0x01
    2a36:	8f 3f       	cpi	r24, 0xFF	; 255
    2a38:	d1 f3       	breq	.-12     	; 0x2a2e <Control_TV+0x38>
		{
			if ( WinKey == '1' )
    2a3a:	89 81       	ldd	r24, Y+1	; 0x01
    2a3c:	81 33       	cpi	r24, 0x31	; 49
    2a3e:	39 f4       	brne	.+14     	; 0x2a4e <Control_TV+0x58>
			{
				UART_voidSendData('1');
    2a40:	81 e3       	ldi	r24, 0x31	; 49
    2a42:	0e 94 93 11 	call	0x2326	; 0x2326 <UART_voidSendData>
				LCD_voidSendCommand(LCD_CLEAR);
    2a46:	81 e0       	ldi	r24, 0x01	; 1
    2a48:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <LCD_voidSendCommand>
    2a4c:	09 c0       	rjmp	.+18     	; 0x2a60 <Control_TV+0x6a>

				break;
			}
			else if ( WinKey == '0' )
    2a4e:	89 81       	ldd	r24, Y+1	; 0x01
    2a50:	80 33       	cpi	r24, 0x30	; 48
    2a52:	69 f7       	brne	.-38     	; 0x2a2e <Control_TV+0x38>
			{
				UART_voidSendData('0');
    2a54:	80 e3       	ldi	r24, 0x30	; 48
    2a56:	0e 94 93 11 	call	0x2326	; 0x2326 <UART_voidSendData>
				LCD_voidSendCommand(LCD_CLEAR);
    2a5a:	81 e0       	ldi	r24, 0x01	; 1
    2a5c:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <LCD_voidSendCommand>
				break;
			}
		}
	}

}
    2a60:	0f 90       	pop	r0
    2a62:	cf 91       	pop	r28
    2a64:	df 91       	pop	r29
    2a66:	08 95       	ret

00002a68 <GetPassword>:

/*----------------------------------------------------------------------------------------------------------------------*/

u16 GetPassword (void)
{
    2a68:	df 93       	push	r29
    2a6a:	cf 93       	push	r28
    2a6c:	00 d0       	rcall	.+0      	; 0x2a6e <GetPassword+0x6>
    2a6e:	00 d0       	rcall	.+0      	; 0x2a70 <GetPassword+0x8>
    2a70:	0f 92       	push	r0
    2a72:	cd b7       	in	r28, 0x3d	; 61
    2a74:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSetLocation(2,0);
    2a76:	82 e0       	ldi	r24, 0x02	; 2
    2a78:	60 e0       	ldi	r22, 0x00	; 0
    2a7a:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_voidSetLocation>
	u16 Password = 0 ;
    2a7e:	1d 82       	std	Y+5, r1	; 0x05
    2a80:	1c 82       	std	Y+4, r1	; 0x04
	u16 Copy_u8Temp = 0 ;
    2a82:	1b 82       	std	Y+3, r1	; 0x03
    2a84:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8PressedKey ;
	while(1)
	{
		Local_u8PressedKey = KPD_u8GetKeyValue();
    2a86:	0e 94 42 0a 	call	0x1484	; 0x1484 <KPD_u8GetKeyValue>
    2a8a:	89 83       	std	Y+1, r24	; 0x01
		if ( Local_u8PressedKey != KPD_KEY_NOT_PRESSED  )
    2a8c:	89 81       	ldd	r24, Y+1	; 0x01
    2a8e:	8f 3f       	cpi	r24, 0xFF	; 255
    2a90:	d1 f3       	breq	.-12     	; 0x2a86 <GetPassword+0x1e>
		{
			if( Local_u8PressedKey >= '0' && Local_u8PressedKey <= '9' )
    2a92:	89 81       	ldd	r24, Y+1	; 0x01
    2a94:	80 33       	cpi	r24, 0x30	; 48
    2a96:	f8 f0       	brcs	.+62     	; 0x2ad6 <GetPassword+0x6e>
    2a98:	89 81       	ldd	r24, Y+1	; 0x01
    2a9a:	8a 33       	cpi	r24, 0x3A	; 58
    2a9c:	e0 f4       	brcc	.+56     	; 0x2ad6 <GetPassword+0x6e>
			{
				LCD_voidSendChar('*');
    2a9e:	8a e2       	ldi	r24, 0x2A	; 42
    2aa0:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <LCD_voidSendChar>
				Copy_u8Temp = Copy_u8Temp*10 + (Local_u8PressedKey - '0') ;
    2aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa6:	9b 81       	ldd	r25, Y+3	; 0x03
    2aa8:	9c 01       	movw	r18, r24
    2aaa:	22 0f       	add	r18, r18
    2aac:	33 1f       	adc	r19, r19
    2aae:	c9 01       	movw	r24, r18
    2ab0:	88 0f       	add	r24, r24
    2ab2:	99 1f       	adc	r25, r25
    2ab4:	88 0f       	add	r24, r24
    2ab6:	99 1f       	adc	r25, r25
    2ab8:	28 0f       	add	r18, r24
    2aba:	39 1f       	adc	r19, r25
    2abc:	89 81       	ldd	r24, Y+1	; 0x01
    2abe:	88 2f       	mov	r24, r24
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	82 0f       	add	r24, r18
    2ac4:	93 1f       	adc	r25, r19
    2ac6:	c0 97       	sbiw	r24, 0x30	; 48
    2ac8:	9b 83       	std	Y+3, r25	; 0x03
    2aca:	8a 83       	std	Y+2, r24	; 0x02
				Password = Copy_u8Temp ;
    2acc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ace:	9b 81       	ldd	r25, Y+3	; 0x03
    2ad0:	9d 83       	std	Y+5, r25	; 0x05
    2ad2:	8c 83       	std	Y+4, r24	; 0x04
    2ad4:	d8 cf       	rjmp	.-80     	; 0x2a86 <GetPassword+0x1e>
			}
			else if ( Local_u8PressedKey == '=' )
    2ad6:	89 81       	ldd	r24, Y+1	; 0x01
    2ad8:	8d 33       	cpi	r24, 0x3D	; 61
    2ada:	a9 f6       	brne	.-86     	; 0x2a86 <GetPassword+0x1e>
			{
				break ;
			}
		}
	}
	return Password ;
    2adc:	8c 81       	ldd	r24, Y+4	; 0x04
    2ade:	9d 81       	ldd	r25, Y+5	; 0x05
}
    2ae0:	0f 90       	pop	r0
    2ae2:	0f 90       	pop	r0
    2ae4:	0f 90       	pop	r0
    2ae6:	0f 90       	pop	r0
    2ae8:	0f 90       	pop	r0
    2aea:	cf 91       	pop	r28
    2aec:	df 91       	pop	r29
    2aee:	08 95       	ret

00002af0 <OpenDoor>:


/*----------------------------------------------------------------------------------------------------------------------*/

void OpenDoor  				 (void)
{
    2af0:	df 93       	push	r29
    2af2:	cf 93       	push	r28
    2af4:	cd b7       	in	r28, 0x3d	; 61
    2af6:	de b7       	in	r29, 0x3e	; 62
    2af8:	2e 97       	sbiw	r28, 0x0e	; 14
    2afa:	0f b6       	in	r0, 0x3f	; 63
    2afc:	f8 94       	cli
    2afe:	de bf       	out	0x3e, r29	; 62
    2b00:	0f be       	out	0x3f, r0	; 63
    2b02:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinValue(DIO_PORTC,DIO_PIN2,DIO_HIGH);
    2b04:	82 e0       	ldi	r24, 0x02	; 2
    2b06:	62 e0       	ldi	r22, 0x02	; 2
    2b08:	41 e0       	ldi	r20, 0x01	; 1
    2b0a:	0e 94 f0 06 	call	0xde0	; 0xde0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTC,DIO_PIN3,DIO_HIGH);
    2b0e:	82 e0       	ldi	r24, 0x02	; 2
    2b10:	63 e0       	ldi	r22, 0x03	; 3
    2b12:	41 e0       	ldi	r20, 0x01	; 1
    2b14:	0e 94 f0 06 	call	0xde0	; 0xde0 <DIO_voidSetPinValue>
    2b18:	80 e0       	ldi	r24, 0x00	; 0
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	a8 e4       	ldi	r26, 0x48	; 72
    2b1e:	b4 e4       	ldi	r27, 0x44	; 68
    2b20:	8b 87       	std	Y+11, r24	; 0x0b
    2b22:	9c 87       	std	Y+12, r25	; 0x0c
    2b24:	ad 87       	std	Y+13, r26	; 0x0d
    2b26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b28:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b30:	20 e0       	ldi	r18, 0x00	; 0
    2b32:	30 e0       	ldi	r19, 0x00	; 0
    2b34:	4a ef       	ldi	r20, 0xFA	; 250
    2b36:	54 e4       	ldi	r21, 0x44	; 68
    2b38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	cb 01       	movw	r24, r22
    2b40:	8f 83       	std	Y+7, r24	; 0x07
    2b42:	98 87       	std	Y+8, r25	; 0x08
    2b44:	a9 87       	std	Y+9, r26	; 0x09
    2b46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b48:	6f 81       	ldd	r22, Y+7	; 0x07
    2b4a:	78 85       	ldd	r23, Y+8	; 0x08
    2b4c:	89 85       	ldd	r24, Y+9	; 0x09
    2b4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b50:	20 e0       	ldi	r18, 0x00	; 0
    2b52:	30 e0       	ldi	r19, 0x00	; 0
    2b54:	40 e8       	ldi	r20, 0x80	; 128
    2b56:	5f e3       	ldi	r21, 0x3F	; 63
    2b58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b5c:	88 23       	and	r24, r24
    2b5e:	2c f4       	brge	.+10     	; 0x2b6a <OpenDoor+0x7a>
		__ticks = 1;
    2b60:	81 e0       	ldi	r24, 0x01	; 1
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	9e 83       	std	Y+6, r25	; 0x06
    2b66:	8d 83       	std	Y+5, r24	; 0x05
    2b68:	3f c0       	rjmp	.+126    	; 0x2be8 <OpenDoor+0xf8>
	else if (__tmp > 65535)
    2b6a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b6c:	78 85       	ldd	r23, Y+8	; 0x08
    2b6e:	89 85       	ldd	r24, Y+9	; 0x09
    2b70:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b72:	20 e0       	ldi	r18, 0x00	; 0
    2b74:	3f ef       	ldi	r19, 0xFF	; 255
    2b76:	4f e7       	ldi	r20, 0x7F	; 127
    2b78:	57 e4       	ldi	r21, 0x47	; 71
    2b7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b7e:	18 16       	cp	r1, r24
    2b80:	4c f5       	brge	.+82     	; 0x2bd4 <OpenDoor+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b82:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b84:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b86:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b88:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b8a:	20 e0       	ldi	r18, 0x00	; 0
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	40 e2       	ldi	r20, 0x20	; 32
    2b90:	51 e4       	ldi	r21, 0x41	; 65
    2b92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b96:	dc 01       	movw	r26, r24
    2b98:	cb 01       	movw	r24, r22
    2b9a:	bc 01       	movw	r22, r24
    2b9c:	cd 01       	movw	r24, r26
    2b9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba2:	dc 01       	movw	r26, r24
    2ba4:	cb 01       	movw	r24, r22
    2ba6:	9e 83       	std	Y+6, r25	; 0x06
    2ba8:	8d 83       	std	Y+5, r24	; 0x05
    2baa:	0f c0       	rjmp	.+30     	; 0x2bca <OpenDoor+0xda>
    2bac:	88 ec       	ldi	r24, 0xC8	; 200
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	9c 83       	std	Y+4, r25	; 0x04
    2bb2:	8b 83       	std	Y+3, r24	; 0x03
    2bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb6:	9c 81       	ldd	r25, Y+4	; 0x04
    2bb8:	01 97       	sbiw	r24, 0x01	; 1
    2bba:	f1 f7       	brne	.-4      	; 0x2bb8 <OpenDoor+0xc8>
    2bbc:	9c 83       	std	Y+4, r25	; 0x04
    2bbe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bc0:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc2:	9e 81       	ldd	r25, Y+6	; 0x06
    2bc4:	01 97       	sbiw	r24, 0x01	; 1
    2bc6:	9e 83       	std	Y+6, r25	; 0x06
    2bc8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bca:	8d 81       	ldd	r24, Y+5	; 0x05
    2bcc:	9e 81       	ldd	r25, Y+6	; 0x06
    2bce:	00 97       	sbiw	r24, 0x00	; 0
    2bd0:	69 f7       	brne	.-38     	; 0x2bac <OpenDoor+0xbc>
    2bd2:	14 c0       	rjmp	.+40     	; 0x2bfc <OpenDoor+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bd4:	6f 81       	ldd	r22, Y+7	; 0x07
    2bd6:	78 85       	ldd	r23, Y+8	; 0x08
    2bd8:	89 85       	ldd	r24, Y+9	; 0x09
    2bda:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be0:	dc 01       	movw	r26, r24
    2be2:	cb 01       	movw	r24, r22
    2be4:	9e 83       	std	Y+6, r25	; 0x06
    2be6:	8d 83       	std	Y+5, r24	; 0x05
    2be8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bea:	9e 81       	ldd	r25, Y+6	; 0x06
    2bec:	9a 83       	std	Y+2, r25	; 0x02
    2bee:	89 83       	std	Y+1, r24	; 0x01
    2bf0:	89 81       	ldd	r24, Y+1	; 0x01
    2bf2:	9a 81       	ldd	r25, Y+2	; 0x02
    2bf4:	01 97       	sbiw	r24, 0x01	; 1
    2bf6:	f1 f7       	brne	.-4      	; 0x2bf4 <OpenDoor+0x104>
    2bf8:	9a 83       	std	Y+2, r25	; 0x02
    2bfa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(800);
	DIO_voidSetPinValue(DIO_PORTC,DIO_PIN2,DIO_LOW);
    2bfc:	82 e0       	ldi	r24, 0x02	; 2
    2bfe:	62 e0       	ldi	r22, 0x02	; 2
    2c00:	40 e0       	ldi	r20, 0x00	; 0
    2c02:	0e 94 f0 06 	call	0xde0	; 0xde0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTC,DIO_PIN3,DIO_LOW);
    2c06:	82 e0       	ldi	r24, 0x02	; 2
    2c08:	63 e0       	ldi	r22, 0x03	; 3
    2c0a:	40 e0       	ldi	r20, 0x00	; 0
    2c0c:	0e 94 f0 06 	call	0xde0	; 0xde0 <DIO_voidSetPinValue>

}
    2c10:	2e 96       	adiw	r28, 0x0e	; 14
    2c12:	0f b6       	in	r0, 0x3f	; 63
    2c14:	f8 94       	cli
    2c16:	de bf       	out	0x3e, r29	; 62
    2c18:	0f be       	out	0x3f, r0	; 63
    2c1a:	cd bf       	out	0x3d, r28	; 61
    2c1c:	cf 91       	pop	r28
    2c1e:	df 91       	pop	r29
    2c20:	08 95       	ret

00002c22 <CloseDoor>:
/*----------------------------------------------------------------------------------------------------------------------*/

void CloseDoor 				 (void)
{
    2c22:	df 93       	push	r29
    2c24:	cf 93       	push	r28
    2c26:	cd b7       	in	r28, 0x3d	; 61
    2c28:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DIO_PORTC,DIO_PIN2,DIO_LOW);
    2c2a:	82 e0       	ldi	r24, 0x02	; 2
    2c2c:	62 e0       	ldi	r22, 0x02	; 2
    2c2e:	40 e0       	ldi	r20, 0x00	; 0
    2c30:	0e 94 f0 06 	call	0xde0	; 0xde0 <DIO_voidSetPinValue>
}
    2c34:	cf 91       	pop	r28
    2c36:	df 91       	pop	r29
    2c38:	08 95       	ret

00002c3a <LCD_voidWrite_u32Number>:
/*----------------------------------------------------------------------------------------------------------------------*/

void LCD_voidWrite_u32Number ( u32 Copy_u32Number)
{
    2c3a:	0f 93       	push	r16
    2c3c:	1f 93       	push	r17
    2c3e:	df 93       	push	r29
    2c40:	cf 93       	push	r28
    2c42:	cd b7       	in	r28, 0x3d	; 61
    2c44:	de b7       	in	r29, 0x3e	; 62
    2c46:	6b 97       	sbiw	r28, 0x1b	; 27
    2c48:	0f b6       	in	r0, 0x3f	; 63
    2c4a:	f8 94       	cli
    2c4c:	de bf       	out	0x3e, r29	; 62
    2c4e:	0f be       	out	0x3f, r0	; 63
    2c50:	cd bf       	out	0x3d, r28	; 61
    2c52:	68 8f       	std	Y+24, r22	; 0x18
    2c54:	79 8f       	std	Y+25, r23	; 0x19
    2c56:	8a 8f       	std	Y+26, r24	; 0x1a
    2c58:	9b 8f       	std	Y+27, r25	; 0x1b
    u8 Arr[20] ;
    u8 i=0 ;
    2c5a:	1b 82       	std	Y+3, r1	; 0x03
    2c5c:	2d c0       	rjmp	.+90     	; 0x2cb8 <LCD_voidWrite_u32Number+0x7e>
    while ( Copy_u32Number > 0 )
    {
        Arr[i] = Copy_u32Number % 10 ;
    2c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c60:	08 2f       	mov	r16, r24
    2c62:	10 e0       	ldi	r17, 0x00	; 0
    2c64:	88 8d       	ldd	r24, Y+24	; 0x18
    2c66:	99 8d       	ldd	r25, Y+25	; 0x19
    2c68:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2c6a:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2c6c:	2a e0       	ldi	r18, 0x0A	; 10
    2c6e:	30 e0       	ldi	r19, 0x00	; 0
    2c70:	40 e0       	ldi	r20, 0x00	; 0
    2c72:	50 e0       	ldi	r21, 0x00	; 0
    2c74:	bc 01       	movw	r22, r24
    2c76:	cd 01       	movw	r24, r26
    2c78:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <__udivmodsi4>
    2c7c:	dc 01       	movw	r26, r24
    2c7e:	cb 01       	movw	r24, r22
    2c80:	28 2f       	mov	r18, r24
    2c82:	ce 01       	movw	r24, r28
    2c84:	04 96       	adiw	r24, 0x04	; 4
    2c86:	fc 01       	movw	r30, r24
    2c88:	e0 0f       	add	r30, r16
    2c8a:	f1 1f       	adc	r31, r17
    2c8c:	20 83       	st	Z, r18
        Copy_u32Number /= 10 ;
    2c8e:	88 8d       	ldd	r24, Y+24	; 0x18
    2c90:	99 8d       	ldd	r25, Y+25	; 0x19
    2c92:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2c94:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2c96:	2a e0       	ldi	r18, 0x0A	; 10
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	40 e0       	ldi	r20, 0x00	; 0
    2c9c:	50 e0       	ldi	r21, 0x00	; 0
    2c9e:	bc 01       	movw	r22, r24
    2ca0:	cd 01       	movw	r24, r26
    2ca2:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <__udivmodsi4>
    2ca6:	da 01       	movw	r26, r20
    2ca8:	c9 01       	movw	r24, r18
    2caa:	88 8f       	std	Y+24, r24	; 0x18
    2cac:	99 8f       	std	Y+25, r25	; 0x19
    2cae:	aa 8f       	std	Y+26, r26	; 0x1a
    2cb0:	bb 8f       	std	Y+27, r27	; 0x1b
        i++;
    2cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb4:	8f 5f       	subi	r24, 0xFF	; 255
    2cb6:	8b 83       	std	Y+3, r24	; 0x03

void LCD_voidWrite_u32Number ( u32 Copy_u32Number)
{
    u8 Arr[20] ;
    u8 i=0 ;
    while ( Copy_u32Number > 0 )
    2cb8:	88 8d       	ldd	r24, Y+24	; 0x18
    2cba:	99 8d       	ldd	r25, Y+25	; 0x19
    2cbc:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2cbe:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2cc0:	00 97       	sbiw	r24, 0x00	; 0
    2cc2:	a1 05       	cpc	r26, r1
    2cc4:	b1 05       	cpc	r27, r1
    2cc6:	59 f6       	brne	.-106    	; 0x2c5e <LCD_voidWrite_u32Number+0x24>
    {
        Arr[i] = Copy_u32Number % 10 ;
        Copy_u32Number /= 10 ;
        i++;
    }
    i--;
    2cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cca:	81 50       	subi	r24, 0x01	; 1
    2ccc:	8b 83       	std	Y+3, r24	; 0x03
    for( s16 j=i ; j>=0 ; j--)
    2cce:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd0:	88 2f       	mov	r24, r24
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	9a 83       	std	Y+2, r25	; 0x02
    2cd6:	89 83       	std	Y+1, r24	; 0x01
    2cd8:	10 c0       	rjmp	.+32     	; 0x2cfa <LCD_voidWrite_u32Number+0xc0>
    {
        LCD_voidSendChar( Arr[j] + '0' );
    2cda:	29 81       	ldd	r18, Y+1	; 0x01
    2cdc:	3a 81       	ldd	r19, Y+2	; 0x02
    2cde:	ce 01       	movw	r24, r28
    2ce0:	04 96       	adiw	r24, 0x04	; 4
    2ce2:	fc 01       	movw	r30, r24
    2ce4:	e2 0f       	add	r30, r18
    2ce6:	f3 1f       	adc	r31, r19
    2ce8:	80 81       	ld	r24, Z
    2cea:	80 5d       	subi	r24, 0xD0	; 208
    2cec:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <LCD_voidSendChar>
        Arr[i] = Copy_u32Number % 10 ;
        Copy_u32Number /= 10 ;
        i++;
    }
    i--;
    for( s16 j=i ; j>=0 ; j--)
    2cf0:	89 81       	ldd	r24, Y+1	; 0x01
    2cf2:	9a 81       	ldd	r25, Y+2	; 0x02
    2cf4:	01 97       	sbiw	r24, 0x01	; 1
    2cf6:	9a 83       	std	Y+2, r25	; 0x02
    2cf8:	89 83       	std	Y+1, r24	; 0x01
    2cfa:	89 81       	ldd	r24, Y+1	; 0x01
    2cfc:	9a 81       	ldd	r25, Y+2	; 0x02
    2cfe:	99 23       	and	r25, r25
    2d00:	64 f7       	brge	.-40     	; 0x2cda <LCD_voidWrite_u32Number+0xa0>
    {
        LCD_voidSendChar( Arr[j] + '0' );
    }
}
    2d02:	6b 96       	adiw	r28, 0x1b	; 27
    2d04:	0f b6       	in	r0, 0x3f	; 63
    2d06:	f8 94       	cli
    2d08:	de bf       	out	0x3e, r29	; 62
    2d0a:	0f be       	out	0x3f, r0	; 63
    2d0c:	cd bf       	out	0x3d, r28	; 61
    2d0e:	cf 91       	pop	r28
    2d10:	df 91       	pop	r29
    2d12:	1f 91       	pop	r17
    2d14:	0f 91       	pop	r16
    2d16:	08 95       	ret

00002d18 <__divmodhi4>:
    2d18:	97 fb       	bst	r25, 7
    2d1a:	09 2e       	mov	r0, r25
    2d1c:	07 26       	eor	r0, r23
    2d1e:	0a d0       	rcall	.+20     	; 0x2d34 <__divmodhi4_neg1>
    2d20:	77 fd       	sbrc	r23, 7
    2d22:	04 d0       	rcall	.+8      	; 0x2d2c <__divmodhi4_neg2>
    2d24:	2e d0       	rcall	.+92     	; 0x2d82 <__udivmodhi4>
    2d26:	06 d0       	rcall	.+12     	; 0x2d34 <__divmodhi4_neg1>
    2d28:	00 20       	and	r0, r0
    2d2a:	1a f4       	brpl	.+6      	; 0x2d32 <__divmodhi4_exit>

00002d2c <__divmodhi4_neg2>:
    2d2c:	70 95       	com	r23
    2d2e:	61 95       	neg	r22
    2d30:	7f 4f       	sbci	r23, 0xFF	; 255

00002d32 <__divmodhi4_exit>:
    2d32:	08 95       	ret

00002d34 <__divmodhi4_neg1>:
    2d34:	f6 f7       	brtc	.-4      	; 0x2d32 <__divmodhi4_exit>
    2d36:	90 95       	com	r25
    2d38:	81 95       	neg	r24
    2d3a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d3c:	08 95       	ret

00002d3e <__udivmodsi4>:
    2d3e:	a1 e2       	ldi	r26, 0x21	; 33
    2d40:	1a 2e       	mov	r1, r26
    2d42:	aa 1b       	sub	r26, r26
    2d44:	bb 1b       	sub	r27, r27
    2d46:	fd 01       	movw	r30, r26
    2d48:	0d c0       	rjmp	.+26     	; 0x2d64 <__udivmodsi4_ep>

00002d4a <__udivmodsi4_loop>:
    2d4a:	aa 1f       	adc	r26, r26
    2d4c:	bb 1f       	adc	r27, r27
    2d4e:	ee 1f       	adc	r30, r30
    2d50:	ff 1f       	adc	r31, r31
    2d52:	a2 17       	cp	r26, r18
    2d54:	b3 07       	cpc	r27, r19
    2d56:	e4 07       	cpc	r30, r20
    2d58:	f5 07       	cpc	r31, r21
    2d5a:	20 f0       	brcs	.+8      	; 0x2d64 <__udivmodsi4_ep>
    2d5c:	a2 1b       	sub	r26, r18
    2d5e:	b3 0b       	sbc	r27, r19
    2d60:	e4 0b       	sbc	r30, r20
    2d62:	f5 0b       	sbc	r31, r21

00002d64 <__udivmodsi4_ep>:
    2d64:	66 1f       	adc	r22, r22
    2d66:	77 1f       	adc	r23, r23
    2d68:	88 1f       	adc	r24, r24
    2d6a:	99 1f       	adc	r25, r25
    2d6c:	1a 94       	dec	r1
    2d6e:	69 f7       	brne	.-38     	; 0x2d4a <__udivmodsi4_loop>
    2d70:	60 95       	com	r22
    2d72:	70 95       	com	r23
    2d74:	80 95       	com	r24
    2d76:	90 95       	com	r25
    2d78:	9b 01       	movw	r18, r22
    2d7a:	ac 01       	movw	r20, r24
    2d7c:	bd 01       	movw	r22, r26
    2d7e:	cf 01       	movw	r24, r30
    2d80:	08 95       	ret

00002d82 <__udivmodhi4>:
    2d82:	aa 1b       	sub	r26, r26
    2d84:	bb 1b       	sub	r27, r27
    2d86:	51 e1       	ldi	r21, 0x11	; 17
    2d88:	07 c0       	rjmp	.+14     	; 0x2d98 <__udivmodhi4_ep>

00002d8a <__udivmodhi4_loop>:
    2d8a:	aa 1f       	adc	r26, r26
    2d8c:	bb 1f       	adc	r27, r27
    2d8e:	a6 17       	cp	r26, r22
    2d90:	b7 07       	cpc	r27, r23
    2d92:	10 f0       	brcs	.+4      	; 0x2d98 <__udivmodhi4_ep>
    2d94:	a6 1b       	sub	r26, r22
    2d96:	b7 0b       	sbc	r27, r23

00002d98 <__udivmodhi4_ep>:
    2d98:	88 1f       	adc	r24, r24
    2d9a:	99 1f       	adc	r25, r25
    2d9c:	5a 95       	dec	r21
    2d9e:	a9 f7       	brne	.-22     	; 0x2d8a <__udivmodhi4_loop>
    2da0:	80 95       	com	r24
    2da2:	90 95       	com	r25
    2da4:	bc 01       	movw	r22, r24
    2da6:	cd 01       	movw	r24, r26
    2da8:	08 95       	ret

00002daa <__prologue_saves__>:
    2daa:	2f 92       	push	r2
    2dac:	3f 92       	push	r3
    2dae:	4f 92       	push	r4
    2db0:	5f 92       	push	r5
    2db2:	6f 92       	push	r6
    2db4:	7f 92       	push	r7
    2db6:	8f 92       	push	r8
    2db8:	9f 92       	push	r9
    2dba:	af 92       	push	r10
    2dbc:	bf 92       	push	r11
    2dbe:	cf 92       	push	r12
    2dc0:	df 92       	push	r13
    2dc2:	ef 92       	push	r14
    2dc4:	ff 92       	push	r15
    2dc6:	0f 93       	push	r16
    2dc8:	1f 93       	push	r17
    2dca:	cf 93       	push	r28
    2dcc:	df 93       	push	r29
    2dce:	cd b7       	in	r28, 0x3d	; 61
    2dd0:	de b7       	in	r29, 0x3e	; 62
    2dd2:	ca 1b       	sub	r28, r26
    2dd4:	db 0b       	sbc	r29, r27
    2dd6:	0f b6       	in	r0, 0x3f	; 63
    2dd8:	f8 94       	cli
    2dda:	de bf       	out	0x3e, r29	; 62
    2ddc:	0f be       	out	0x3f, r0	; 63
    2dde:	cd bf       	out	0x3d, r28	; 61
    2de0:	09 94       	ijmp

00002de2 <__epilogue_restores__>:
    2de2:	2a 88       	ldd	r2, Y+18	; 0x12
    2de4:	39 88       	ldd	r3, Y+17	; 0x11
    2de6:	48 88       	ldd	r4, Y+16	; 0x10
    2de8:	5f 84       	ldd	r5, Y+15	; 0x0f
    2dea:	6e 84       	ldd	r6, Y+14	; 0x0e
    2dec:	7d 84       	ldd	r7, Y+13	; 0x0d
    2dee:	8c 84       	ldd	r8, Y+12	; 0x0c
    2df0:	9b 84       	ldd	r9, Y+11	; 0x0b
    2df2:	aa 84       	ldd	r10, Y+10	; 0x0a
    2df4:	b9 84       	ldd	r11, Y+9	; 0x09
    2df6:	c8 84       	ldd	r12, Y+8	; 0x08
    2df8:	df 80       	ldd	r13, Y+7	; 0x07
    2dfa:	ee 80       	ldd	r14, Y+6	; 0x06
    2dfc:	fd 80       	ldd	r15, Y+5	; 0x05
    2dfe:	0c 81       	ldd	r16, Y+4	; 0x04
    2e00:	1b 81       	ldd	r17, Y+3	; 0x03
    2e02:	aa 81       	ldd	r26, Y+2	; 0x02
    2e04:	b9 81       	ldd	r27, Y+1	; 0x01
    2e06:	ce 0f       	add	r28, r30
    2e08:	d1 1d       	adc	r29, r1
    2e0a:	0f b6       	in	r0, 0x3f	; 63
    2e0c:	f8 94       	cli
    2e0e:	de bf       	out	0x3e, r29	; 62
    2e10:	0f be       	out	0x3f, r0	; 63
    2e12:	cd bf       	out	0x3d, r28	; 61
    2e14:	ed 01       	movw	r28, r26
    2e16:	08 95       	ret

00002e18 <_exit>:
    2e18:	f8 94       	cli

00002e1a <__stop_program>:
    2e1a:	ff cf       	rjmp	.-2      	; 0x2e1a <__stop_program>
