
smart_home_master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000588e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001c6  00800060  0000588e  00005922  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000030  00800226  00800226  00005ae8  2**0
                  ALLOC
  3 .stab         00007428  00000000  00000000  00005ae8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002e88  00000000  00000000  0000cf10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000fd98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000fed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00010048  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00011c91  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00012b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0001392c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00013a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00013d19  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000144e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 58 11 	jmp	0x22b0	; 0x22b0 <__vector_1>
       8:	0c 94 8b 11 	jmp	0x2316	; 0x2316 <__vector_2>
       c:	0c 94 be 11 	jmp	0x237c	; 0x237c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 58 09 	jmp	0x12b0	; 0x12b0 <__vector_10>
      2c:	0c 94 09 09 	jmp	0x1212	; 0x1212 <__vector_11>
      30:	0c 94 49 0b 	jmp	0x1692	; 0x1692 <__vector_12>
      34:	0c 94 7f 06 	jmp	0xcfe	; 0xcfe <__vector_13>
      38:	0c 94 a1 06 	jmp	0xd42	; 0xd42 <__vector_14>
      3c:	0c 94 bc 06 	jmp	0xd78	; 0xd78 <__vector_15>
      40:	0c 94 8c 18 	jmp	0x3118	; 0x3118 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e8       	ldi	r30, 0x8E	; 142
      68:	f8 e5       	ldi	r31, 0x58	; 88
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 32       	cpi	r26, 0x26	; 38
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a6 e2       	ldi	r26, 0x26	; 38
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 35       	cpi	r26, 0x56	; 86
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 63 25 	call	0x4ac6	; 0x4ac6 <main>
      8a:	0c 94 45 2c 	jmp	0x588a	; 0x588a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0e 2c 	jmp	0x581c	; 0x581c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab ef       	ldi	r26, 0xFB	; 251
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2a 2c 	jmp	0x5854	; 0x5854 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1a 2c 	jmp	0x5834	; 0x5834 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 36 2c 	jmp	0x586c	; 0x586c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1a 2c 	jmp	0x5834	; 0x5834 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 36 2c 	jmp	0x586c	; 0x586c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0e 2c 	jmp	0x581c	; 0x581c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b ef       	ldi	r24, 0xFB	; 251
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2a 2c 	jmp	0x5854	; 0x5854 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1a 2c 	jmp	0x5834	; 0x5834 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 36 2c 	jmp	0x586c	; 0x586c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 1a 2c 	jmp	0x5834	; 0x5834 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 36 2c 	jmp	0x586c	; 0x586c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 1a 2c 	jmp	0x5834	; 0x5834 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 36 2c 	jmp	0x586c	; 0x586c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 1e 2c 	jmp	0x583c	; 0x583c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 3a 2c 	jmp	0x5874	; 0x5874 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <USART_voidInit>:
u8 Global_u8TXData = 0 ;
u8 *Global_u8RXData = 0 ;


void USART_voidInit (void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <USART_voidInit+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62

/*          BAUD RATE Selection         */
    CLR_BIT(UBRRH_REG,UBRRH_URSEL);                    // access UBRRH to Configer the BAUD Rate
     b50:	a0 e4       	ldi	r26, 0x40	; 64
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	e0 e4       	ldi	r30, 0x40	; 64
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	80 81       	ld	r24, Z
     b5a:	8f 77       	andi	r24, 0x7F	; 127
     b5c:	8c 93       	st	X, r24
    u16 UBRR = 0 ;
     b5e:	1a 82       	std	Y+2, r1	; 0x02
     b60:	19 82       	std	Y+1, r1	; 0x01
    #if( SPEED == NORMAL_SPEED )                         // U2X = 1  Normal Speed Transsmition
        UBRR = ( CPU_CLK / ( BAUD_RATE * 8UL ) ) - 1 ;
    #elif( SPEED == DOUBBLE_SPEED )                      // U2X = 0  Double Speed Transsmition
        UBRR = ( CPU_CLK / ( BAUD_RATE * 16UL ) ) - 1 ;
     b62:	83 e3       	ldi	r24, 0x33	; 51
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	9a 83       	std	Y+2, r25	; 0x02
     b68:	89 83       	std	Y+1, r24	; 0x01
    #endif
    UBRRL_REG = (u8)(UBRR);                     // first 8 Bit
     b6a:	e9 e2       	ldi	r30, 0x29	; 41
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	89 81       	ldd	r24, Y+1	; 0x01
     b70:	80 83       	st	Z, r24
    UBRRH_REG = (u8)(UBRR >> 8);                // second 8 Bit
     b72:	e0 e4       	ldi	r30, 0x40	; 64
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	89 81       	ldd	r24, Y+1	; 0x01
     b78:	9a 81       	ldd	r25, Y+2	; 0x02
     b7a:	89 2f       	mov	r24, r25
     b7c:	99 27       	eor	r25, r25
     b7e:	80 83       	st	Z, r24

/*        USART Initilization           */
    SET_BIT(UCSRC_REG,UCSRC_URSEL);             // Select UCSRC_REG
     b80:	a0 e4       	ldi	r26, 0x40	; 64
     b82:	b0 e0       	ldi	r27, 0x00	; 0
     b84:	e0 e4       	ldi	r30, 0x40	; 64
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	80 81       	ld	r24, Z
     b8a:	80 68       	ori	r24, 0x80	; 128
     b8c:	8c 93       	st	X, r24
    CLR_BIT(UCSRC_REG,UCSRC_UMSE1);           // select Async Mode
     b8e:	a0 e4       	ldi	r26, 0x40	; 64
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	e0 e4       	ldi	r30, 0x40	; 64
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	8f 7b       	andi	r24, 0xBF	; 191
     b9a:	8c 93       	st	X, r24

/*         Select Parity Mode           */    
    #if ( Parity_Mode == DISABLE )              // Select Parity (Disable)
        CLR_BIT(UCSRC_REG,UCSRC_UPM0);
     b9c:	a0 e4       	ldi	r26, 0x40	; 64
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	e0 e4       	ldi	r30, 0x40	; 64
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	80 81       	ld	r24, Z
     ba6:	8f 7e       	andi	r24, 0xEF	; 239
     ba8:	8c 93       	st	X, r24
        CLR_BIT(UCSRC_REG,UCSRC_UPM1);
     baa:	a0 e4       	ldi	r26, 0x40	; 64
     bac:	b0 e0       	ldi	r27, 0x00	; 0
     bae:	e0 e4       	ldi	r30, 0x40	; 64
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 81       	ld	r24, Z
     bb4:	8f 7d       	andi	r24, 0xDF	; 223
     bb6:	8c 93       	st	X, r24
          SET_BIT(UCSRC_REG,UCSRC_UPM1);   
    #endif

/*          Select STOP BIT             */
    #if ( STOP_BIT == ONE )
    CLR_BIT(UCSRC_REG,UCSRC_USBS);             // select 1 Stop Bit
     bb8:	a0 e4       	ldi	r26, 0x40	; 64
     bba:	b0 e0       	ldi	r27, 0x00	; 0
     bbc:	e0 e4       	ldi	r30, 0x40	; 64
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	80 81       	ld	r24, Z
     bc2:	87 7f       	andi	r24, 0xF7	; 247
     bc4:	8c 93       	st	X, r24
	#elif DATA_SIZE == DATA_SIZE_7_BIT
		CLR_BIT(UCSRC_REG , UCSRC_UCSZ0) ;
		SET_BIT(UCSRC_REG , UCSRC_UCSZ1) ;
		CLR_BIT(UCSRB_REG , UCSRB_UCSZ2) ;
	#elif DATA_SIZE == DATA_SIZE_8_BIT
		SET_BIT(UCSRC_REG , UCSRC_UCSZ0) ;
     bc6:	a0 e4       	ldi	r26, 0x40	; 64
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	e0 e4       	ldi	r30, 0x40	; 64
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	80 81       	ld	r24, Z
     bd0:	82 60       	ori	r24, 0x02	; 2
     bd2:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG , UCSRC_UCSZ1) ;
     bd4:	a0 e4       	ldi	r26, 0x40	; 64
     bd6:	b0 e0       	ldi	r27, 0x00	; 0
     bd8:	e0 e4       	ldi	r30, 0x40	; 64
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	80 81       	ld	r24, Z
     bde:	84 60       	ori	r24, 0x04	; 4
     be0:	8c 93       	st	X, r24
		CLR_BIT(UCSRB_REG , UCSRB_UCSZ2) ;
     be2:	aa e2       	ldi	r26, 0x2A	; 42
     be4:	b0 e0       	ldi	r27, 0x00	; 0
     be6:	ea e2       	ldi	r30, 0x2A	; 42
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	8b 7f       	andi	r24, 0xFB	; 251
     bee:	8c 93       	st	X, r24
	#endif



/*          Enable RX & TX              */     
    SET_BIT(UCSRB_REG,UCSRB_TXEN);               // Enable TX 
     bf0:	aa e2       	ldi	r26, 0x2A	; 42
     bf2:	b0 e0       	ldi	r27, 0x00	; 0
     bf4:	ea e2       	ldi	r30, 0x2A	; 42
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	80 81       	ld	r24, Z
     bfa:	88 60       	ori	r24, 0x08	; 8
     bfc:	8c 93       	st	X, r24
    SET_BIT(UCSRB_REG,UCSRB_RXEN);               // Enable RX 
     bfe:	aa e2       	ldi	r26, 0x2A	; 42
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	ea e2       	ldi	r30, 0x2A	; 42
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	80 61       	ori	r24, 0x10	; 16
     c0a:	8c 93       	st	X, r24

}
     c0c:	0f 90       	pop	r0
     c0e:	0f 90       	pop	r0
     c10:	cf 91       	pop	r28
     c12:	df 91       	pop	r29
     c14:	08 95       	ret

00000c16 <USART_voidSendData>:

void USART_voidSendData (u8 Copy_u8Data)
{
     c16:	df 93       	push	r29
     c18:	cf 93       	push	r28
     c1a:	0f 92       	push	r0
     c1c:	cd b7       	in	r28, 0x3d	; 61
     c1e:	de b7       	in	r29, 0x3e	; 62
     c20:	89 83       	std	Y+1, r24	; 0x01
    // Polling flag Data Register is Empty.
    while ( (GET_BIT(UCSRA_REG,UCSRA_UDRE)) == 0 );
     c22:	eb e2       	ldi	r30, 0x2B	; 43
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	88 2f       	mov	r24, r24
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	80 72       	andi	r24, 0x20	; 32
     c2e:	90 70       	andi	r25, 0x00	; 0
     c30:	00 97       	sbiw	r24, 0x00	; 0
     c32:	b9 f3       	breq	.-18     	; 0xc22 <USART_voidSendData+0xc>
    // Transsmit Data.
    UDR_REG = Copy_u8Data ;
     c34:	ec e2       	ldi	r30, 0x2C	; 44
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	89 81       	ldd	r24, Y+1	; 0x01
     c3a:	80 83       	st	Z, r24
    /* Data Transsmition is Complete So The Flag of [UCSRA_TXC] is Raised */
    /* Then we Need Clear This Flag by SET ONE , To Next Transsmition     */
    SET_BIT(UCSRA_REG,UCSRA_TXC);
     c3c:	ab e2       	ldi	r26, 0x2B	; 43
     c3e:	b0 e0       	ldi	r27, 0x00	; 0
     c40:	eb e2       	ldi	r30, 0x2B	; 43
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	80 81       	ld	r24, Z
     c46:	80 64       	ori	r24, 0x40	; 64
     c48:	8c 93       	st	X, r24
}
     c4a:	0f 90       	pop	r0
     c4c:	cf 91       	pop	r28
     c4e:	df 91       	pop	r29
     c50:	08 95       	ret

00000c52 <USART_voidRecieveData>:


void USART_voidRecieveData (u8 *Copy_Pu8Data)
{
     c52:	df 93       	push	r29
     c54:	cf 93       	push	r28
     c56:	00 d0       	rcall	.+0      	; 0xc58 <USART_voidRecieveData+0x6>
     c58:	cd b7       	in	r28, 0x3d	; 61
     c5a:	de b7       	in	r29, 0x3e	; 62
     c5c:	9a 83       	std	Y+2, r25	; 0x02
     c5e:	89 83       	std	Y+1, r24	; 0x01
    // Polling flag Data Recieve is Complete.
    while ( (GET_BIT(UCSRA_REG,UCSRA_RXC)) == 0 );
     c60:	eb e2       	ldi	r30, 0x2B	; 43
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	80 81       	ld	r24, Z
     c66:	88 23       	and	r24, r24
     c68:	dc f7       	brge	.-10     	; 0xc60 <USART_voidRecieveData+0xe>
    // Recieve Data in Passing Pointer.
    *Copy_Pu8Data = UDR_REG ;
     c6a:	ec e2       	ldi	r30, 0x2C	; 44
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 81       	ld	r24, Z
     c70:	e9 81       	ldd	r30, Y+1	; 0x01
     c72:	fa 81       	ldd	r31, Y+2	; 0x02
     c74:	80 83       	st	Z, r24
}
     c76:	0f 90       	pop	r0
     c78:	0f 90       	pop	r0
     c7a:	cf 91       	pop	r28
     c7c:	df 91       	pop	r29
     c7e:	08 95       	ret

00000c80 <USART_voidAsyncSendData>:


void USART_voidAsyncSendData ( u8 Copy_u8Data , u8 *Copy_Pu8CallBackFunIndication_TXC )
{
     c80:	df 93       	push	r29
     c82:	cf 93       	push	r28
     c84:	00 d0       	rcall	.+0      	; 0xc86 <USART_voidAsyncSendData+0x6>
     c86:	0f 92       	push	r0
     c88:	cd b7       	in	r28, 0x3d	; 61
     c8a:	de b7       	in	r29, 0x3e	; 62
     c8c:	89 83       	std	Y+1, r24	; 0x01
     c8e:	7b 83       	std	Y+3, r23	; 0x03
     c90:	6a 83       	std	Y+2, r22	; 0x02
    SET_BIT(UCSRB_REG,UCSRB_UDRIE);                              // Enable UDRIE Data Register Empty Interrupt Enable.
     c92:	aa e2       	ldi	r26, 0x2A	; 42
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	ea e2       	ldi	r30, 0x2A	; 42
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	80 62       	ori	r24, 0x20	; 32
     c9e:	8c 93       	st	X, r24
    SET_BIT(UCSRB_REG,UCSRB_TXCIE);                              // Enable TXCIE Transmitt Complete Interrupt Enable.( For Indication )
     ca0:	aa e2       	ldi	r26, 0x2A	; 42
     ca2:	b0 e0       	ldi	r27, 0x00	; 0
     ca4:	ea e2       	ldi	r30, 0x2A	; 42
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	80 64       	ori	r24, 0x40	; 64
     cac:	8c 93       	st	X, r24
    Global_u8TXData = Copy_u8Data ;                              // Assign Data to Global Variable to use it in ISR Fun.
     cae:	89 81       	ldd	r24, Y+1	; 0x01
     cb0:	80 93 28 02 	sts	0x0228, r24
    Global_PF_Vector_15 = Copy_Pu8CallBackFunIndication_TXC ;    // Assign The pointer that contain adderss of App CallBack Fun to Global pointer to Call it in ISR Fun.
     cb4:	8a 81       	ldd	r24, Y+2	; 0x02
     cb6:	9b 81       	ldd	r25, Y+3	; 0x03
     cb8:	90 93 27 02 	sts	0x0227, r25
     cbc:	80 93 26 02 	sts	0x0226, r24
}
     cc0:	0f 90       	pop	r0
     cc2:	0f 90       	pop	r0
     cc4:	0f 90       	pop	r0
     cc6:	cf 91       	pop	r28
     cc8:	df 91       	pop	r29
     cca:	08 95       	ret

00000ccc <USART_voidAsyncRecieveData>:


void USART_voidAsyncRecieveData (u8 *Copy_Pu8Data)
{
     ccc:	df 93       	push	r29
     cce:	cf 93       	push	r28
     cd0:	00 d0       	rcall	.+0      	; 0xcd2 <USART_voidAsyncRecieveData+0x6>
     cd2:	cd b7       	in	r28, 0x3d	; 61
     cd4:	de b7       	in	r29, 0x3e	; 62
     cd6:	9a 83       	std	Y+2, r25	; 0x02
     cd8:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(UCSRB_REG,UCSRB_RXCIE);            // Enable RXCIE Recieve Complete Interrupt Enable.
     cda:	aa e2       	ldi	r26, 0x2A	; 42
     cdc:	b0 e0       	ldi	r27, 0x00	; 0
     cde:	ea e2       	ldi	r30, 0x2A	; 42
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	80 68       	ori	r24, 0x80	; 128
     ce6:	8c 93       	st	X, r24
    Global_u8RXData = Copy_Pu8Data ;           // assign Passing Pointer to Global Pointer to Read Revived Data on This Passing Pointer in ISR (RXCIE)
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	9a 81       	ldd	r25, Y+2	; 0x02
     cec:	90 93 2a 02 	sts	0x022A, r25
     cf0:	80 93 29 02 	sts	0x0229, r24
}
     cf4:	0f 90       	pop	r0
     cf6:	0f 90       	pop	r0
     cf8:	cf 91       	pop	r28
     cfa:	df 91       	pop	r29
     cfc:	08 95       	ret

00000cfe <__vector_13>:

void __vector_13 (void)    __attribute__((signal));
void __vector_13 (void)
{
     cfe:	1f 92       	push	r1
     d00:	0f 92       	push	r0
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	0f 92       	push	r0
     d06:	11 24       	eor	r1, r1
     d08:	8f 93       	push	r24
     d0a:	af 93       	push	r26
     d0c:	bf 93       	push	r27
     d0e:	ef 93       	push	r30
     d10:	ff 93       	push	r31
     d12:	df 93       	push	r29
     d14:	cf 93       	push	r28
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
    *Global_u8RXData = UDR_REG ;        // Recieve Data in Passing Pointer.
     d1a:	e0 91 29 02 	lds	r30, 0x0229
     d1e:	f0 91 2a 02 	lds	r31, 0x022A
     d22:	ac e2       	ldi	r26, 0x2C	; 44
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	8c 91       	ld	r24, X
     d28:	80 83       	st	Z, r24
}
     d2a:	cf 91       	pop	r28
     d2c:	df 91       	pop	r29
     d2e:	ff 91       	pop	r31
     d30:	ef 91       	pop	r30
     d32:	bf 91       	pop	r27
     d34:	af 91       	pop	r26
     d36:	8f 91       	pop	r24
     d38:	0f 90       	pop	r0
     d3a:	0f be       	out	0x3f, r0	; 63
     d3c:	0f 90       	pop	r0
     d3e:	1f 90       	pop	r1
     d40:	18 95       	reti

00000d42 <__vector_14>:



void __vector_14 (void)    __attribute__((signal));
void __vector_14 (void)
{ 
     d42:	1f 92       	push	r1
     d44:	0f 92       	push	r0
     d46:	0f b6       	in	r0, 0x3f	; 63
     d48:	0f 92       	push	r0
     d4a:	11 24       	eor	r1, r1
     d4c:	8f 93       	push	r24
     d4e:	ef 93       	push	r30
     d50:	ff 93       	push	r31
     d52:	df 93       	push	r29
     d54:	cf 93       	push	r28
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
    UDR_REG = Global_u8TXData ;         // Transsmit Data.
     d5a:	ec e2       	ldi	r30, 0x2C	; 44
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 91 28 02 	lds	r24, 0x0228
     d62:	80 83       	st	Z, r24
}
     d64:	cf 91       	pop	r28
     d66:	df 91       	pop	r29
     d68:	ff 91       	pop	r31
     d6a:	ef 91       	pop	r30
     d6c:	8f 91       	pop	r24
     d6e:	0f 90       	pop	r0
     d70:	0f be       	out	0x3f, r0	; 63
     d72:	0f 90       	pop	r0
     d74:	1f 90       	pop	r1
     d76:	18 95       	reti

00000d78 <__vector_15>:


void __vector_15 (void)    __attribute__((signal));
void __vector_15 (void)
{
     d78:	1f 92       	push	r1
     d7a:	0f 92       	push	r0
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	0f 92       	push	r0
     d80:	11 24       	eor	r1, r1
     d82:	2f 93       	push	r18
     d84:	3f 93       	push	r19
     d86:	4f 93       	push	r20
     d88:	5f 93       	push	r21
     d8a:	6f 93       	push	r22
     d8c:	7f 93       	push	r23
     d8e:	8f 93       	push	r24
     d90:	9f 93       	push	r25
     d92:	af 93       	push	r26
     d94:	bf 93       	push	r27
     d96:	ef 93       	push	r30
     d98:	ff 93       	push	r31
     d9a:	df 93       	push	r29
     d9c:	cf 93       	push	r28
     d9e:	cd b7       	in	r28, 0x3d	; 61
     da0:	de b7       	in	r29, 0x3e	; 62
   Global_PF_Vector_15 () ; // Call App Function That Indicator to Transmittion Complete.
     da2:	e0 91 26 02 	lds	r30, 0x0226
     da6:	f0 91 27 02 	lds	r31, 0x0227
     daa:	09 95       	icall
}
     dac:	cf 91       	pop	r28
     dae:	df 91       	pop	r29
     db0:	ff 91       	pop	r31
     db2:	ef 91       	pop	r30
     db4:	bf 91       	pop	r27
     db6:	af 91       	pop	r26
     db8:	9f 91       	pop	r25
     dba:	8f 91       	pop	r24
     dbc:	7f 91       	pop	r23
     dbe:	6f 91       	pop	r22
     dc0:	5f 91       	pop	r21
     dc2:	4f 91       	pop	r20
     dc4:	3f 91       	pop	r19
     dc6:	2f 91       	pop	r18
     dc8:	0f 90       	pop	r0
     dca:	0f be       	out	0x3f, r0	; 63
     dcc:	0f 90       	pop	r0
     dce:	1f 90       	pop	r1
     dd0:	18 95       	reti

00000dd2 <TIMER1_voidInit>:
u16 Global_u16CompareMatchValue_1B = 0 ;



void TIMER1_voidInit (void)
{
     dd2:	df 93       	push	r29
     dd4:	cf 93       	push	r28
     dd6:	cd b7       	in	r28, 0x3d	; 61
     dd8:	de b7       	in	r29, 0x3e	; 62
          SET_BIT(TCCR1A_REG,TCCR1A_WGM10);
        CLR_BIT(TCCR1A_REG,TCCR1A_WGM11);
		  SET_BIT(TCCR1B_REG,TCCR1B_WGM12);                 
          SET_BIT(TCCR1B_REG,TCCR1B_WGM13);
    #elif (MODE == FAST_PWM_ICR1)
        CLR_BIT(TCCR1A_REG,TCCR1A_WGM10);
     dda:	af e4       	ldi	r26, 0x4F	; 79
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	ef e4       	ldi	r30, 0x4F	; 79
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	8e 7f       	andi	r24, 0xFE	; 254
     de6:	8c 93       	st	X, r24
          SET_BIT(TCCR1A_REG,TCCR1A_WGM11);
     de8:	af e4       	ldi	r26, 0x4F	; 79
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	ef e4       	ldi	r30, 0x4F	; 79
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	82 60       	ori	r24, 0x02	; 2
     df4:	8c 93       	st	X, r24
		  SET_BIT(TCCR1B_REG,TCCR1B_WGM12);                 
     df6:	ae e4       	ldi	r26, 0x4E	; 78
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	ee e4       	ldi	r30, 0x4E	; 78
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	88 60       	ori	r24, 0x08	; 8
     e02:	8c 93       	st	X, r24
          SET_BIT(TCCR1B_REG,TCCR1B_WGM13);
     e04:	ae e4       	ldi	r26, 0x4E	; 78
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	ee e4       	ldi	r30, 0x4E	; 78
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	80 61       	ori	r24, 0x10	; 16
     e10:	8c 93       	st	X, r24
/*          OC1A Mode Selection                 */
    #if (OC1A_MODE == DISCONNECTED)
        CLR_BIT(TCCR1A_REG,TCCR1A_COM1A0);
        CLR_BIT(TCCR1A_REG,TCCR1A_COM1A1);
    #elif ((OC1A_MODE == SETonTOP_CLEARonCOMPARE) || (OC1A_MODE == SETonCOMPdownCounting_CLEARonCOMPupCounting))
        CLR_BIT(TCCR1A_REG,TCCR1A_COM1A0);
     e12:	af e4       	ldi	r26, 0x4F	; 79
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	ef e4       	ldi	r30, 0x4F	; 79
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	8f 7b       	andi	r24, 0xBF	; 191
     e1e:	8c 93       	st	X, r24
          SET_BIT(TCCR1A_REG,TCCR1A_COM1A1);
     e20:	af e4       	ldi	r26, 0x4F	; 79
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	ef e4       	ldi	r30, 0x4F	; 79
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	80 68       	ori	r24, 0x80	; 128
     e2c:	8c 93       	st	X, r24
    #endif

/*          OC1B Mode Selection                 */

    #if (OC1B_MODE == DISCONNECTED)
        CLR_BIT(TCCR1A_REG,TCCR1A_COM1B0);
     e2e:	af e4       	ldi	r26, 0x4F	; 79
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	ef e4       	ldi	r30, 0x4F	; 79
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	8f 7e       	andi	r24, 0xEF	; 239
     e3a:	8c 93       	st	X, r24
        CLR_BIT(TCCR1A_REG,TCCR1A_COM1B1);
     e3c:	af e4       	ldi	r26, 0x4F	; 79
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	ef e4       	ldi	r30, 0x4F	; 79
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	8f 7d       	andi	r24, 0xDF	; 223
     e48:	8c 93       	st	X, r24

    #endif


/*     TIMER1 Prescaller Selection      */
    TCCR1B_REG = ( TCCR1B_REG & 0b11111000 );              // Clear Prescaller 
     e4a:	ae e4       	ldi	r26, 0x4E	; 78
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	ee e4       	ldi	r30, 0x4E	; 78
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	88 7f       	andi	r24, 0xF8	; 248
     e56:	8c 93       	st	X, r24
    #elif ( PRESCALER == NOT_USE_PRESCALER )
          SET_BIT(TCCR1B_REG,TCCR1B_CS10);
        CLR_BIT(TCCR1B_REG,TCCR1B_CS11);
        CLR_BIT(TCCR1B_REG,TCCR1B_CS12);
    #elif ( PRESCALER == PRESCALER_DIVISION_BY_8 )
        CLR_BIT(TCCR1B_REG,TCCR1B_CS10);
     e58:	ae e4       	ldi	r26, 0x4E	; 78
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	ee e4       	ldi	r30, 0x4E	; 78
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	8e 7f       	andi	r24, 0xFE	; 254
     e64:	8c 93       	st	X, r24
          SET_BIT(TCCR1B_REG,TCCR1B_CS11);
     e66:	ae e4       	ldi	r26, 0x4E	; 78
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	ee e4       	ldi	r30, 0x4E	; 78
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	82 60       	ori	r24, 0x02	; 2
     e72:	8c 93       	st	X, r24
        CLR_BIT(TCCR1B_REG,TCCR1B_CS12);
     e74:	ae e4       	ldi	r26, 0x4E	; 78
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	ee e4       	ldi	r30, 0x4E	; 78
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	8b 7f       	andi	r24, 0xFB	; 251
     e80:	8c 93       	st	X, r24
        SET_BIT(TCCR1B_REG,TCCR1B_CS12);
    #else
        #error  Wrong selection of Prescaller mode
    #endif

}
     e82:	cf 91       	pop	r28
     e84:	df 91       	pop	r29
     e86:	08 95       	ret

00000e88 <TIMER1_voidSetCallBack_OVF>:

void TIMER1_voidSetCallBack_OVF (void (*Local_PointerToFunction_OVF) (void))
{
     e88:	df 93       	push	r29
     e8a:	cf 93       	push	r28
     e8c:	00 d0       	rcall	.+0      	; 0xe8e <TIMER1_voidSetCallBack_OVF+0x6>
     e8e:	cd b7       	in	r28, 0x3d	; 61
     e90:	de b7       	in	r29, 0x3e	; 62
     e92:	9a 83       	std	Y+2, r25	; 0x02
     e94:	89 83       	std	Y+1, r24	; 0x01
    Global_PointerToFunction_OVF_T1 = Local_PointerToFunction_OVF ;
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	9a 81       	ldd	r25, Y+2	; 0x02
     e9a:	90 93 2c 02 	sts	0x022C, r25
     e9e:	80 93 2b 02 	sts	0x022B, r24
}
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	cf 91       	pop	r28
     ea8:	df 91       	pop	r29
     eaa:	08 95       	ret

00000eac <TIMER1_voidSetCallBack_CTC>:


void TIMER1_voidSetCallBack_CTC (void (*Local_PointerToFunction_CTC) (void))
{
     eac:	df 93       	push	r29
     eae:	cf 93       	push	r28
     eb0:	00 d0       	rcall	.+0      	; 0xeb2 <TIMER1_voidSetCallBack_CTC+0x6>
     eb2:	cd b7       	in	r28, 0x3d	; 61
     eb4:	de b7       	in	r29, 0x3e	; 62
     eb6:	9a 83       	std	Y+2, r25	; 0x02
     eb8:	89 83       	std	Y+1, r24	; 0x01
    Global_PointerToFunction_CTC_T1 = Local_PointerToFunction_CTC ;
     eba:	89 81       	ldd	r24, Y+1	; 0x01
     ebc:	9a 81       	ldd	r25, Y+2	; 0x02
     ebe:	90 93 2e 02 	sts	0x022E, r25
     ec2:	80 93 2d 02 	sts	0x022D, r24
}
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	cf 91       	pop	r28
     ecc:	df 91       	pop	r29
     ece:	08 95       	ret

00000ed0 <TIMER1_voidSetPreloadValue>:




void TIMER1_voidSetPreloadValue ( u16 Local_u16PreloadValue )
{
     ed0:	df 93       	push	r29
     ed2:	cf 93       	push	r28
     ed4:	00 d0       	rcall	.+0      	; 0xed6 <TIMER1_voidSetPreloadValue+0x6>
     ed6:	cd b7       	in	r28, 0x3d	; 61
     ed8:	de b7       	in	r29, 0x3e	; 62
     eda:	9a 83       	std	Y+2, r25	; 0x02
     edc:	89 83       	std	Y+1, r24	; 0x01
        TCNT1_REG = Local_u16PreloadValue ;
        Global_u16PreloadValue = Local_u16PreloadValue ;
    #else
        // No Action
    #endif
}
     ede:	0f 90       	pop	r0
     ee0:	0f 90       	pop	r0
     ee2:	cf 91       	pop	r28
     ee4:	df 91       	pop	r29
     ee6:	08 95       	ret

00000ee8 <TIMER1_voidSetCompareMatchValue_T1A>:


void TIMER1_voidSetCompareMatchValue_T1A ( u16 Local_u16CompareMatchValue )
{
     ee8:	df 93       	push	r29
     eea:	cf 93       	push	r28
     eec:	00 d0       	rcall	.+0      	; 0xeee <TIMER1_voidSetCompareMatchValue_T1A+0x6>
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
     ef2:	9a 83       	std	Y+2, r25	; 0x02
     ef4:	89 83       	std	Y+1, r24	; 0x01
    #if (MODE != NORMAL_OVF)
        OCR1A_REG = Local_u16CompareMatchValue ;
     ef6:	ea e4       	ldi	r30, 0x4A	; 74
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	9a 81       	ldd	r25, Y+2	; 0x02
     efe:	91 83       	std	Z+1, r25	; 0x01
     f00:	80 83       	st	Z, r24
        Global_u16CompareMatchValue_1A = Local_u16CompareMatchValue ;
     f02:	89 81       	ldd	r24, Y+1	; 0x01
     f04:	9a 81       	ldd	r25, Y+2	; 0x02
     f06:	90 93 32 02 	sts	0x0232, r25
     f0a:	80 93 31 02 	sts	0x0231, r24
    #endif
}
     f0e:	0f 90       	pop	r0
     f10:	0f 90       	pop	r0
     f12:	cf 91       	pop	r28
     f14:	df 91       	pop	r29
     f16:	08 95       	ret

00000f18 <TIMER1_voidSetCompareMatchValue_T1B>:

void TIMER1_voidSetCompareMatchValue_T1B ( u16 Local_u16CompareMatchValue )
{
     f18:	df 93       	push	r29
     f1a:	cf 93       	push	r28
     f1c:	00 d0       	rcall	.+0      	; 0xf1e <TIMER1_voidSetCompareMatchValue_T1B+0x6>
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62
     f22:	9a 83       	std	Y+2, r25	; 0x02
     f24:	89 83       	std	Y+1, r24	; 0x01
    #if (MODE != NORMAL_OVF)
        OCR1B_REG = Local_u16CompareMatchValue ;
     f26:	e8 e4       	ldi	r30, 0x48	; 72
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	9a 81       	ldd	r25, Y+2	; 0x02
     f2e:	91 83       	std	Z+1, r25	; 0x01
     f30:	80 83       	st	Z, r24
        Global_u16CompareMatchValue_1B = Local_u16CompareMatchValue ;
     f32:	89 81       	ldd	r24, Y+1	; 0x01
     f34:	9a 81       	ldd	r25, Y+2	; 0x02
     f36:	90 93 34 02 	sts	0x0234, r25
     f3a:	80 93 33 02 	sts	0x0233, r24
    #endif
}
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	cf 91       	pop	r28
     f44:	df 91       	pop	r29
     f46:	08 95       	ret

00000f48 <TIMER1_void_u16PWM_T1A>:


void TIMER1_void_u16PWM_T1A ( u16 Copy_u16CompareMatchValue , u16 Copy_u16TopValue )
{
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	00 d0       	rcall	.+0      	; 0xf4e <TIMER1_void_u16PWM_T1A+0x6>
     f4e:	00 d0       	rcall	.+0      	; 0xf50 <TIMER1_void_u16PWM_T1A+0x8>
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	9a 83       	std	Y+2, r25	; 0x02
     f56:	89 83       	std	Y+1, r24	; 0x01
     f58:	7c 83       	std	Y+4, r23	; 0x04
     f5a:	6b 83       	std	Y+3, r22	; 0x03
    TIMER1_voidSetCompareMatchValue_T1A ( Copy_u16CompareMatchValue );
     f5c:	89 81       	ldd	r24, Y+1	; 0x01
     f5e:	9a 81       	ldd	r25, Y+2	; 0x02
     f60:	0e 94 74 07 	call	0xee8	; 0xee8 <TIMER1_voidSetCompareMatchValue_T1A>
    ICR1_REG = Copy_u16TopValue ;
     f64:	e6 e4       	ldi	r30, 0x46	; 70
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	8b 81       	ldd	r24, Y+3	; 0x03
     f6a:	9c 81       	ldd	r25, Y+4	; 0x04
     f6c:	91 83       	std	Z+1, r25	; 0x01
     f6e:	80 83       	st	Z, r24
}
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	0f 90       	pop	r0
     f78:	cf 91       	pop	r28
     f7a:	df 91       	pop	r29
     f7c:	08 95       	ret

00000f7e <TIMER1_void_u16PWM_T1B>:


void TIMER1_void_u16PWM_T1B ( u16 Copy_u16CompareMatchValue , u16 Copy_u16TopValue )
{
     f7e:	df 93       	push	r29
     f80:	cf 93       	push	r28
     f82:	00 d0       	rcall	.+0      	; 0xf84 <TIMER1_void_u16PWM_T1B+0x6>
     f84:	00 d0       	rcall	.+0      	; 0xf86 <TIMER1_void_u16PWM_T1B+0x8>
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
     f8a:	9a 83       	std	Y+2, r25	; 0x02
     f8c:	89 83       	std	Y+1, r24	; 0x01
     f8e:	7c 83       	std	Y+4, r23	; 0x04
     f90:	6b 83       	std	Y+3, r22	; 0x03
    TIMER1_voidSetCompareMatchValue_T1B ( Copy_u16CompareMatchValue );
     f92:	89 81       	ldd	r24, Y+1	; 0x01
     f94:	9a 81       	ldd	r25, Y+2	; 0x02
     f96:	0e 94 8c 07 	call	0xf18	; 0xf18 <TIMER1_voidSetCompareMatchValue_T1B>
    ICR1_REG = Copy_u16TopValue ;
     f9a:	e6 e4       	ldi	r30, 0x46	; 70
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	8b 81       	ldd	r24, Y+3	; 0x03
     fa0:	9c 81       	ldd	r25, Y+4	; 0x04
     fa2:	91 83       	std	Z+1, r25	; 0x01
     fa4:	80 83       	st	Z, r24
}
     fa6:	0f 90       	pop	r0
     fa8:	0f 90       	pop	r0
     faa:	0f 90       	pop	r0
     fac:	0f 90       	pop	r0
     fae:	cf 91       	pop	r28
     fb0:	df 91       	pop	r29
     fb2:	08 95       	ret

00000fb4 <TIMER0_voidInit>:
u16 Global_u8CompareMatchValue = 0 ;
u32 Global_u32Time_ms = 0 ;


void TIMER0_voidInit (void)
{
     fb4:	df 93       	push	r29
     fb6:	cf 93       	push	r28
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
        #else 
            #error  Wrong selection of OC0 mode
        #endif

    #elif (MODE == CTC)                                  // CTC Mode of Timer/Counter0
        CLR_BIT(TCCR0_REG,TIMER0_TCCR0_WGM00);
     fbc:	a3 e5       	ldi	r26, 0x53	; 83
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	e3 e5       	ldi	r30, 0x53	; 83
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	8f 7b       	andi	r24, 0xBF	; 191
     fc8:	8c 93       	st	X, r24
        SET_BIT(TCCR0_REG,TIMER0_TCCR0_WGM01);
     fca:	a3 e5       	ldi	r26, 0x53	; 83
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	e3 e5       	ldi	r30, 0x53	; 83
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	88 60       	ori	r24, 0x08	; 8
     fd6:	8c 93       	st	X, r24
		SET_BIT(TIMSK_REG,TIMER0_TIMSK_OCIE0);          // Enable T0 CTC Interrupt [PIE]. 
     fd8:	a9 e5       	ldi	r26, 0x59	; 89
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	e9 e5       	ldi	r30, 0x59	; 89
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	82 60       	ori	r24, 0x02	; 2
     fe4:	8c 93       	st	X, r24
        #error  Wrong selection of operation mode
    #endif 


/*     TIMER0 Prescaller Selection      */
    TCCR0_REG = ( TCCR0_REG & 0b11111000 );              // Clear Prescaller 
     fe6:	a3 e5       	ldi	r26, 0x53	; 83
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	e3 e5       	ldi	r30, 0x53	; 83
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	88 7f       	andi	r24, 0xF8	; 248
     ff2:	8c 93       	st	X, r24
    #elif ( PRESCALER == NOT_USE_PRESCALER )
        SET_BIT(TCCR0_REG,TIMER0_TCCR0_CS00);
        CLR_BIT(TCCR0_REG,TIMER0_TCCR0_CS01);
        CLR_BIT(TCCR0_REG,TIMER0_TCCR0_CS02);
    #elif ( PRESCALER == PRESCALER_DIVISION_BY_8 )
        CLR_BIT(TCCR0_REG,TIMER0_TCCR0_CS00);
     ff4:	a3 e5       	ldi	r26, 0x53	; 83
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	e3 e5       	ldi	r30, 0x53	; 83
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	8e 7f       	andi	r24, 0xFE	; 254
    1000:	8c 93       	st	X, r24
        SET_BIT(TCCR0_REG,TIMER0_TCCR0_CS01);
    1002:	a3 e5       	ldi	r26, 0x53	; 83
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e3 e5       	ldi	r30, 0x53	; 83
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	82 60       	ori	r24, 0x02	; 2
    100e:	8c 93       	st	X, r24
        CLR_BIT(TCCR0_REG,TIMER0_TCCR0_CS02);
    1010:	a3 e5       	ldi	r26, 0x53	; 83
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	e3 e5       	ldi	r30, 0x53	; 83
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	8b 7f       	andi	r24, 0xFB	; 251
    101c:	8c 93       	st	X, r24
        SET_BIT(TCCR0_REG,TIMER0_TCCR0_CS02);
    #else
        #error  Wrong selection of Prescaller mode
    #endif

}
    101e:	cf 91       	pop	r28
    1020:	df 91       	pop	r29
    1022:	08 95       	ret

00001024 <TIMER0_voidSetCallBack_OVF>:


void TIMER0_voidSetCallBack_OVF (void (*Local_PointerToFunction_OVF) (void))
{
    1024:	df 93       	push	r29
    1026:	cf 93       	push	r28
    1028:	00 d0       	rcall	.+0      	; 0x102a <TIMER0_voidSetCallBack_OVF+0x6>
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
    102e:	9a 83       	std	Y+2, r25	; 0x02
    1030:	89 83       	std	Y+1, r24	; 0x01
    Global_PointerToFunction_OVF_T0 = Local_PointerToFunction_OVF ;
    1032:	89 81       	ldd	r24, Y+1	; 0x01
    1034:	9a 81       	ldd	r25, Y+2	; 0x02
    1036:	90 93 36 02 	sts	0x0236, r25
    103a:	80 93 35 02 	sts	0x0235, r24
}
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	cf 91       	pop	r28
    1044:	df 91       	pop	r29
    1046:	08 95       	ret

00001048 <TIMER0_voidSetCallBack_CTC>:


void TIMER0_voidSetCallBack_CTC (void (*Local_PointerToFunction_CTC) (void))
{
    1048:	df 93       	push	r29
    104a:	cf 93       	push	r28
    104c:	00 d0       	rcall	.+0      	; 0x104e <TIMER0_voidSetCallBack_CTC+0x6>
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	9a 83       	std	Y+2, r25	; 0x02
    1054:	89 83       	std	Y+1, r24	; 0x01
    Global_PointerToFunction_CTC_T0 = Local_PointerToFunction_CTC ;
    1056:	89 81       	ldd	r24, Y+1	; 0x01
    1058:	9a 81       	ldd	r25, Y+2	; 0x02
    105a:	90 93 38 02 	sts	0x0238, r25
    105e:	80 93 37 02 	sts	0x0237, r24
}
    1062:	0f 90       	pop	r0
    1064:	0f 90       	pop	r0
    1066:	cf 91       	pop	r28
    1068:	df 91       	pop	r29
    106a:	08 95       	ret

0000106c <TIMER0_voidSetPreloadValue>:

void TIMER0_voidSetPreloadValue ( u8 Local_u8PreloadValue )
{
    106c:	df 93       	push	r29
    106e:	cf 93       	push	r28
    1070:	0f 92       	push	r0
    1072:	cd b7       	in	r28, 0x3d	; 61
    1074:	de b7       	in	r29, 0x3e	; 62
    1076:	89 83       	std	Y+1, r24	; 0x01
        TCNT0_REG = Local_u8PreloadValue ;
        Global_u8PreloadValue = Local_u8PreloadValue ;
    #else
        // No Action
    #endif
}
    1078:	0f 90       	pop	r0
    107a:	cf 91       	pop	r28
    107c:	df 91       	pop	r29
    107e:	08 95       	ret

00001080 <TIMER0_voidSetCompareMatchValue>:


void TIMER0_voidSetCompareMatchValue ( u8 Local_u8CompareMatchValue )
{
    1080:	df 93       	push	r29
    1082:	cf 93       	push	r28
    1084:	0f 92       	push	r0
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62
    108a:	89 83       	std	Y+1, r24	; 0x01
    #if (MODE == CTC)
        OCR0_REG = Local_u8CompareMatchValue ;
    108c:	ec e5       	ldi	r30, 0x5C	; 92
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	89 81       	ldd	r24, Y+1	; 0x01
    1092:	80 83       	st	Z, r24
        Global_u8CompareMatchValue = Local_u8CompareMatchValue ;
    1094:	89 81       	ldd	r24, Y+1	; 0x01
    1096:	88 2f       	mov	r24, r24
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	90 93 3c 02 	sts	0x023C, r25
    109e:	80 93 3b 02 	sts	0x023B, r24
    #elif ( MODE == FAST_PWM )
        OCR0_REG = Local_u8CompareMatchValue ;
    #elif (MODE == PWM_PHASECORRECT)
        OCR0_REG = Local_u8CompareMatchValue ;
    #endif
}
    10a2:	0f 90       	pop	r0
    10a4:	cf 91       	pop	r28
    10a6:	df 91       	pop	r29
    10a8:	08 95       	ret

000010aa <TIMER0_voidSetCallBack_CTC_andRequiredTime_ms>:

void TIMER0_voidSetCallBack_CTC_andRequiredTime_ms (void (*Local_PointerToFunction_CTC) (void),u32 Copy_u32Time_ms)
{
    10aa:	df 93       	push	r29
    10ac:	cf 93       	push	r28
    10ae:	00 d0       	rcall	.+0      	; 0x10b0 <TIMER0_voidSetCallBack_CTC_andRequiredTime_ms+0x6>
    10b0:	00 d0       	rcall	.+0      	; 0x10b2 <TIMER0_voidSetCallBack_CTC_andRequiredTime_ms+0x8>
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <TIMER0_voidSetCallBack_CTC_andRequiredTime_ms+0xa>
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
    10b8:	9a 83       	std	Y+2, r25	; 0x02
    10ba:	89 83       	std	Y+1, r24	; 0x01
    10bc:	4b 83       	std	Y+3, r20	; 0x03
    10be:	5c 83       	std	Y+4, r21	; 0x04
    10c0:	6d 83       	std	Y+5, r22	; 0x05
    10c2:	7e 83       	std	Y+6, r23	; 0x06
    TIMER0_voidSetCompareMatchValue (200);
    10c4:	88 ec       	ldi	r24, 0xC8	; 200
    10c6:	0e 94 40 08 	call	0x1080	; 0x1080 <TIMER0_voidSetCompareMatchValue>
    TIMER0_voidSetCallBack_CTC (Local_PointerToFunction_CTC);
    10ca:	89 81       	ldd	r24, Y+1	; 0x01
    10cc:	9a 81       	ldd	r25, Y+2	; 0x02
    10ce:	0e 94 24 08 	call	0x1048	; 0x1048 <TIMER0_voidSetCallBack_CTC>
    Global_u32Time_ms = Copy_u32Time_ms ;
    10d2:	8b 81       	ldd	r24, Y+3	; 0x03
    10d4:	9c 81       	ldd	r25, Y+4	; 0x04
    10d6:	ad 81       	ldd	r26, Y+5	; 0x05
    10d8:	be 81       	ldd	r27, Y+6	; 0x06
    10da:	80 93 3d 02 	sts	0x023D, r24
    10de:	90 93 3e 02 	sts	0x023E, r25
    10e2:	a0 93 3f 02 	sts	0x023F, r26
    10e6:	b0 93 40 02 	sts	0x0240, r27
}
    10ea:	26 96       	adiw	r28, 0x06	; 6
    10ec:	0f b6       	in	r0, 0x3f	; 63
    10ee:	f8 94       	cli
    10f0:	de bf       	out	0x3e, r29	; 62
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	cd bf       	out	0x3d, r28	; 61
    10f6:	cf 91       	pop	r28
    10f8:	df 91       	pop	r29
    10fa:	08 95       	ret

000010fc <TIMER0_voidSetBusyWait_ms>:


void TIMER0_voidSetBusyWait_ms ( u32 Copy_u32Time_ms )
{
    10fc:	df 93       	push	r29
    10fe:	cf 93       	push	r28
    1100:	cd b7       	in	r28, 0x3d	; 61
    1102:	de b7       	in	r29, 0x3e	; 62
    1104:	2d 97       	sbiw	r28, 0x0d	; 13
    1106:	0f b6       	in	r0, 0x3f	; 63
    1108:	f8 94       	cli
    110a:	de bf       	out	0x3e, r29	; 62
    110c:	0f be       	out	0x3f, r0	; 63
    110e:	cd bf       	out	0x3d, r28	; 61
    1110:	6a 87       	std	Y+10, r22	; 0x0a
    1112:	7b 87       	std	Y+11, r23	; 0x0b
    1114:	8c 87       	std	Y+12, r24	; 0x0c
    1116:	9d 87       	std	Y+13, r25	; 0x0d
    CLR_BIT(TIMSK_REG,TIMER0_TIMSK_OCIE0);              // Disable T0 CTC Interrupt [PIE].
    1118:	a9 e5       	ldi	r26, 0x59	; 89
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	e9 e5       	ldi	r30, 0x59	; 89
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	8d 7f       	andi	r24, 0xFD	; 253
    1124:	8c 93       	st	X, r24
    u32 Counter_CTC = 0 ;
    1126:	1e 82       	std	Y+6, r1	; 0x06
    1128:	1f 82       	std	Y+7, r1	; 0x07
    112a:	18 86       	std	Y+8, r1	; 0x08
    112c:	19 86       	std	Y+9, r1	; 0x09
    TIMER0_voidSetCompareMatchValue (200);
    112e:	88 ec       	ldi	r24, 0xC8	; 200
    1130:	0e 94 40 08 	call	0x1080	; 0x1080 <TIMER0_voidSetCompareMatchValue>
    Counter_CTC = ( Copy_u32Time_ms * 1000UL ) /200 ;     // Counter_CTC = (Required Time(ms) * 1000) / (Compare Match Value)
    1134:	8a 85       	ldd	r24, Y+10	; 0x0a
    1136:	9b 85       	ldd	r25, Y+11	; 0x0b
    1138:	ac 85       	ldd	r26, Y+12	; 0x0c
    113a:	bd 85       	ldd	r27, Y+13	; 0x0d
    113c:	28 ee       	ldi	r18, 0xE8	; 232
    113e:	33 e0       	ldi	r19, 0x03	; 3
    1140:	40 e0       	ldi	r20, 0x00	; 0
    1142:	50 e0       	ldi	r21, 0x00	; 0
    1144:	bc 01       	movw	r22, r24
    1146:	cd 01       	movw	r24, r26
    1148:	0e 94 cd 2b 	call	0x579a	; 0x579a <__mulsi3>
    114c:	dc 01       	movw	r26, r24
    114e:	cb 01       	movw	r24, r22
    1150:	28 ec       	ldi	r18, 0xC8	; 200
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	40 e0       	ldi	r20, 0x00	; 0
    1156:	50 e0       	ldi	r21, 0x00	; 0
    1158:	bc 01       	movw	r22, r24
    115a:	cd 01       	movw	r24, r26
    115c:	0e 94 ec 2b 	call	0x57d8	; 0x57d8 <__udivmodsi4>
    1160:	da 01       	movw	r26, r20
    1162:	c9 01       	movw	r24, r18
    1164:	8e 83       	std	Y+6, r24	; 0x06
    1166:	9f 83       	std	Y+7, r25	; 0x07
    1168:	a8 87       	std	Y+8, r26	; 0x08
    116a:	b9 87       	std	Y+9, r27	; 0x09
    u32 iter = 0 ;
    116c:	1a 82       	std	Y+2, r1	; 0x02
    116e:	1b 82       	std	Y+3, r1	; 0x03
    1170:	1c 82       	std	Y+4, r1	; 0x04
    1172:	1d 82       	std	Y+5, r1	; 0x05
    for ( iter =0 ; iter < Counter_CTC ; iter++)
    1174:	1a 82       	std	Y+2, r1	; 0x02
    1176:	1b 82       	std	Y+3, r1	; 0x03
    1178:	1c 82       	std	Y+4, r1	; 0x04
    117a:	1d 82       	std	Y+5, r1	; 0x05
    117c:	20 c0       	rjmp	.+64     	; 0x11be <TIMER0_voidSetBusyWait_ms+0xc2>
    {
    	u8 Local_u8Flag ;
    	Local_u8Flag = GET_BIT(TIFR_REG,TIMER0_TIFR_OCF0);
    117e:	e8 e5       	ldi	r30, 0x58	; 88
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	82 70       	andi	r24, 0x02	; 2
    1186:	89 83       	std	Y+1, r24	; 0x01
    1188:	05 c0       	rjmp	.+10     	; 0x1194 <TIMER0_voidSetBusyWait_ms+0x98>
    	while ( Local_u8Flag == 0 )
    	{
    		Local_u8Flag = GET_BIT(TIFR_REG,TIMER0_TIFR_OCF0);      // Polling in the CTC Flag
    118a:	e8 e5       	ldi	r30, 0x58	; 88
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	82 70       	andi	r24, 0x02	; 2
    1192:	89 83       	std	Y+1, r24	; 0x01
    u32 iter = 0 ;
    for ( iter =0 ; iter < Counter_CTC ; iter++)
    {
    	u8 Local_u8Flag ;
    	Local_u8Flag = GET_BIT(TIFR_REG,TIMER0_TIFR_OCF0);
    	while ( Local_u8Flag == 0 )
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	88 23       	and	r24, r24
    1198:	c1 f3       	breq	.-16     	; 0x118a <TIMER0_voidSetBusyWait_ms+0x8e>
    	{
    		Local_u8Flag = GET_BIT(TIFR_REG,TIMER0_TIFR_OCF0);      // Polling in the CTC Flag
    	}
		SET_BIT(TIFR_REG,TIMER0_TIFR_OCF0);						    // Clear Flag
    119a:	a8 e5       	ldi	r26, 0x58	; 88
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	e8 e5       	ldi	r30, 0x58	; 88
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	82 60       	ori	r24, 0x02	; 2
    11a6:	8c 93       	st	X, r24
    CLR_BIT(TIMSK_REG,TIMER0_TIMSK_OCIE0);              // Disable T0 CTC Interrupt [PIE].
    u32 Counter_CTC = 0 ;
    TIMER0_voidSetCompareMatchValue (200);
    Counter_CTC = ( Copy_u32Time_ms * 1000UL ) /200 ;     // Counter_CTC = (Required Time(ms) * 1000) / (Compare Match Value)
    u32 iter = 0 ;
    for ( iter =0 ; iter < Counter_CTC ; iter++)
    11a8:	8a 81       	ldd	r24, Y+2	; 0x02
    11aa:	9b 81       	ldd	r25, Y+3	; 0x03
    11ac:	ac 81       	ldd	r26, Y+4	; 0x04
    11ae:	bd 81       	ldd	r27, Y+5	; 0x05
    11b0:	01 96       	adiw	r24, 0x01	; 1
    11b2:	a1 1d       	adc	r26, r1
    11b4:	b1 1d       	adc	r27, r1
    11b6:	8a 83       	std	Y+2, r24	; 0x02
    11b8:	9b 83       	std	Y+3, r25	; 0x03
    11ba:	ac 83       	std	Y+4, r26	; 0x04
    11bc:	bd 83       	std	Y+5, r27	; 0x05
    11be:	2a 81       	ldd	r18, Y+2	; 0x02
    11c0:	3b 81       	ldd	r19, Y+3	; 0x03
    11c2:	4c 81       	ldd	r20, Y+4	; 0x04
    11c4:	5d 81       	ldd	r21, Y+5	; 0x05
    11c6:	8e 81       	ldd	r24, Y+6	; 0x06
    11c8:	9f 81       	ldd	r25, Y+7	; 0x07
    11ca:	a8 85       	ldd	r26, Y+8	; 0x08
    11cc:	b9 85       	ldd	r27, Y+9	; 0x09
    11ce:	28 17       	cp	r18, r24
    11d0:	39 07       	cpc	r19, r25
    11d2:	4a 07       	cpc	r20, r26
    11d4:	5b 07       	cpc	r21, r27
    11d6:	98 f2       	brcs	.-90     	; 0x117e <TIMER0_voidSetBusyWait_ms+0x82>
    	{
    		Local_u8Flag = GET_BIT(TIFR_REG,TIMER0_TIFR_OCF0);      // Polling in the CTC Flag
    	}
		SET_BIT(TIFR_REG,TIMER0_TIFR_OCF0);						    // Clear Flag
    }
    SET_BIT(TIMSK_REG,TIMER0_TIMSK_OCIE0);          // Enable T0 CTC Interrupt [PIE]. 
    11d8:	a9 e5       	ldi	r26, 0x59	; 89
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	e9 e5       	ldi	r30, 0x59	; 89
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	82 60       	ori	r24, 0x02	; 2
    11e4:	8c 93       	st	X, r24
}
    11e6:	2d 96       	adiw	r28, 0x0d	; 13
    11e8:	0f b6       	in	r0, 0x3f	; 63
    11ea:	f8 94       	cli
    11ec:	de bf       	out	0x3e, r29	; 62
    11ee:	0f be       	out	0x3f, r0	; 63
    11f0:	cd bf       	out	0x3d, r28	; 61
    11f2:	cf 91       	pop	r28
    11f4:	df 91       	pop	r29
    11f6:	08 95       	ret

000011f8 <TIMER0_voidPWM>:


void TIMER0_voidPWM ( u8 Local_u8CompareMatchValue )
{
    11f8:	df 93       	push	r29
    11fa:	cf 93       	push	r28
    11fc:	0f 92       	push	r0
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
    1202:	89 83       	std	Y+1, r24	; 0x01
    TIMER0_voidSetCompareMatchValue ( Local_u8CompareMatchValue );
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	0e 94 40 08 	call	0x1080	; 0x1080 <TIMER0_voidSetCompareMatchValue>
}
    120a:	0f 90       	pop	r0
    120c:	cf 91       	pop	r28
    120e:	df 91       	pop	r29
    1210:	08 95       	ret

00001212 <__vector_11>:


/**************     [ISR] to OVF     *************/
void __vector_11 (void)   __attribute__((signal));
void __vector_11 (void)
{
    1212:	1f 92       	push	r1
    1214:	0f 92       	push	r0
    1216:	0f b6       	in	r0, 0x3f	; 63
    1218:	0f 92       	push	r0
    121a:	11 24       	eor	r1, r1
    121c:	2f 93       	push	r18
    121e:	3f 93       	push	r19
    1220:	4f 93       	push	r20
    1222:	5f 93       	push	r21
    1224:	6f 93       	push	r22
    1226:	7f 93       	push	r23
    1228:	8f 93       	push	r24
    122a:	9f 93       	push	r25
    122c:	af 93       	push	r26
    122e:	bf 93       	push	r27
    1230:	ef 93       	push	r30
    1232:	ff 93       	push	r31
    1234:	df 93       	push	r29
    1236:	cf 93       	push	r28
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
    static u16 counter = 0 ;
    counter ++ ;
    123c:	80 91 41 02 	lds	r24, 0x0241
    1240:	90 91 42 02 	lds	r25, 0x0242
    1244:	01 96       	adiw	r24, 0x01	; 1
    1246:	90 93 42 02 	sts	0x0242, r25
    124a:	80 93 41 02 	sts	0x0241, r24
    if ( counter == 3907 )
    124e:	80 91 41 02 	lds	r24, 0x0241
    1252:	90 91 42 02 	lds	r25, 0x0242
    1256:	2f e0       	ldi	r18, 0x0F	; 15
    1258:	83 34       	cpi	r24, 0x43	; 67
    125a:	92 07       	cpc	r25, r18
    125c:	b1 f4       	brne	.+44     	; 0x128a <__vector_11+0x78>
    {
        if(Global_PointerToFunction_OVF_T0 != NULL)
    125e:	80 91 35 02 	lds	r24, 0x0235
    1262:	90 91 36 02 	lds	r25, 0x0236
    1266:	00 97       	sbiw	r24, 0x00	; 0
    1268:	29 f0       	breq	.+10     	; 0x1274 <__vector_11+0x62>
		{
    		Global_PointerToFunction_OVF_T0();                 // Action of OVF Application Function
    126a:	e0 91 35 02 	lds	r30, 0x0235
    126e:	f0 91 36 02 	lds	r31, 0x0236
    1272:	09 95       	icall
		}
        counter = 0 ;                                       // For Next Period.
    1274:	10 92 42 02 	sts	0x0242, r1
    1278:	10 92 41 02 	sts	0x0241, r1
        TCNT0_REG = Global_u8PreloadValue ;                 // For Next Period Preload Value.
    127c:	e2 e5       	ldi	r30, 0x52	; 82
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 91 39 02 	lds	r24, 0x0239
    1284:	90 91 3a 02 	lds	r25, 0x023A
    1288:	80 83       	st	Z, r24
    }
}
    128a:	cf 91       	pop	r28
    128c:	df 91       	pop	r29
    128e:	ff 91       	pop	r31
    1290:	ef 91       	pop	r30
    1292:	bf 91       	pop	r27
    1294:	af 91       	pop	r26
    1296:	9f 91       	pop	r25
    1298:	8f 91       	pop	r24
    129a:	7f 91       	pop	r23
    129c:	6f 91       	pop	r22
    129e:	5f 91       	pop	r21
    12a0:	4f 91       	pop	r20
    12a2:	3f 91       	pop	r19
    12a4:	2f 91       	pop	r18
    12a6:	0f 90       	pop	r0
    12a8:	0f be       	out	0x3f, r0	; 63
    12aa:	0f 90       	pop	r0
    12ac:	1f 90       	pop	r1
    12ae:	18 95       	reti

000012b0 <__vector_10>:

/**************     [ISR] to CTC     *************/
void __vector_10 (void)   __attribute__((signal));
void __vector_10 (void)
{
    12b0:	1f 92       	push	r1
    12b2:	0f 92       	push	r0
    12b4:	0f b6       	in	r0, 0x3f	; 63
    12b6:	0f 92       	push	r0
    12b8:	11 24       	eor	r1, r1
    12ba:	2f 93       	push	r18
    12bc:	3f 93       	push	r19
    12be:	4f 93       	push	r20
    12c0:	5f 93       	push	r21
    12c2:	6f 93       	push	r22
    12c4:	7f 93       	push	r23
    12c6:	8f 93       	push	r24
    12c8:	9f 93       	push	r25
    12ca:	af 93       	push	r26
    12cc:	bf 93       	push	r27
    12ce:	ef 93       	push	r30
    12d0:	ff 93       	push	r31
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	00 d0       	rcall	.+0      	; 0x12d8 <__vector_10+0x28>
    12d8:	00 d0       	rcall	.+0      	; 0x12da <__vector_10+0x2a>
    12da:	cd b7       	in	r28, 0x3d	; 61
    12dc:	de b7       	in	r29, 0x3e	; 62
    u32 Counter_CTC = 0 ;
    12de:	19 82       	std	Y+1, r1	; 0x01
    12e0:	1a 82       	std	Y+2, r1	; 0x02
    12e2:	1b 82       	std	Y+3, r1	; 0x03
    12e4:	1c 82       	std	Y+4, r1	; 0x04
    Counter_CTC = ( Global_u32Time_ms * 1000UL ) / (200) ;        // Counter_CTC = (Required Time(ms) * 1000) / (Compare Match Value)
    12e6:	80 91 3d 02 	lds	r24, 0x023D
    12ea:	90 91 3e 02 	lds	r25, 0x023E
    12ee:	a0 91 3f 02 	lds	r26, 0x023F
    12f2:	b0 91 40 02 	lds	r27, 0x0240
    12f6:	28 ee       	ldi	r18, 0xE8	; 232
    12f8:	33 e0       	ldi	r19, 0x03	; 3
    12fa:	40 e0       	ldi	r20, 0x00	; 0
    12fc:	50 e0       	ldi	r21, 0x00	; 0
    12fe:	bc 01       	movw	r22, r24
    1300:	cd 01       	movw	r24, r26
    1302:	0e 94 cd 2b 	call	0x579a	; 0x579a <__mulsi3>
    1306:	dc 01       	movw	r26, r24
    1308:	cb 01       	movw	r24, r22
    130a:	28 ec       	ldi	r18, 0xC8	; 200
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	40 e0       	ldi	r20, 0x00	; 0
    1310:	50 e0       	ldi	r21, 0x00	; 0
    1312:	bc 01       	movw	r22, r24
    1314:	cd 01       	movw	r24, r26
    1316:	0e 94 ec 2b 	call	0x57d8	; 0x57d8 <__udivmodsi4>
    131a:	da 01       	movw	r26, r20
    131c:	c9 01       	movw	r24, r18
    131e:	89 83       	std	Y+1, r24	; 0x01
    1320:	9a 83       	std	Y+2, r25	; 0x02
    1322:	ab 83       	std	Y+3, r26	; 0x03
    1324:	bc 83       	std	Y+4, r27	; 0x04
    static u16 counter = 0 ;
    counter ++ ;
    1326:	80 91 43 02 	lds	r24, 0x0243
    132a:	90 91 44 02 	lds	r25, 0x0244
    132e:	01 96       	adiw	r24, 0x01	; 1
    1330:	90 93 44 02 	sts	0x0244, r25
    1334:	80 93 43 02 	sts	0x0243, r24
    if(Global_u32Time_ms == 0)
    1338:	80 91 3d 02 	lds	r24, 0x023D
    133c:	90 91 3e 02 	lds	r25, 0x023E
    1340:	a0 91 3f 02 	lds	r26, 0x023F
    1344:	b0 91 40 02 	lds	r27, 0x0240
    1348:	00 97       	sbiw	r24, 0x00	; 0
    134a:	a1 05       	cpc	r26, r1
    134c:	b1 05       	cpc	r27, r1
    134e:	f9 f4       	brne	.+62     	; 0x138e <__vector_10+0xde>
    {
        if ( counter == 5000 )
    1350:	80 91 43 02 	lds	r24, 0x0243
    1354:	90 91 44 02 	lds	r25, 0x0244
    1358:	23 e1       	ldi	r18, 0x13	; 19
    135a:	88 38       	cpi	r24, 0x88	; 136
    135c:	92 07       	cpc	r25, r18
    135e:	e9 f5       	brne	.+122    	; 0x13da <__vector_10+0x12a>
        {
            if(Global_PointerToFunction_CTC_T0 != NULL)
    1360:	80 91 37 02 	lds	r24, 0x0237
    1364:	90 91 38 02 	lds	r25, 0x0238
    1368:	00 97       	sbiw	r24, 0x00	; 0
    136a:	29 f0       	breq	.+10     	; 0x1376 <__vector_10+0xc6>
		    {
                Global_PointerToFunction_CTC_T0();                  // Action of CTC Application Function 
    136c:	e0 91 37 02 	lds	r30, 0x0237
    1370:	f0 91 38 02 	lds	r31, 0x0238
    1374:	09 95       	icall
		    }                
            counter = 0 ;                                        // For Next Period.
    1376:	10 92 44 02 	sts	0x0244, r1
    137a:	10 92 43 02 	sts	0x0243, r1
            OCR0_REG = Global_u8CompareMatchValue ;              // For Next Period Compare Match Value.
    137e:	ec e5       	ldi	r30, 0x5C	; 92
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 91 3b 02 	lds	r24, 0x023B
    1386:	90 91 3c 02 	lds	r25, 0x023C
    138a:	80 83       	st	Z, r24
    138c:	26 c0       	rjmp	.+76     	; 0x13da <__vector_10+0x12a>
        }
    }
    else
    {
        if ( counter == Counter_CTC )
    138e:	80 91 43 02 	lds	r24, 0x0243
    1392:	90 91 44 02 	lds	r25, 0x0244
    1396:	9c 01       	movw	r18, r24
    1398:	40 e0       	ldi	r20, 0x00	; 0
    139a:	50 e0       	ldi	r21, 0x00	; 0
    139c:	89 81       	ldd	r24, Y+1	; 0x01
    139e:	9a 81       	ldd	r25, Y+2	; 0x02
    13a0:	ab 81       	ldd	r26, Y+3	; 0x03
    13a2:	bc 81       	ldd	r27, Y+4	; 0x04
    13a4:	28 17       	cp	r18, r24
    13a6:	39 07       	cpc	r19, r25
    13a8:	4a 07       	cpc	r20, r26
    13aa:	5b 07       	cpc	r21, r27
    13ac:	b1 f4       	brne	.+44     	; 0x13da <__vector_10+0x12a>
        {
            if(Global_PointerToFunction_CTC_T0 != NULL)
    13ae:	80 91 37 02 	lds	r24, 0x0237
    13b2:	90 91 38 02 	lds	r25, 0x0238
    13b6:	00 97       	sbiw	r24, 0x00	; 0
    13b8:	29 f0       	breq	.+10     	; 0x13c4 <__vector_10+0x114>
		    {
                Global_PointerToFunction_CTC_T0();                  // Action of CTC Application Function 
    13ba:	e0 91 37 02 	lds	r30, 0x0237
    13be:	f0 91 38 02 	lds	r31, 0x0238
    13c2:	09 95       	icall
		    }                
            counter = 0 ;                                        // For Next Period.
    13c4:	10 92 44 02 	sts	0x0244, r1
    13c8:	10 92 43 02 	sts	0x0243, r1
            OCR0_REG = Global_u8CompareMatchValue ;              // For Next Period Compare Match Value.
    13cc:	ec e5       	ldi	r30, 0x5C	; 92
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 91 3b 02 	lds	r24, 0x023B
    13d4:	90 91 3c 02 	lds	r25, 0x023C
    13d8:	80 83       	st	Z, r24
        }
    }
    
}
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	0f 90       	pop	r0
    13e0:	0f 90       	pop	r0
    13e2:	cf 91       	pop	r28
    13e4:	df 91       	pop	r29
    13e6:	ff 91       	pop	r31
    13e8:	ef 91       	pop	r30
    13ea:	bf 91       	pop	r27
    13ec:	af 91       	pop	r26
    13ee:	9f 91       	pop	r25
    13f0:	8f 91       	pop	r24
    13f2:	7f 91       	pop	r23
    13f4:	6f 91       	pop	r22
    13f6:	5f 91       	pop	r21
    13f8:	4f 91       	pop	r20
    13fa:	3f 91       	pop	r19
    13fc:	2f 91       	pop	r18
    13fe:	0f 90       	pop	r0
    1400:	0f be       	out	0x3f, r0	; 63
    1402:	0f 90       	pop	r0
    1404:	1f 90       	pop	r1
    1406:	18 95       	reti

00001408 <SPI_voidMasterInit>:
/* Global Pointer to Function */
void (*Global_PF_Vector_12)(u8 *Copy_u8RecivedData) = NULL ;


void SPI_voidMasterInit (void)
{
    1408:	df 93       	push	r29
    140a:	cf 93       	push	r28
    140c:	cd b7       	in	r28, 0x3d	; 61
    140e:	de b7       	in	r29, 0x3e	; 62

/*        Master I/O DIO_PIN Mode           */
    DIO_voidSetPinDirection(DIO_PORTB,DIO_PIN5,DIO_OUTPUT);         // MOSI DIO_OUTPUT in Master Mode
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	65 e0       	ldi	r22, 0x05	; 5
    1414:	41 e0       	ldi	r20, 0x01	; 1
    1416:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(DIO_PORTB,DIO_PIN6,DIO_INPUT);          // MISO DIO_INPUT  in Master Mode
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	66 e0       	ldi	r22, 0x06	; 6
    141e:	40 e0       	ldi	r20, 0x00	; 0
    1420:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(DIO_PORTB,DIO_PIN7,DIO_OUTPUT);         // CLOK DIO_OUTPUT in Master Mode
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	67 e0       	ldi	r22, 0x07	; 7
    1428:	41 e0       	ldi	r20, 0x01	; 1
    142a:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(DIO_PORTB,DIO_PIN4,DIO_INPUT);          // SS Slave Select DIO_INPUT in Master Mode if we have one Slave only
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	64 e0       	ldi	r22, 0x04	; 4
    1432:	40 e0       	ldi	r20, 0x00	; 0
    1434:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <DIO_voidSetPinDirection>


/*          Select Master  Mode         */
    
        SET_BIT(SPCR_REG,SPCR_MSTR);
    1438:	ad e2       	ldi	r26, 0x2D	; 45
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	ed e2       	ldi	r30, 0x2D	; 45
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	80 61       	ori	r24, 0x10	; 16
    1444:	8c 93       	st	X, r24


/*    Select MSB or LSB Send at First   */
   
    #if ( DATA_ORDER == MSB_FIRST )
        CLR_BIT(SPCR_REG,SPCR_DORD);                  // select MSB to be send first
    1446:	ad e2       	ldi	r26, 0x2D	; 45
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	ed e2       	ldi	r30, 0x2D	; 45
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	8f 7d       	andi	r24, 0xDF	; 223
    1452:	8c 93       	st	X, r24


/*  Select Clock Polarity Raisinr or Falling */
     
    #if ( CLK_POLARITY == RAISING_Leading_Edge )    
        CLR_BIT(SPCR_REG,SPCR_CPOL);                  // Select Raising at Leading edge & Falling at Tralling Edge
    1454:	ad e2       	ldi	r26, 0x2D	; 45
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	ed e2       	ldi	r30, 0x2D	; 45
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	87 7f       	andi	r24, 0xF7	; 247
    1460:	8c 93       	st	X, r24


/*  Select Clock Phase Sample or setup on Leading */
  
    #if ( CLK_PHASE == SAMPLE_Leading_Edge )     
        CLR_BIT(SPCR_REG,SPCR_CPHA);                  // Select Sampling at leadding edge & Setup at Trailling Edge
    1462:	ad e2       	ldi	r26, 0x2D	; 45
    1464:	b0 e0       	ldi	r27, 0x00	; 0
    1466:	ed e2       	ldi	r30, 0x2D	; 45
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	8b 7f       	andi	r24, 0xFB	; 251
    146e:	8c 93       	st	X, r24
    #if(PRESCALER == PRESCALER_DIVISION_BY_4)
        CLR_BIT(SPCR_REG,SPCR_SPR0);
        CLR_BIT(SPCR_REG,SPCR_SPR1);
        CLR_BIT(SPSR_REG,SPSR_SPI2X);
    #elif(PRESCALER == PRESCALER_DIVISION_BY_16)
          SET_BIT(SPCR_REG,SPCR_SPR0);
    1470:	ad e2       	ldi	r26, 0x2D	; 45
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	ed e2       	ldi	r30, 0x2D	; 45
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	81 60       	ori	r24, 0x01	; 1
    147c:	8c 93       	st	X, r24
        CLR_BIT(SPCR_REG,SPCR_SPR1);
    147e:	ad e2       	ldi	r26, 0x2D	; 45
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	ed e2       	ldi	r30, 0x2D	; 45
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	8d 7f       	andi	r24, 0xFD	; 253
    148a:	8c 93       	st	X, r24
        CLR_BIT(SPSR_REG,SPSR_SPI2X);
    148c:	ae e2       	ldi	r26, 0x2E	; 46
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	ee e2       	ldi	r30, 0x2E	; 46
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	8e 7f       	andi	r24, 0xFE	; 254
    1498:	8c 93       	st	X, r24
    #endif


/*              Enable SPI              */
        
    SET_BIT(SPCR_REG,SPCR_SPE);                     // Enable SPI
    149a:	ad e2       	ldi	r26, 0x2D	; 45
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	ed e2       	ldi	r30, 0x2D	; 45
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	80 64       	ori	r24, 0x40	; 64
    14a6:	8c 93       	st	X, r24

}
    14a8:	cf 91       	pop	r28
    14aa:	df 91       	pop	r29
    14ac:	08 95       	ret

000014ae <SPI_voidSlaveInit>:


void SPI_voidSlaveInit (void)
{
    14ae:	df 93       	push	r29
    14b0:	cf 93       	push	r28
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62

/*          Slave I/O DIO_PIN Mode          */
    DIO_voidSetPinDirection (DIO_PORTB,DIO_PIN5,DIO_INPUT);         // MOSI  DIO_INPUT in Slave Mode
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	65 e0       	ldi	r22, 0x05	; 5
    14ba:	40 e0       	ldi	r20, 0x00	; 0
    14bc:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(DIO_PORTB,DIO_PIN6,DIO_OUTPUT);         // MISO DIO_OUTPUT in Slave Mode
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	66 e0       	ldi	r22, 0x06	; 6
    14c4:	41 e0       	ldi	r20, 0x01	; 1
    14c6:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection (DIO_PORTB,DIO_PIN7,DIO_INPUT);         // CLOK  DIO_INPUT in Slave Mode
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	67 e0       	ldi	r22, 0x07	; 7
    14ce:	40 e0       	ldi	r20, 0x00	; 0
    14d0:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection (DIO_PORTB,DIO_PIN4,DIO_INPUT);         // SS Slave Select DIO_INPUT in Slave Mode
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	64 e0       	ldi	r22, 0x04	; 4
    14d8:	40 e0       	ldi	r20, 0x00	; 0
    14da:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <DIO_voidSetPinDirection>
    DIO_voidSetPinValue (DIO_PORTB,DIO_PIN4,DIO_LOW);               // Set LOW on SS Always if we have one Slave
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	64 e0       	ldi	r22, 0x04	; 4
    14e2:	40 e0       	ldi	r20, 0x00	; 0
    14e4:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>

/*          Select Slave  Mode          */
    
    CLR_BIT(SPCR_REG,SPCR_MSTR);
    14e8:	ad e2       	ldi	r26, 0x2D	; 45
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	ed e2       	ldi	r30, 0x2D	; 45
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	8f 7e       	andi	r24, 0xEF	; 239
    14f4:	8c 93       	st	X, r24

/*    Select MSB or LSB Send at First   */              // Same With Master Configration.   
    #if ( DATA_ORDER == MSB_FIRST )
        CLR_BIT(SPCR_REG,SPCR_DORD);                  // select MSB to be send first
    14f6:	ad e2       	ldi	r26, 0x2D	; 45
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	ed e2       	ldi	r30, 0x2D	; 45
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	8f 7d       	andi	r24, 0xDF	; 223
    1502:	8c 93       	st	X, r24


/*  Select Clock Polarity Raisinr or Falling */         // Same With Master Configration.
     
    #if ( CLK_POLARITY == RAISING_Leading_Edge )    
        CLR_BIT(SPCR_REG,SPCR_CPOL);                  // Select Raising at Leading edge & Falling at Tralling Edge
    1504:	ad e2       	ldi	r26, 0x2D	; 45
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	ed e2       	ldi	r30, 0x2D	; 45
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	87 7f       	andi	r24, 0xF7	; 247
    1510:	8c 93       	st	X, r24


/*  Select Clock Phase Sample or setup on Leading */    // Same With Master Configration.
  
    #if ( CLK_PHASE == SAMPLE_Leading_Edge )     
        CLR_BIT(SPCR_REG,SPCR_CPHA);                  // Select Sampling at leadding edge & Setup at Trailling Edge
    1512:	ad e2       	ldi	r26, 0x2D	; 45
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	ed e2       	ldi	r30, 0x2D	; 45
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	8b 7f       	andi	r24, 0xFB	; 251
    151e:	8c 93       	st	X, r24
    #elif ( CLK_PHASE == SETUP_Leading_Edge )    
        SET_BIT(SPCR_REG,SPCR_CPHA);                    // Select Setup at leadding edge & Sampling at Trailling Edge
    #endif

/*              Enable SPI              */        
    SET_BIT(SPCR_REG,SPCR_SPE);                     // Enable SPI
    1520:	ad e2       	ldi	r26, 0x2D	; 45
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	ed e2       	ldi	r30, 0x2D	; 45
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	80 64       	ori	r24, 0x40	; 64
    152c:	8c 93       	st	X, r24
     
}
    152e:	cf 91       	pop	r28
    1530:	df 91       	pop	r29
    1532:	08 95       	ret

00001534 <SPI_u8TranceiveData>:

u8 SPI_u8TranceiveData (u8 Copy_u8Data)
{
    1534:	df 93       	push	r29
    1536:	cf 93       	push	r28
    1538:	0f 92       	push	r0
    153a:	cd b7       	in	r28, 0x3d	; 61
    153c:	de b7       	in	r29, 0x3e	; 62
    153e:	89 83       	std	Y+1, r24	; 0x01
    /* Transmit */
    // set the data to REG
    SPDR_REG = Copy_u8Data ;
    1540:	ef e2       	ldi	r30, 0x2F	; 47
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	89 81       	ldd	r24, Y+1	; 0x01
    1546:	80 83       	st	Z, r24
    // polling
    while( (GET_BIT(SPSR_REG,SPSR_SPIF)) == 0 );
    1548:	ee e2       	ldi	r30, 0x2E	; 46
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	88 23       	and	r24, r24
    1550:	dc f7       	brge	.-10     	; 0x1548 <SPI_u8TranceiveData+0x14>
    // clear the flag
    SET_BIT(SPSR_REG,SPSR_SPIF);
    1552:	ae e2       	ldi	r26, 0x2E	; 46
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	ee e2       	ldi	r30, 0x2E	; 46
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	80 68       	ori	r24, 0x80	; 128
    155e:	8c 93       	st	X, r24

    /* Recieve */
    return SPDR_REG ;
    1560:	ef e2       	ldi	r30, 0x2F	; 47
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z

}
    1566:	0f 90       	pop	r0
    1568:	cf 91       	pop	r28
    156a:	df 91       	pop	r29
    156c:	08 95       	ret

0000156e <SPI_voidTransmitData>:


void SPI_voidTransmitData (u8 Copy_u8Data)
{
    156e:	df 93       	push	r29
    1570:	cf 93       	push	r28
    1572:	0f 92       	push	r0
    1574:	cd b7       	in	r28, 0x3d	; 61
    1576:	de b7       	in	r29, 0x3e	; 62
    1578:	89 83       	std	Y+1, r24	; 0x01
    // set the data to REG
    SPDR_REG = Copy_u8Data ;
    157a:	ef e2       	ldi	r30, 0x2F	; 47
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	89 81       	ldd	r24, Y+1	; 0x01
    1580:	80 83       	st	Z, r24
    // polling
    while( (GET_BIT(SPSR_REG,SPSR_SPIF)) == 0 );
    1582:	ee e2       	ldi	r30, 0x2E	; 46
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	88 23       	and	r24, r24
    158a:	dc f7       	brge	.-10     	; 0x1582 <SPI_voidTransmitData+0x14>
    // clear the flag
    SET_BIT(SPSR_REG,SPSR_SPIF);
    158c:	ae e2       	ldi	r26, 0x2E	; 46
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	ee e2       	ldi	r30, 0x2E	; 46
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	80 68       	ori	r24, 0x80	; 128
    1598:	8c 93       	st	X, r24
}
    159a:	0f 90       	pop	r0
    159c:	cf 91       	pop	r28
    159e:	df 91       	pop	r29
    15a0:	08 95       	ret

000015a2 <SPI_voidRecieveData>:



u8 SPI_voidRecieveData (void)
{
    15a2:	df 93       	push	r29
    15a4:	cf 93       	push	r28
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
    return SPDR_REG ;
    15aa:	ef e2       	ldi	r30, 0x2F	; 47
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	80 81       	ld	r24, Z
}
    15b0:	cf 91       	pop	r28
    15b2:	df 91       	pop	r29
    15b4:	08 95       	ret

000015b6 <SPI_voidTranceiveString>:


void SPI_voidTranceiveString (u8 *Copy_Au8TransmitString , u8 *Copy_u8RecieveString )
{
    15b6:	df 93       	push	r29
    15b8:	cf 93       	push	r28
    15ba:	00 d0       	rcall	.+0      	; 0x15bc <SPI_voidTranceiveString+0x6>
    15bc:	00 d0       	rcall	.+0      	; 0x15be <SPI_voidTranceiveString+0x8>
    15be:	0f 92       	push	r0
    15c0:	cd b7       	in	r28, 0x3d	; 61
    15c2:	de b7       	in	r29, 0x3e	; 62
    15c4:	9b 83       	std	Y+3, r25	; 0x03
    15c6:	8a 83       	std	Y+2, r24	; 0x02
    15c8:	7d 83       	std	Y+5, r23	; 0x05
    15ca:	6c 83       	std	Y+4, r22	; 0x04
    for ( u8 iter=0 ; Copy_Au8TransmitString[iter] != '\0' ; iter++ )
    15cc:	19 82       	std	Y+1, r1	; 0x01
    15ce:	27 c0       	rjmp	.+78     	; 0x161e <SPI_voidTranceiveString+0x68>
    {
        /* Send Data */
        // set the data to REG
        SPDR_REG = Copy_Au8TransmitString[iter] ;
    15d0:	af e2       	ldi	r26, 0x2F	; 47
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	89 81       	ldd	r24, Y+1	; 0x01
    15d6:	28 2f       	mov	r18, r24
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	8a 81       	ldd	r24, Y+2	; 0x02
    15dc:	9b 81       	ldd	r25, Y+3	; 0x03
    15de:	fc 01       	movw	r30, r24
    15e0:	e2 0f       	add	r30, r18
    15e2:	f3 1f       	adc	r31, r19
    15e4:	80 81       	ld	r24, Z
    15e6:	8c 93       	st	X, r24
        // polling
        while( (GET_BIT(SPSR_REG,SPSR_SPIF)) == 0 );
    15e8:	ee e2       	ldi	r30, 0x2E	; 46
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	88 23       	and	r24, r24
    15f0:	dc f7       	brge	.-10     	; 0x15e8 <SPI_voidTranceiveString+0x32>
        // clear the flag
        SET_BIT(SPSR_REG,SPSR_SPIF);
    15f2:	ae e2       	ldi	r26, 0x2E	; 46
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	ee e2       	ldi	r30, 0x2E	; 46
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	80 68       	ori	r24, 0x80	; 128
    15fe:	8c 93       	st	X, r24

        /* Recieve Data */
        Copy_u8RecieveString[iter] = SPDR_REG ;
    1600:	89 81       	ldd	r24, Y+1	; 0x01
    1602:	28 2f       	mov	r18, r24
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	8c 81       	ldd	r24, Y+4	; 0x04
    1608:	9d 81       	ldd	r25, Y+5	; 0x05
    160a:	dc 01       	movw	r26, r24
    160c:	a2 0f       	add	r26, r18
    160e:	b3 1f       	adc	r27, r19
    1610:	ef e2       	ldi	r30, 0x2F	; 47
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	8c 93       	st	X, r24
}


void SPI_voidTranceiveString (u8 *Copy_Au8TransmitString , u8 *Copy_u8RecieveString )
{
    for ( u8 iter=0 ; Copy_Au8TransmitString[iter] != '\0' ; iter++ )
    1618:	89 81       	ldd	r24, Y+1	; 0x01
    161a:	8f 5f       	subi	r24, 0xFF	; 255
    161c:	89 83       	std	Y+1, r24	; 0x01
    161e:	89 81       	ldd	r24, Y+1	; 0x01
    1620:	28 2f       	mov	r18, r24
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	8a 81       	ldd	r24, Y+2	; 0x02
    1626:	9b 81       	ldd	r25, Y+3	; 0x03
    1628:	fc 01       	movw	r30, r24
    162a:	e2 0f       	add	r30, r18
    162c:	f3 1f       	adc	r31, r19
    162e:	80 81       	ld	r24, Z
    1630:	88 23       	and	r24, r24
    1632:	71 f6       	brne	.-100    	; 0x15d0 <SPI_voidTranceiveString+0x1a>
        SET_BIT(SPSR_REG,SPSR_SPIF);

        /* Recieve Data */
        Copy_u8RecieveString[iter] = SPDR_REG ;
    }
}
    1634:	0f 90       	pop	r0
    1636:	0f 90       	pop	r0
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
    163c:	0f 90       	pop	r0
    163e:	cf 91       	pop	r28
    1640:	df 91       	pop	r29
    1642:	08 95       	ret

00001644 <SPI_u8AsynTranceiveData>:

void SPI_u8AsynTranceiveData (u8 Copy_u8Data)
{
    1644:	df 93       	push	r29
    1646:	cf 93       	push	r28
    1648:	0f 92       	push	r0
    164a:	cd b7       	in	r28, 0x3d	; 61
    164c:	de b7       	in	r29, 0x3e	; 62
    164e:	89 83       	std	Y+1, r24	; 0x01
 
    SET_BIT(SPCR_REG,SPCR_SPIE);            // Enable SPI Interrupt
    1650:	ad e2       	ldi	r26, 0x2D	; 45
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	ed e2       	ldi	r30, 0x2D	; 45
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	80 68       	ori	r24, 0x80	; 128
    165c:	8c 93       	st	X, r24
    /* Transmit */
    SPDR_REG = Copy_u8Data ;                // set the data to REG
    165e:	ef e2       	ldi	r30, 0x2F	; 47
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	89 81       	ldd	r24, Y+1	; 0x01
    1664:	80 83       	st	Z, r24
}
    1666:	0f 90       	pop	r0
    1668:	cf 91       	pop	r28
    166a:	df 91       	pop	r29
    166c:	08 95       	ret

0000166e <SPI_voidSetCallBack>:



void SPI_voidSetCallBack (  void (*Local_PointerToFunction) (u8 *Copy_u8RecivedData) )
{
    166e:	df 93       	push	r29
    1670:	cf 93       	push	r28
    1672:	00 d0       	rcall	.+0      	; 0x1674 <SPI_voidSetCallBack+0x6>
    1674:	cd b7       	in	r28, 0x3d	; 61
    1676:	de b7       	in	r29, 0x3e	; 62
    1678:	9a 83       	std	Y+2, r25	; 0x02
    167a:	89 83       	std	Y+1, r24	; 0x01
    Global_PF_Vector_12 = Local_PointerToFunction ;
    167c:	89 81       	ldd	r24, Y+1	; 0x01
    167e:	9a 81       	ldd	r25, Y+2	; 0x02
    1680:	90 93 46 02 	sts	0x0246, r25
    1684:	80 93 45 02 	sts	0x0245, r24
}
    1688:	0f 90       	pop	r0
    168a:	0f 90       	pop	r0
    168c:	cf 91       	pop	r28
    168e:	df 91       	pop	r29
    1690:	08 95       	ret

00001692 <__vector_12>:



void __vector_12 (void)    __attribute__((signal));
void __vector_12 (void)
{
    1692:	1f 92       	push	r1
    1694:	0f 92       	push	r0
    1696:	0f b6       	in	r0, 0x3f	; 63
    1698:	0f 92       	push	r0
    169a:	11 24       	eor	r1, r1
    169c:	2f 93       	push	r18
    169e:	3f 93       	push	r19
    16a0:	4f 93       	push	r20
    16a2:	5f 93       	push	r21
    16a4:	6f 93       	push	r22
    16a6:	7f 93       	push	r23
    16a8:	8f 93       	push	r24
    16aa:	9f 93       	push	r25
    16ac:	af 93       	push	r26
    16ae:	bf 93       	push	r27
    16b0:	ef 93       	push	r30
    16b2:	ff 93       	push	r31
    16b4:	df 93       	push	r29
    16b6:	cf 93       	push	r28
    16b8:	00 d0       	rcall	.+0      	; 0x16ba <__vector_12+0x28>
    16ba:	0f 92       	push	r0
    16bc:	cd b7       	in	r28, 0x3d	; 61
    16be:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8Data ;
    // Recieve Data
    Local_u8Data = SPDR_REG ;
    16c0:	ef e2       	ldi	r30, 0x2F	; 47
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	8b 83       	std	Y+3, r24	; 0x03
    u8 *Local_Pu8Data = &Local_u8Data ;
    16c8:	ce 01       	movw	r24, r28
    16ca:	03 96       	adiw	r24, 0x03	; 3
    16cc:	9a 83       	std	Y+2, r25	; 0x02
    16ce:	89 83       	std	Y+1, r24	; 0x01
    Global_PF_Vector_12 ( Local_Pu8Data );      // Call Back Application Function
    16d0:	e0 91 45 02 	lds	r30, 0x0245
    16d4:	f0 91 46 02 	lds	r31, 0x0246
    16d8:	89 81       	ldd	r24, Y+1	; 0x01
    16da:	9a 81       	ldd	r25, Y+2	; 0x02
    16dc:	09 95       	icall
    CLR_BIT(SPCR_REG,SPCR_SPIE);              // Disable SPI Interrupt
    16de:	ad e2       	ldi	r26, 0x2D	; 45
    16e0:	b0 e0       	ldi	r27, 0x00	; 0
    16e2:	ed e2       	ldi	r30, 0x2D	; 45
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	8f 77       	andi	r24, 0x7F	; 127
    16ea:	8c 93       	st	X, r24
}
    16ec:	0f 90       	pop	r0
    16ee:	0f 90       	pop	r0
    16f0:	0f 90       	pop	r0
    16f2:	cf 91       	pop	r28
    16f4:	df 91       	pop	r29
    16f6:	ff 91       	pop	r31
    16f8:	ef 91       	pop	r30
    16fa:	bf 91       	pop	r27
    16fc:	af 91       	pop	r26
    16fe:	9f 91       	pop	r25
    1700:	8f 91       	pop	r24
    1702:	7f 91       	pop	r23
    1704:	6f 91       	pop	r22
    1706:	5f 91       	pop	r21
    1708:	4f 91       	pop	r20
    170a:	3f 91       	pop	r19
    170c:	2f 91       	pop	r18
    170e:	0f 90       	pop	r0
    1710:	0f be       	out	0x3f, r0	; 63
    1712:	0f 90       	pop	r0
    1714:	1f 90       	pop	r1
    1716:	18 95       	reti

00001718 <ICU_voidInit>:
#include"../TIMERS/TIMER1/TIMER1_Config.h"
/* Global Pointer to Function */
void (*GlobalPF_vector_6) ( void ) = NULL ;

void ICU_voidInit (void)
{
    1718:	df 93       	push	r29
    171a:	cf 93       	push	r28
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62
    TIMER1_voidInit();
    1720:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <TIMER1_voidInit>


/*  TIMER1 Normal Mode Selection to use ICU to Calculate PWM Frequency */

        /*       TIMER1 Normal Mode      */                             
        CLR_BIT(TCCR1A_REG,TCCR1A_WGM10);
    1724:	af e4       	ldi	r26, 0x4F	; 79
    1726:	b0 e0       	ldi	r27, 0x00	; 0
    1728:	ef e4       	ldi	r30, 0x4F	; 79
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
    172e:	8e 7f       	andi	r24, 0xFE	; 254
    1730:	8c 93       	st	X, r24
        CLR_BIT(TCCR1A_REG,TCCR1A_WGM11);
    1732:	af e4       	ldi	r26, 0x4F	; 79
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	ef e4       	ldi	r30, 0x4F	; 79
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	8d 7f       	andi	r24, 0xFD	; 253
    173e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG,TCCR1B_WGM12);
    1740:	ae e4       	ldi	r26, 0x4E	; 78
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	ee e4       	ldi	r30, 0x4E	; 78
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	87 7f       	andi	r24, 0xF7	; 247
    174c:	8c 93       	st	X, r24
        CLR_BIT(TCCR1B_REG,TCCR1B_WGM13);
    174e:	ae e4       	ldi	r26, 0x4E	; 78
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	ee e4       	ldi	r30, 0x4E	; 78
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	8f 7e       	andi	r24, 0xEF	; 239
    175a:	8c 93       	st	X, r24


/*                     TIMER1 Prescaller Selection                     */

    TCCR1B_REG = ( TCCR1B_REG & 0b11111000 );              // Clear Prescaller 
    175c:	ae e4       	ldi	r26, 0x4E	; 78
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	ee e4       	ldi	r30, 0x4E	; 78
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	88 7f       	andi	r24, 0xF8	; 248
    1768:	8c 93       	st	X, r24
    #elif ( PRESCALER == NOT_USE_PRESCALER )
          SET_BIT(TCCR1B_REG,TCCR1B_CS10);
        CLR_BIT(TCCR1B_REG,TCCR1B_CS11);
        CLR_BIT(TCCR1B_REG,TCCR1B_CS12);
    #elif ( PRESCALER == PRESCALER_DIVISION_BY_8 )
        CLR_BIT(TCCR1B_REG,TCCR1B_CS10);
    176a:	ae e4       	ldi	r26, 0x4E	; 78
    176c:	b0 e0       	ldi	r27, 0x00	; 0
    176e:	ee e4       	ldi	r30, 0x4E	; 78
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	80 81       	ld	r24, Z
    1774:	8e 7f       	andi	r24, 0xFE	; 254
    1776:	8c 93       	st	X, r24
          SET_BIT(TCCR1B_REG,TCCR1B_CS11);
    1778:	ae e4       	ldi	r26, 0x4E	; 78
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	ee e4       	ldi	r30, 0x4E	; 78
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	82 60       	ori	r24, 0x02	; 2
    1784:	8c 93       	st	X, r24
        CLR_BIT(TCCR1B_REG,TCCR1B_CS12);
    1786:	ae e4       	ldi	r26, 0x4E	; 78
    1788:	b0 e0       	ldi	r27, 0x00	; 0
    178a:	ee e4       	ldi	r30, 0x4E	; 78
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
    1790:	8b 7f       	andi	r24, 0xFB	; 251
    1792:	8c 93       	st	X, r24
        SET_BIT(TCCR1B_REG,TCCR1B_CS12);
    #else
        #error  Wrong selection of Prescaller mode
    #endif

    ICU_voidEdgeSelect ( RAISING_EDGE );        // Sense Raising Edge to start calculate time of Period Time from First Raising Ege to Second Raising Edge.
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <ICU_voidEdgeSelect>

    SET_BIT(TIMSK_REG,TIMER_TIMSK_TICIE);              // Enable PIE of ICU    
    179a:	a9 e5       	ldi	r26, 0x59	; 89
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	e9 e5       	ldi	r30, 0x59	; 89
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	80 62       	ori	r24, 0x20	; 32
    17a6:	8c 93       	st	X, r24
}
    17a8:	cf 91       	pop	r28
    17aa:	df 91       	pop	r29
    17ac:	08 95       	ret

000017ae <ICU_voidDisableInterrupt>:


void ICU_voidDisableInterrupt(void)
{
    17ae:	df 93       	push	r29
    17b0:	cf 93       	push	r28
    17b2:	cd b7       	in	r28, 0x3d	; 61
    17b4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK_REG,TIMER_TIMSK_TICIE);
    17b6:	a9 e5       	ldi	r26, 0x59	; 89
    17b8:	b0 e0       	ldi	r27, 0x00	; 0
    17ba:	e9 e5       	ldi	r30, 0x59	; 89
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	80 81       	ld	r24, Z
    17c0:	8f 7d       	andi	r24, 0xDF	; 223
    17c2:	8c 93       	st	X, r24
}
    17c4:	cf 91       	pop	r28
    17c6:	df 91       	pop	r29
    17c8:	08 95       	ret

000017ca <ICU_voidEdgeSelect>:

void ICU_voidEdgeSelect ( u8 Copy_u8EdgeSelect )
{
    17ca:	df 93       	push	r29
    17cc:	cf 93       	push	r28
    17ce:	00 d0       	rcall	.+0      	; 0x17d0 <ICU_voidEdgeSelect+0x6>
    17d0:	0f 92       	push	r0
    17d2:	cd b7       	in	r28, 0x3d	; 61
    17d4:	de b7       	in	r29, 0x3e	; 62
    17d6:	89 83       	std	Y+1, r24	; 0x01
    switch ( Copy_u8EdgeSelect )
    17d8:	89 81       	ldd	r24, Y+1	; 0x01
    17da:	28 2f       	mov	r18, r24
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	3b 83       	std	Y+3, r19	; 0x03
    17e0:	2a 83       	std	Y+2, r18	; 0x02
    17e2:	8a 81       	ldd	r24, Y+2	; 0x02
    17e4:	9b 81       	ldd	r25, Y+3	; 0x03
    17e6:	00 97       	sbiw	r24, 0x00	; 0
    17e8:	31 f0       	breq	.+12     	; 0x17f6 <ICU_voidEdgeSelect+0x2c>
    17ea:	2a 81       	ldd	r18, Y+2	; 0x02
    17ec:	3b 81       	ldd	r19, Y+3	; 0x03
    17ee:	21 30       	cpi	r18, 0x01	; 1
    17f0:	31 05       	cpc	r19, r1
    17f2:	49 f0       	breq	.+18     	; 0x1806 <ICU_voidEdgeSelect+0x3c>
    17f4:	0f c0       	rjmp	.+30     	; 0x1814 <ICU_voidEdgeSelect+0x4a>
    {
        case FALLING_EDGE :  CLR_BIT(TCCR1B_REG,TCCR1B_ICES1);       break;
    17f6:	ae e4       	ldi	r26, 0x4E	; 78
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	ee e4       	ldi	r30, 0x4E	; 78
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	8f 7b       	andi	r24, 0xBF	; 191
    1802:	8c 93       	st	X, r24
    1804:	07 c0       	rjmp	.+14     	; 0x1814 <ICU_voidEdgeSelect+0x4a>
        case RAISING_EDGE :    SET_BIT(TCCR1B_REG,TCCR1B_ICES1);       break;
    1806:	ae e4       	ldi	r26, 0x4E	; 78
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	ee e4       	ldi	r30, 0x4E	; 78
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	80 64       	ori	r24, 0x40	; 64
    1812:	8c 93       	st	X, r24
        default           :         break;
    }
}
    1814:	0f 90       	pop	r0
    1816:	0f 90       	pop	r0
    1818:	0f 90       	pop	r0
    181a:	cf 91       	pop	r28
    181c:	df 91       	pop	r29
    181e:	08 95       	ret

00001820 <ICU_u16GetReadICR1>:



u16 ICU_u16GetReadICR1 (void)
{
    1820:	df 93       	push	r29
    1822:	cf 93       	push	r28
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
	return ICR1_REG ;
    1828:	e6 e4       	ldi	r30, 0x46	; 70
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	91 81       	ldd	r25, Z+1	; 0x01
}
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	08 95       	ret

00001836 <ICU_SetCallBackFun>:



void ICU_SetCallBackFun ( void (*LocalPF_vector_6) (void) )
{
    1836:	df 93       	push	r29
    1838:	cf 93       	push	r28
    183a:	00 d0       	rcall	.+0      	; 0x183c <ICU_SetCallBackFun+0x6>
    183c:	cd b7       	in	r28, 0x3d	; 61
    183e:	de b7       	in	r29, 0x3e	; 62
    1840:	9a 83       	std	Y+2, r25	; 0x02
    1842:	89 83       	std	Y+1, r24	; 0x01
	GlobalPF_vector_6 = LocalPF_vector_6 ;
    1844:	89 81       	ldd	r24, Y+1	; 0x01
    1846:	9a 81       	ldd	r25, Y+2	; 0x02
    1848:	90 93 48 02 	sts	0x0248, r25
    184c:	80 93 47 02 	sts	0x0247, r24
}
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	cf 91       	pop	r28
    1856:	df 91       	pop	r29
    1858:	08 95       	ret

0000185a <__vector_6>:


/*  ISR (ICU)  */
void __vector_6 (void)    __attribute__((signal));
void __vector_6 (void)
{
    185a:	1f 92       	push	r1
    185c:	0f 92       	push	r0
    185e:	0f b6       	in	r0, 0x3f	; 63
    1860:	0f 92       	push	r0
    1862:	11 24       	eor	r1, r1
    1864:	2f 93       	push	r18
    1866:	3f 93       	push	r19
    1868:	4f 93       	push	r20
    186a:	5f 93       	push	r21
    186c:	6f 93       	push	r22
    186e:	7f 93       	push	r23
    1870:	8f 93       	push	r24
    1872:	9f 93       	push	r25
    1874:	af 93       	push	r26
    1876:	bf 93       	push	r27
    1878:	ef 93       	push	r30
    187a:	ff 93       	push	r31
    187c:	df 93       	push	r29
    187e:	cf 93       	push	r28
    1880:	cd b7       	in	r28, 0x3d	; 61
    1882:	de b7       	in	r29, 0x3e	; 62
	if (GlobalPF_vector_6 != NULL )
    1884:	80 91 47 02 	lds	r24, 0x0247
    1888:	90 91 48 02 	lds	r25, 0x0248
    188c:	00 97       	sbiw	r24, 0x00	; 0
    188e:	29 f0       	breq	.+10     	; 0x189a <__vector_6+0x40>
	{
		GlobalPF_vector_6();
    1890:	e0 91 47 02 	lds	r30, 0x0247
    1894:	f0 91 48 02 	lds	r31, 0x0248
    1898:	09 95       	icall
	}
}
    189a:	cf 91       	pop	r28
    189c:	df 91       	pop	r29
    189e:	ff 91       	pop	r31
    18a0:	ef 91       	pop	r30
    18a2:	bf 91       	pop	r27
    18a4:	af 91       	pop	r26
    18a6:	9f 91       	pop	r25
    18a8:	8f 91       	pop	r24
    18aa:	7f 91       	pop	r23
    18ac:	6f 91       	pop	r22
    18ae:	5f 91       	pop	r21
    18b0:	4f 91       	pop	r20
    18b2:	3f 91       	pop	r19
    18b4:	2f 91       	pop	r18
    18b6:	0f 90       	pop	r0
    18b8:	0f be       	out	0x3f, r0	; 63
    18ba:	0f 90       	pop	r0
    18bc:	1f 90       	pop	r1
    18be:	18 95       	reti

000018c0 <I2C_voidMasterInit>:
#include "I2C_Interface.h"
#include "I2C_Private.h"
#include "I2C_Config.h"

void I2C_voidMasterInit (u8 Copy_u8MasterAddress)
{
    18c0:	df 93       	push	r29
    18c2:	cf 93       	push	r28
    18c4:	0f 92       	push	r0
    18c6:	cd b7       	in	r28, 0x3d	; 61
    18c8:	de b7       	in	r29, 0x3e	; 62
    18ca:	89 83       	std	Y+1, r24	; 0x01
    Enable_ACK ();           // Enable ACK  
    18cc:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <Enable_ACK>
    
    TWBR_REG = 2 ;                        // Set TWBR with vale => 400 KHz ( TWBR = 2 )
    18d0:	e0 e2       	ldi	r30, 0x20	; 32
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	82 e0       	ldi	r24, 0x02	; 2
    18d6:	80 83       	st	Z, r24
    // Set prescaller == 1 (clr TWSR 0,1)
    CLR_BIT(TWSR_REG,TWSR_TWPS0);
    18d8:	a1 e2       	ldi	r26, 0x21	; 33
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	e1 e2       	ldi	r30, 0x21	; 33
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	8e 7f       	andi	r24, 0xFE	; 254
    18e4:	8c 93       	st	X, r24
    CLR_BIT(TWSR_REG,TWSR_TWPS1);
    18e6:	a1 e2       	ldi	r26, 0x21	; 33
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	e1 e2       	ldi	r30, 0x21	; 33
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	8d 7f       	andi	r24, 0xFD	; 253
    18f2:	8c 93       	st	X, r24
    /*Check if the master node will be addressed or not*/
	if( Copy_u8MasterAddress == 0x00 )
    18f4:	89 81       	ldd	r24, Y+1	; 0x01
    18f6:	88 23       	and	r24, r24
    18f8:	29 f0       	breq	.+10     	; 0x1904 <I2C_voidMasterInit+0x44>
		/*Do Nothing*/
	}
	else
	{
		/*Set The Required Address to The Master*/
		TWAR_REG = (Copy_u8MasterAddress << 1);
    18fa:	e2 e2       	ldi	r30, 0x22	; 34
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	89 81       	ldd	r24, Y+1	; 0x01
    1900:	88 0f       	add	r24, r24
    1902:	80 83       	st	Z, r24
	}
    // Enable I2C  ( set TWCR 2 )
    SET_BIT(TWCR_REG,TWCR_TWEN);
    1904:	a6 e5       	ldi	r26, 0x56	; 86
    1906:	b0 e0       	ldi	r27, 0x00	; 0
    1908:	e6 e5       	ldi	r30, 0x56	; 86
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	84 60       	ori	r24, 0x04	; 4
    1910:	8c 93       	st	X, r24
}
    1912:	0f 90       	pop	r0
    1914:	cf 91       	pop	r28
    1916:	df 91       	pop	r29
    1918:	08 95       	ret

0000191a <I2C_Master_u8StartCondition>:


Error_t I2C_Master_u8StartCondition (void)
{
    191a:	df 93       	push	r29
    191c:	cf 93       	push	r28
    191e:	0f 92       	push	r0
    1920:	cd b7       	in	r28, 0x3d	; 61
    1922:	de b7       	in	r29, 0x3e	; 62
    Error_t Local_Error = I2C_NO_Error ;
    1924:	19 82       	std	Y+1, r1	; 0x01
    SET_BIT(TWCR_REG,TWCR_TWSTA);                              // Start condition ( Set TWCR 5)
    1926:	a6 e5       	ldi	r26, 0x56	; 86
    1928:	b0 e0       	ldi	r27, 0x00	; 0
    192a:	e6 e5       	ldi	r30, 0x56	; 86
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	80 81       	ld	r24, Z
    1930:	80 62       	ori	r24, 0x20	; 32
    1932:	8c 93       	st	X, r24
    SET_BIT(TWCR_REG,TWCR_TWINT);                              // Clear flag ( Set TWCR 7 )
    1934:	a6 e5       	ldi	r26, 0x56	; 86
    1936:	b0 e0       	ldi	r27, 0x00	; 0
    1938:	e6 e5       	ldi	r30, 0x56	; 86
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	80 68       	ori	r24, 0x80	; 128
    1940:	8c 93       	st	X, r24
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );            // Wait for flag ( TWCR 7 == 0 )
    1942:	e6 e5       	ldi	r30, 0x56	; 86
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	88 23       	and	r24, r24
    194a:	dc f7       	brge	.-10     	; 0x1942 <I2C_Master_u8StartCondition+0x28>
    if ( (TWSR_REG & STATUS_BIT_MASK) != MASTER_START_ACK )    // Check status code == start condition ( TWSR & 0xf8 ) == 0x08
    194c:	e1 e2       	ldi	r30, 0x21	; 33
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	88 2f       	mov	r24, r24
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	88 7f       	andi	r24, 0xF8	; 248
    1958:	90 70       	andi	r25, 0x00	; 0
    195a:	88 30       	cpi	r24, 0x08	; 8
    195c:	91 05       	cpc	r25, r1
    195e:	11 f0       	breq	.+4      	; 0x1964 <I2C_Master_u8StartCondition+0x4a>
    {
        Local_Error = I2C_Error_Master_StartCond_ACK ; 
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_Error ;
    1964:	89 81       	ldd	r24, Y+1	; 0x01
}
    1966:	0f 90       	pop	r0
    1968:	cf 91       	pop	r28
    196a:	df 91       	pop	r29
    196c:	08 95       	ret

0000196e <I2C_Master_u8ReStartCondition>:



Error_t I2C_Master_u8ReStartCondition (void)
{
    196e:	df 93       	push	r29
    1970:	cf 93       	push	r28
    1972:	0f 92       	push	r0
    1974:	cd b7       	in	r28, 0x3d	; 61
    1976:	de b7       	in	r29, 0x3e	; 62
    Error_t Local_Error = I2C_NO_Error ;
    1978:	19 82       	std	Y+1, r1	; 0x01
    SET_BIT(TWCR_REG,TWCR_TWSTA);                                   // Start condition ( Set TWCR 5)
    197a:	a6 e5       	ldi	r26, 0x56	; 86
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	e6 e5       	ldi	r30, 0x56	; 86
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	80 62       	ori	r24, 0x20	; 32
    1986:	8c 93       	st	X, r24
    SET_BIT(TWCR_REG,TWCR_TWINT);                                   // Clear flag ( Set TWCR 7 )
    1988:	a6 e5       	ldi	r26, 0x56	; 86
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	e6 e5       	ldi	r30, 0x56	; 86
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	80 68       	ori	r24, 0x80	; 128
    1994:	8c 93       	st	X, r24
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );                 // Wait for flag ( TWCR 7 == 0 )
    1996:	e6 e5       	ldi	r30, 0x56	; 86
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	88 23       	and	r24, r24
    199e:	dc f7       	brge	.-10     	; 0x1996 <I2C_Master_u8ReStartCondition+0x28>
    if ( (TWSR_REG & STATUS_BIT_MASK) != MASTER_REP_START_ACK )     // Check status code == Repeat condition ( TWSR & 0xf8 ) == 0x10 
    19a0:	e1 e2       	ldi	r30, 0x21	; 33
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	80 81       	ld	r24, Z
    19a6:	88 2f       	mov	r24, r24
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	88 7f       	andi	r24, 0xF8	; 248
    19ac:	90 70       	andi	r25, 0x00	; 0
    19ae:	80 31       	cpi	r24, 0x10	; 16
    19b0:	91 05       	cpc	r25, r1
    19b2:	11 f0       	breq	.+4      	; 0x19b8 <I2C_Master_u8ReStartCondition+0x4a>
    {
        Local_Error = I2C_Error_Master_ReStartCond_ACK ; 
    19b4:	82 e0       	ldi	r24, 0x02	; 2
    19b6:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_Error ;
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    19ba:	0f 90       	pop	r0
    19bc:	cf 91       	pop	r28
    19be:	df 91       	pop	r29
    19c0:	08 95       	ret

000019c2 <I2C_Master_u8SendSLA_Write_ACK>:




Error_t I2C_Master_u8SendSLA_Write_ACK (u8 Copy_u8SlaveAddress)
{
    19c2:	df 93       	push	r29
    19c4:	cf 93       	push	r28
    19c6:	00 d0       	rcall	.+0      	; 0x19c8 <I2C_Master_u8SendSLA_Write_ACK+0x6>
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
    19cc:	8a 83       	std	Y+2, r24	; 0x02
    Error_t Local_Error = I2C_NO_Error ;
    19ce:	19 82       	std	Y+1, r1	; 0x01
    TWDR_REG = (Copy_u8SlaveAddress<<1) ;                           // Write 7 bits slave address ( TWDR == address<<1 )
    19d0:	e3 e2       	ldi	r30, 0x23	; 35
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	8a 81       	ldd	r24, Y+2	; 0x02
    19d6:	88 0f       	add	r24, r24
    19d8:	80 83       	st	Z, r24
    CLR_BIT(TWDR_REG,TWDR_TWD0);                                  // Write condition ( CLEAR TWDR 0 )
    19da:	a3 e2       	ldi	r26, 0x23	; 35
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	e3 e2       	ldi	r30, 0x23	; 35
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	8e 7f       	andi	r24, 0xFE	; 254
    19e6:	8c 93       	st	X, r24
    CLR_BIT(TWCR_REG,TWCR_TWSTA);                                 // Clear start condition bit ( TWCR 5 ) - for sure
    19e8:	a6 e5       	ldi	r26, 0x56	; 86
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	e6 e5       	ldi	r30, 0x56	; 86
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	8f 7d       	andi	r24, 0xDF	; 223
    19f4:	8c 93       	st	X, r24
    SET_BIT(TWCR_REG,TWCR_TWINT);                                   // Clear flag ( Set TWCR 7 )
    19f6:	a6 e5       	ldi	r26, 0x56	; 86
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	e6 e5       	ldi	r30, 0x56	; 86
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 81       	ld	r24, Z
    1a00:	80 68       	ori	r24, 0x80	; 128
    1a02:	8c 93       	st	X, r24
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );                 // Wait for flag ( TWCR 7 == 0 )
    1a04:	e6 e5       	ldi	r30, 0x56	; 86
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	80 81       	ld	r24, Z
    1a0a:	88 23       	and	r24, r24
    1a0c:	dc f7       	brge	.-10     	; 0x1a04 <I2C_Master_u8SendSLA_Write_ACK+0x42>
    if ( (TWSR_REG & STATUS_BIT_MASK) != MASTER_SLA_Write_ACK )     // Check status code == SLA + Write + ACK == (0x18)
    1a0e:	e1 e2       	ldi	r30, 0x21	; 33
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	88 2f       	mov	r24, r24
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	88 7f       	andi	r24, 0xF8	; 248
    1a1a:	90 70       	andi	r25, 0x00	; 0
    1a1c:	88 31       	cpi	r24, 0x18	; 24
    1a1e:	91 05       	cpc	r25, r1
    1a20:	11 f0       	breq	.+4      	; 0x1a26 <I2C_Master_u8SendSLA_Write_ACK+0x64>
    {
        Local_Error = I2C_Error_Master_SendSLA_Write_ACK ; 
    1a22:	83 e0       	ldi	r24, 0x03	; 3
    1a24:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_Error ;
    1a26:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a28:	0f 90       	pop	r0
    1a2a:	0f 90       	pop	r0
    1a2c:	cf 91       	pop	r28
    1a2e:	df 91       	pop	r29
    1a30:	08 95       	ret

00001a32 <I2C_Master_u8SendSLA_Write_NOTACK>:



Error_t I2C_Master_u8SendSLA_Write_NOTACK (u8 Copy_u8SlaveAddress)
{
    1a32:	df 93       	push	r29
    1a34:	cf 93       	push	r28
    1a36:	00 d0       	rcall	.+0      	; 0x1a38 <I2C_Master_u8SendSLA_Write_NOTACK+0x6>
    1a38:	cd b7       	in	r28, 0x3d	; 61
    1a3a:	de b7       	in	r29, 0x3e	; 62
    1a3c:	8a 83       	std	Y+2, r24	; 0x02
    Error_t Local_Error = I2C_NO_Error ;
    1a3e:	19 82       	std	Y+1, r1	; 0x01
    Disable_ACK ();                                                    // Disable ACK
    1a40:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <Disable_ACK>
    TWDR_REG = (Copy_u8SlaveAddress<<1) ;                              // Write 7 bits slave address ( TWDR == address<<1 )
    1a44:	e3 e2       	ldi	r30, 0x23	; 35
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4a:	88 0f       	add	r24, r24
    1a4c:	80 83       	st	Z, r24
    CLR_BIT(TWDR_REG,TWDR_TWD0);                                     // Write condition ( CLEAR TWDR 0 )
    1a4e:	a3 e2       	ldi	r26, 0x23	; 35
    1a50:	b0 e0       	ldi	r27, 0x00	; 0
    1a52:	e3 e2       	ldi	r30, 0x23	; 35
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 81       	ld	r24, Z
    1a58:	8e 7f       	andi	r24, 0xFE	; 254
    1a5a:	8c 93       	st	X, r24
    CLR_BIT(TWCR_REG,TWCR_TWSTA);                                    // Clear start condition bit ( TWCR 5 ) - for sure
    1a5c:	a6 e5       	ldi	r26, 0x56	; 86
    1a5e:	b0 e0       	ldi	r27, 0x00	; 0
    1a60:	e6 e5       	ldi	r30, 0x56	; 86
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	80 81       	ld	r24, Z
    1a66:	8f 7d       	andi	r24, 0xDF	; 223
    1a68:	8c 93       	st	X, r24
    SET_BIT(TWCR_REG,TWCR_TWINT);                                      // Clear flag ( Set TWCR 7 )
    1a6a:	a6 e5       	ldi	r26, 0x56	; 86
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	e6 e5       	ldi	r30, 0x56	; 86
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	80 68       	ori	r24, 0x80	; 128
    1a76:	8c 93       	st	X, r24
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );                    // Wait for flag ( TWCR 7 == 0 )
    1a78:	e6 e5       	ldi	r30, 0x56	; 86
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	80 81       	ld	r24, Z
    1a7e:	88 23       	and	r24, r24
    1a80:	dc f7       	brge	.-10     	; 0x1a78 <I2C_Master_u8SendSLA_Write_NOTACK+0x46>
    if ( (TWSR_REG & STATUS_BIT_MASK) != MASTER_SLA_Write_NOTACK )     // Check status code == SLA + Write + NOTACK == (0x20)
    1a82:	e1 e2       	ldi	r30, 0x21	; 33
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
    1a88:	88 2f       	mov	r24, r24
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	88 7f       	andi	r24, 0xF8	; 248
    1a8e:	90 70       	andi	r25, 0x00	; 0
    1a90:	80 32       	cpi	r24, 0x20	; 32
    1a92:	91 05       	cpc	r25, r1
    1a94:	11 f0       	breq	.+4      	; 0x1a9a <I2C_Master_u8SendSLA_Write_NOTACK+0x68>
    {
        Local_Error = I2C_Error_Master_SendSLA_Write_NOTACK ; 
    1a96:	84 e0       	ldi	r24, 0x04	; 4
    1a98:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_Error ;
    1a9a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	cf 91       	pop	r28
    1aa2:	df 91       	pop	r29
    1aa4:	08 95       	ret

00001aa6 <I2C_Master_u8SendSLA_Read_ACK>:



Error_t I2C_Master_u8SendSLA_Read_ACK (u8 Copy_u8SlaveAddress)
{
    1aa6:	df 93       	push	r29
    1aa8:	cf 93       	push	r28
    1aaa:	00 d0       	rcall	.+0      	; 0x1aac <I2C_Master_u8SendSLA_Read_ACK+0x6>
    1aac:	cd b7       	in	r28, 0x3d	; 61
    1aae:	de b7       	in	r29, 0x3e	; 62
    1ab0:	8a 83       	std	Y+2, r24	; 0x02
    Error_t Local_Error = I2C_NO_Error ;
    1ab2:	19 82       	std	Y+1, r1	; 0x01
    TWDR_REG = (Copy_u8SlaveAddress<<1) ;                              // Write 7 bits slave address ( TWDR == address<<1 )
    1ab4:	e3 e2       	ldi	r30, 0x23	; 35
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aba:	88 0f       	add	r24, r24
    1abc:	80 83       	st	Z, r24
    SET_BIT(TWDR_REG,TWDR_TWD0);                                       // Read condition ( SET TWDR 0 )
    1abe:	a3 e2       	ldi	r26, 0x23	; 35
    1ac0:	b0 e0       	ldi	r27, 0x00	; 0
    1ac2:	e3 e2       	ldi	r30, 0x23	; 35
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
    1ac8:	81 60       	ori	r24, 0x01	; 1
    1aca:	8c 93       	st	X, r24
    CLR_BIT(TWCR_REG,TWCR_TWSTA);                                    // Clear start condition bit ( TWCR 5 ) - for sure
    1acc:	a6 e5       	ldi	r26, 0x56	; 86
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	e6 e5       	ldi	r30, 0x56	; 86
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	8f 7d       	andi	r24, 0xDF	; 223
    1ad8:	8c 93       	st	X, r24
    SET_BIT(TWCR_REG,TWCR_TWINT);                                      // Clear flag ( Set TWCR 7 )
    1ada:	a6 e5       	ldi	r26, 0x56	; 86
    1adc:	b0 e0       	ldi	r27, 0x00	; 0
    1ade:	e6 e5       	ldi	r30, 0x56	; 86
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	80 68       	ori	r24, 0x80	; 128
    1ae6:	8c 93       	st	X, r24
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );                    // Wait for flag ( TWCR 7 == 0 )
    1ae8:	e6 e5       	ldi	r30, 0x56	; 86
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	88 23       	and	r24, r24
    1af0:	dc f7       	brge	.-10     	; 0x1ae8 <I2C_Master_u8SendSLA_Read_ACK+0x42>
    if ( (TWSR_REG & STATUS_BIT_MASK) != MASTER_SLA_Read_ACK )         // Check status code == SLA + Read + ACK == (0x40)
    1af2:	e1 e2       	ldi	r30, 0x21	; 33
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	80 81       	ld	r24, Z
    1af8:	88 2f       	mov	r24, r24
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	88 7f       	andi	r24, 0xF8	; 248
    1afe:	90 70       	andi	r25, 0x00	; 0
    1b00:	80 34       	cpi	r24, 0x40	; 64
    1b02:	91 05       	cpc	r25, r1
    1b04:	11 f0       	breq	.+4      	; 0x1b0a <I2C_Master_u8SendSLA_Read_ACK+0x64>
    {
        Local_Error = I2C_Error_Master_SendSLA_Read_ACK ; 
    1b06:	85 e0       	ldi	r24, 0x05	; 5
    1b08:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_Error ;
    1b0a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b0c:	0f 90       	pop	r0
    1b0e:	0f 90       	pop	r0
    1b10:	cf 91       	pop	r28
    1b12:	df 91       	pop	r29
    1b14:	08 95       	ret

00001b16 <I2C_Master_u8SendSLA_Read_NOTACK>:



Error_t I2C_Master_u8SendSLA_Read_NOTACK (u8 Copy_u8SlaveAddress)
{
    1b16:	df 93       	push	r29
    1b18:	cf 93       	push	r28
    1b1a:	00 d0       	rcall	.+0      	; 0x1b1c <I2C_Master_u8SendSLA_Read_NOTACK+0x6>
    1b1c:	cd b7       	in	r28, 0x3d	; 61
    1b1e:	de b7       	in	r29, 0x3e	; 62
    1b20:	8a 83       	std	Y+2, r24	; 0x02
    Error_t Local_Error = I2C_NO_Error ;
    1b22:	19 82       	std	Y+1, r1	; 0x01
    Disable_ACK ();                                                    // Disable ACK 
    1b24:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <Disable_ACK>
    TWDR_REG = (Copy_u8SlaveAddress<<1) ;                              // Write 7 bits slave address ( TWDR == address<<1 )
    1b28:	e3 e2       	ldi	r30, 0x23	; 35
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2e:	88 0f       	add	r24, r24
    1b30:	80 83       	st	Z, r24
    SET_BIT(TWDR_REG,TWDR_TWD0);                                       // Read condition ( SET TWDR 0 )
    1b32:	a3 e2       	ldi	r26, 0x23	; 35
    1b34:	b0 e0       	ldi	r27, 0x00	; 0
    1b36:	e3 e2       	ldi	r30, 0x23	; 35
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	81 60       	ori	r24, 0x01	; 1
    1b3e:	8c 93       	st	X, r24
    CLR_BIT(TWCR_REG,TWCR_TWSTA);                                    // Clear start condition bit ( TWCR 5 ) - for sure
    1b40:	a6 e5       	ldi	r26, 0x56	; 86
    1b42:	b0 e0       	ldi	r27, 0x00	; 0
    1b44:	e6 e5       	ldi	r30, 0x56	; 86
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	8f 7d       	andi	r24, 0xDF	; 223
    1b4c:	8c 93       	st	X, r24
    SET_BIT(TWCR_REG,TWCR_TWINT);                                      // Clear flag ( Set TWCR 7 )
    1b4e:	a6 e5       	ldi	r26, 0x56	; 86
    1b50:	b0 e0       	ldi	r27, 0x00	; 0
    1b52:	e6 e5       	ldi	r30, 0x56	; 86
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	80 68       	ori	r24, 0x80	; 128
    1b5a:	8c 93       	st	X, r24
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );                    // Wait for flag ( TWCR 7 == 0 )
    1b5c:	e6 e5       	ldi	r30, 0x56	; 86
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	80 81       	ld	r24, Z
    1b62:	88 23       	and	r24, r24
    1b64:	dc f7       	brge	.-10     	; 0x1b5c <I2C_Master_u8SendSLA_Read_NOTACK+0x46>
    if ( (TWSR_REG & STATUS_BIT_MASK) != MASTER_SLA_Read_NOTACK )      // Check status code == SLA + Read + NOTACK == (0x48)
    1b66:	e1 e2       	ldi	r30, 0x21	; 33
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	88 2f       	mov	r24, r24
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	88 7f       	andi	r24, 0xF8	; 248
    1b72:	90 70       	andi	r25, 0x00	; 0
    1b74:	88 34       	cpi	r24, 0x48	; 72
    1b76:	91 05       	cpc	r25, r1
    1b78:	11 f0       	breq	.+4      	; 0x1b7e <I2C_Master_u8SendSLA_Read_NOTACK+0x68>
    {
        Local_Error = I2C_Error_Master_SendSLA_Read_NOTACK ; 
    1b7a:	86 e0       	ldi	r24, 0x06	; 6
    1b7c:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_Error ;
    1b7e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b80:	0f 90       	pop	r0
    1b82:	0f 90       	pop	r0
    1b84:	cf 91       	pop	r28
    1b86:	df 91       	pop	r29
    1b88:	08 95       	ret

00001b8a <I2C_Master_u8WriteDataByte_ACK>:



Error_t I2C_Master_u8WriteDataByte_ACK (u8 Copy_u8WriteData)
{
    1b8a:	df 93       	push	r29
    1b8c:	cf 93       	push	r28
    1b8e:	00 d0       	rcall	.+0      	; 0x1b90 <I2C_Master_u8WriteDataByte_ACK+0x6>
    1b90:	cd b7       	in	r28, 0x3d	; 61
    1b92:	de b7       	in	r29, 0x3e	; 62
    1b94:	8a 83       	std	Y+2, r24	; 0x02
    Error_t Local_Error = I2C_NO_Error ;
    1b96:	19 82       	std	Y+1, r1	; 0x01
    TWDR_REG = Copy_u8WriteData ;                                      // Write data in TWDR
    1b98:	e3 e2       	ldi	r30, 0x23	; 35
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9e:	80 83       	st	Z, r24
    SET_BIT(TWCR_REG,TWCR_TWINT);                                      // Clear flag ( Set TWCR 7 )
    1ba0:	a6 e5       	ldi	r26, 0x56	; 86
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	e6 e5       	ldi	r30, 0x56	; 86
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	80 81       	ld	r24, Z
    1baa:	80 68       	ori	r24, 0x80	; 128
    1bac:	8c 93       	st	X, r24
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );                    // Wait for flag ( TWCR 7 == 0 )
    1bae:	e6 e5       	ldi	r30, 0x56	; 86
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	80 81       	ld	r24, Z
    1bb4:	88 23       	and	r24, r24
    1bb6:	dc f7       	brge	.-10     	; 0x1bae <I2C_Master_u8WriteDataByte_ACK+0x24>
    if ( (TWSR_REG & STATUS_BIT_MASK) != MASTER_WR_DataByte_ACK )      // Check status code == Master Send Data + ACK == (0x28)
    1bb8:	e1 e2       	ldi	r30, 0x21	; 33
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	88 2f       	mov	r24, r24
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	88 7f       	andi	r24, 0xF8	; 248
    1bc4:	90 70       	andi	r25, 0x00	; 0
    1bc6:	88 32       	cpi	r24, 0x28	; 40
    1bc8:	91 05       	cpc	r25, r1
    1bca:	11 f0       	breq	.+4      	; 0x1bd0 <I2C_Master_u8WriteDataByte_ACK+0x46>
    {
        Local_Error = I2C_Error_Master_WriteDataByte_ACK ; 
    1bcc:	87 e0       	ldi	r24, 0x07	; 7
    1bce:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_Error ;
    1bd0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bd2:	0f 90       	pop	r0
    1bd4:	0f 90       	pop	r0
    1bd6:	cf 91       	pop	r28
    1bd8:	df 91       	pop	r29
    1bda:	08 95       	ret

00001bdc <I2C_Master_u8WriteDataByte_NOTACK>:



Error_t I2C_Master_u8WriteDataByte_NOTACK (u8 Copy_u8WriteData)
{
    1bdc:	df 93       	push	r29
    1bde:	cf 93       	push	r28
    1be0:	00 d0       	rcall	.+0      	; 0x1be2 <I2C_Master_u8WriteDataByte_NOTACK+0x6>
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
    1be6:	8a 83       	std	Y+2, r24	; 0x02
    Error_t Local_Error = I2C_NO_Error ;
    1be8:	19 82       	std	Y+1, r1	; 0x01
    Disable_ACK ();                                                    // Disable ACK 
    1bea:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <Disable_ACK>
    TWDR_REG = Copy_u8WriteData ;                                      // Write data in TWDR
    1bee:	e3 e2       	ldi	r30, 0x23	; 35
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf4:	80 83       	st	Z, r24
    SET_BIT(TWCR_REG,TWCR_TWINT);                                      // Clear flag ( Set TWCR 7 )
    1bf6:	a6 e5       	ldi	r26, 0x56	; 86
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	e6 e5       	ldi	r30, 0x56	; 86
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
    1c00:	80 68       	ori	r24, 0x80	; 128
    1c02:	8c 93       	st	X, r24
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );                    // Wait for flag ( TWCR 7 == 0 )
    1c04:	e6 e5       	ldi	r30, 0x56	; 86
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	80 81       	ld	r24, Z
    1c0a:	88 23       	and	r24, r24
    1c0c:	dc f7       	brge	.-10     	; 0x1c04 <I2C_Master_u8WriteDataByte_NOTACK+0x28>
    if ( (TWSR_REG & STATUS_BIT_MASK) != MASTER_WR_DataByte_NOTACK )   // Check status code == Master Send Data + NOTACK == (0x30)
    1c0e:	e1 e2       	ldi	r30, 0x21	; 33
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	88 2f       	mov	r24, r24
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	88 7f       	andi	r24, 0xF8	; 248
    1c1a:	90 70       	andi	r25, 0x00	; 0
    1c1c:	80 33       	cpi	r24, 0x30	; 48
    1c1e:	91 05       	cpc	r25, r1
    1c20:	11 f0       	breq	.+4      	; 0x1c26 <I2C_Master_u8WriteDataByte_NOTACK+0x4a>
    {
        Local_Error = I2C_Error_Master_WriteDataByte_NOTACK ; 
    1c22:	88 e0       	ldi	r24, 0x08	; 8
    1c24:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_Error ;
    1c26:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c28:	0f 90       	pop	r0
    1c2a:	0f 90       	pop	r0
    1c2c:	cf 91       	pop	r28
    1c2e:	df 91       	pop	r29
    1c30:	08 95       	ret

00001c32 <I2C_Master_u8ReadDataByte_ACK>:



Error_t I2C_Master_u8ReadDataByte_ACK (u8 *Copy_Pu8ReadData)
{
    1c32:	df 93       	push	r29
    1c34:	cf 93       	push	r28
    1c36:	00 d0       	rcall	.+0      	; 0x1c38 <I2C_Master_u8ReadDataByte_ACK+0x6>
    1c38:	0f 92       	push	r0
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62
    1c3e:	9b 83       	std	Y+3, r25	; 0x03
    1c40:	8a 83       	std	Y+2, r24	; 0x02
    Error_t Local_Error = I2C_NO_Error ;
    1c42:	19 82       	std	Y+1, r1	; 0x01
    SET_BIT(TWCR_REG,TWCR_TWINT);                                      // Clear flag ( Set TWCR 7 )
    1c44:	a6 e5       	ldi	r26, 0x56	; 86
    1c46:	b0 e0       	ldi	r27, 0x00	; 0
    1c48:	e6 e5       	ldi	r30, 0x56	; 86
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	80 68       	ori	r24, 0x80	; 128
    1c50:	8c 93       	st	X, r24
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );                    // Wait for flag ( TWCR 7 == 0 )
    1c52:	e6 e5       	ldi	r30, 0x56	; 86
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	80 81       	ld	r24, Z
    1c58:	88 23       	and	r24, r24
    1c5a:	dc f7       	brge	.-10     	; 0x1c52 <I2C_Master_u8ReadDataByte_ACK+0x20>
    if ( (TWSR_REG & STATUS_BIT_MASK) != MASTER_RD_DataByte_ACK )      // Check status code == Master Read Data + ACK == (0x50)
    1c5c:	e1 e2       	ldi	r30, 0x21	; 33
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	88 2f       	mov	r24, r24
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	88 7f       	andi	r24, 0xF8	; 248
    1c68:	90 70       	andi	r25, 0x00	; 0
    1c6a:	80 35       	cpi	r24, 0x50	; 80
    1c6c:	91 05       	cpc	r25, r1
    1c6e:	11 f0       	breq	.+4      	; 0x1c74 <I2C_Master_u8ReadDataByte_ACK+0x42>
    {
        Local_Error = I2C_Error_Master_ReadDataByte_ACK ; 
    1c70:	89 e0       	ldi	r24, 0x09	; 9
    1c72:	89 83       	std	Y+1, r24	; 0x01
    }
    *Copy_Pu8ReadData = TWDR_REG ;                                     // Read Data From Reg TWDR
    1c74:	e3 e2       	ldi	r30, 0x23	; 35
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	ea 81       	ldd	r30, Y+2	; 0x02
    1c7c:	fb 81       	ldd	r31, Y+3	; 0x03
    1c7e:	80 83       	st	Z, r24
    return Local_Error ;
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c82:	0f 90       	pop	r0
    1c84:	0f 90       	pop	r0
    1c86:	0f 90       	pop	r0
    1c88:	cf 91       	pop	r28
    1c8a:	df 91       	pop	r29
    1c8c:	08 95       	ret

00001c8e <I2C_Master_u8ReadDataByte_NOTACK>:


Error_t I2C_Master_u8ReadDataByte_NOTACK (u8 *Copy_Pu8ReadData)
{
    1c8e:	df 93       	push	r29
    1c90:	cf 93       	push	r28
    1c92:	00 d0       	rcall	.+0      	; 0x1c94 <I2C_Master_u8ReadDataByte_NOTACK+0x6>
    1c94:	0f 92       	push	r0
    1c96:	cd b7       	in	r28, 0x3d	; 61
    1c98:	de b7       	in	r29, 0x3e	; 62
    1c9a:	9b 83       	std	Y+3, r25	; 0x03
    1c9c:	8a 83       	std	Y+2, r24	; 0x02
    Error_t Local_Error = I2C_NO_Error ;
    1c9e:	19 82       	std	Y+1, r1	; 0x01
    Disable_ACK ();                                                    // Disable ACK 
    1ca0:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <Disable_ACK>
    SET_BIT(TWCR_REG,TWCR_TWINT);                                      // Clear flag ( Set TWCR 7 )
    1ca4:	a6 e5       	ldi	r26, 0x56	; 86
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	e6 e5       	ldi	r30, 0x56	; 86
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	80 81       	ld	r24, Z
    1cae:	80 68       	ori	r24, 0x80	; 128
    1cb0:	8c 93       	st	X, r24
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );                    // Wait for flag ( TWCR 7 == 0 )
    1cb2:	e6 e5       	ldi	r30, 0x56	; 86
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	80 81       	ld	r24, Z
    1cb8:	88 23       	and	r24, r24
    1cba:	dc f7       	brge	.-10     	; 0x1cb2 <I2C_Master_u8ReadDataByte_NOTACK+0x24>
    if ( (TWSR_REG & STATUS_BIT_MASK) != MASTER_RD_DataByte_NOTACK )   // Check status code == Master Read Data + NOTACK == (0x58)
    1cbc:	e1 e2       	ldi	r30, 0x21	; 33
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	80 81       	ld	r24, Z
    1cc2:	88 2f       	mov	r24, r24
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	88 7f       	andi	r24, 0xF8	; 248
    1cc8:	90 70       	andi	r25, 0x00	; 0
    1cca:	88 35       	cpi	r24, 0x58	; 88
    1ccc:	91 05       	cpc	r25, r1
    1cce:	11 f0       	breq	.+4      	; 0x1cd4 <I2C_Master_u8ReadDataByte_NOTACK+0x46>
    {
        Local_Error = I2C_Error_Master_ReadDataByte_NOTACK ; 
    1cd0:	8a e0       	ldi	r24, 0x0A	; 10
    1cd2:	89 83       	std	Y+1, r24	; 0x01
    }
    *Copy_Pu8ReadData = TWDR_REG ;                                     // Read Data From Reg TWDR
    1cd4:	e3 e2       	ldi	r30, 0x23	; 35
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	ea 81       	ldd	r30, Y+2	; 0x02
    1cdc:	fb 81       	ldd	r31, Y+3	; 0x03
    1cde:	80 83       	st	Z, r24
    return Local_Error ;
    1ce0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ce2:	0f 90       	pop	r0
    1ce4:	0f 90       	pop	r0
    1ce6:	0f 90       	pop	r0
    1ce8:	cf 91       	pop	r28
    1cea:	df 91       	pop	r29
    1cec:	08 95       	ret

00001cee <I2C_Master_voidStopCondition>:


void I2C_Master_voidStopCondition (void)
{
    1cee:	df 93       	push	r29
    1cf0:	cf 93       	push	r28
    1cf2:	cd b7       	in	r28, 0x3d	; 61
    1cf4:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TWCR_REG,TWCR_TWSTO);               // Stop condition ( Set TWCR 4 )
    1cf6:	a6 e5       	ldi	r26, 0x56	; 86
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	e6 e5       	ldi	r30, 0x56	; 86
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
    1d00:	80 61       	ori	r24, 0x10	; 16
    1d02:	8c 93       	st	X, r24
    SET_BIT(TWCR_REG,TWCR_TWINT);               // Clear flag ( Set TWCR 7 )  
    1d04:	a6 e5       	ldi	r26, 0x56	; 86
    1d06:	b0 e0       	ldi	r27, 0x00	; 0
    1d08:	e6 e5       	ldi	r30, 0x56	; 86
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	80 81       	ld	r24, Z
    1d0e:	80 68       	ori	r24, 0x80	; 128
    1d10:	8c 93       	st	X, r24
}
    1d12:	cf 91       	pop	r28
    1d14:	df 91       	pop	r29
    1d16:	08 95       	ret

00001d18 <I2C_voidSlaveInit>:


void I2C_voidSlaveInit (u8 Copy_u8SlaveAddress)
{
    1d18:	df 93       	push	r29
    1d1a:	cf 93       	push	r28
    1d1c:	0f 92       	push	r0
    1d1e:	cd b7       	in	r28, 0x3d	; 61
    1d20:	de b7       	in	r29, 0x3e	; 62
    1d22:	89 83       	std	Y+1, r24	; 0x01
    TWAR_REG = Copy_u8SlaveAddress << 1 ;       // Set slave address in ( TWAR = address<<1 )
    1d24:	e2 e2       	ldi	r30, 0x22	; 34
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	89 81       	ldd	r24, Y+1	; 0x01
    1d2a:	88 0f       	add	r24, r24
    1d2c:	80 83       	st	Z, r24
    Enable_ACK();                               // Enable ACK  ( set TWCR 6 )
    1d2e:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <Enable_ACK>
    SET_BIT(TWCR_REG,TWCR_TWEN);                // Enable I2C  ( set TWCR 2 )
    1d32:	a6 e5       	ldi	r26, 0x56	; 86
    1d34:	b0 e0       	ldi	r27, 0x00	; 0
    1d36:	e6 e5       	ldi	r30, 0x56	; 86
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	80 81       	ld	r24, Z
    1d3c:	84 60       	ori	r24, 0x04	; 4
    1d3e:	8c 93       	st	X, r24
}
    1d40:	0f 90       	pop	r0
    1d42:	cf 91       	pop	r28
    1d44:	df 91       	pop	r29
    1d46:	08 95       	ret

00001d48 <I2C_SLAVE_u8OwnSLA_Write_Recieved_ACK>:


Error_t I2C_SLAVE_u8OwnSLA_Write_Recieved_ACK (void)
{
    1d48:	df 93       	push	r29
    1d4a:	cf 93       	push	r28
    1d4c:	0f 92       	push	r0
    1d4e:	cd b7       	in	r28, 0x3d	; 61
    1d50:	de b7       	in	r29, 0x3e	; 62
    Error_t Local_Error = I2C_NO_Error ;
    1d52:	19 82       	std	Y+1, r1	; 0x01
    SET_BIT(TWCR_REG,TWCR_TWINT);                                            // Clear flag ( Set TWCR 7 )
    1d54:	a6 e5       	ldi	r26, 0x56	; 86
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	e6 e5       	ldi	r30, 0x56	; 86
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	80 68       	ori	r24, 0x80	; 128
    1d60:	8c 93       	st	X, r24
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );                          // Wait for flag ( TWCR 7 == 0 )
    1d62:	e6 e5       	ldi	r30, 0x56	; 86
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	80 81       	ld	r24, Z
    1d68:	88 23       	and	r24, r24
    1d6a:	dc f7       	brge	.-10     	; 0x1d62 <I2C_SLAVE_u8OwnSLA_Write_Recieved_ACK+0x1a>
    if ( (TWSR_REG & STATUS_BIT_MASK) != SLAVE_OwnSLA_Write_Recieved_ACK )   // Check status code == Own Slave Address + Write + ACK == (0x60)
    1d6c:	e1 e2       	ldi	r30, 0x21	; 33
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	80 81       	ld	r24, Z
    1d72:	88 2f       	mov	r24, r24
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	88 7f       	andi	r24, 0xF8	; 248
    1d78:	90 70       	andi	r25, 0x00	; 0
    1d7a:	80 36       	cpi	r24, 0x60	; 96
    1d7c:	91 05       	cpc	r25, r1
    1d7e:	11 f0       	breq	.+4      	; 0x1d84 <I2C_SLAVE_u8OwnSLA_Write_Recieved_ACK+0x3c>
    {
        Local_Error = I2C_Error_Slave_OwnSLA_Write_ACK ; 
    1d80:	8b e0       	ldi	r24, 0x0B	; 11
    1d82:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_Error ;
    1d84:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d86:	0f 90       	pop	r0
    1d88:	cf 91       	pop	r28
    1d8a:	df 91       	pop	r29
    1d8c:	08 95       	ret

00001d8e <I2C_SLAVE_u8OwnSLA_Read_Recieved_ACK>:


Error_t I2C_SLAVE_u8OwnSLA_Read_Recieved_ACK (void)
{
    1d8e:	df 93       	push	r29
    1d90:	cf 93       	push	r28
    1d92:	0f 92       	push	r0
    1d94:	cd b7       	in	r28, 0x3d	; 61
    1d96:	de b7       	in	r29, 0x3e	; 62
    Error_t Local_Error = I2C_NO_Error ;
    1d98:	19 82       	std	Y+1, r1	; 0x01
    SET_BIT(TWCR_REG,TWCR_TWINT);                                            // Clear flag ( Set TWCR 7 )
    1d9a:	a6 e5       	ldi	r26, 0x56	; 86
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	e6 e5       	ldi	r30, 0x56	; 86
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	80 68       	ori	r24, 0x80	; 128
    1da6:	8c 93       	st	X, r24
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );                          // Wait for flag ( TWCR 7 == 0 )
    1da8:	e6 e5       	ldi	r30, 0x56	; 86
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	88 23       	and	r24, r24
    1db0:	dc f7       	brge	.-10     	; 0x1da8 <I2C_SLAVE_u8OwnSLA_Read_Recieved_ACK+0x1a>
    if ( (TWSR_REG & STATUS_BIT_MASK) != SLAVE_OwnSLA_Read_Recieved_ACK )    // Check status code == Own Slave Address + Read + ACK == (0xA8)
    1db2:	e1 e2       	ldi	r30, 0x21	; 33
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	80 81       	ld	r24, Z
    1db8:	88 2f       	mov	r24, r24
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	88 7f       	andi	r24, 0xF8	; 248
    1dbe:	90 70       	andi	r25, 0x00	; 0
    1dc0:	88 3a       	cpi	r24, 0xA8	; 168
    1dc2:	91 05       	cpc	r25, r1
    1dc4:	11 f0       	breq	.+4      	; 0x1dca <I2C_SLAVE_u8OwnSLA_Read_Recieved_ACK+0x3c>
    {
        Local_Error = I2C_Error_Slave_OwnSLA_Read_ACK ; 
    1dc6:	8c e0       	ldi	r24, 0x0C	; 12
    1dc8:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_Error ;
    1dca:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dcc:	0f 90       	pop	r0
    1dce:	cf 91       	pop	r28
    1dd0:	df 91       	pop	r29
    1dd2:	08 95       	ret

00001dd4 <I2C_SLAVE_u8DataByteRecieved_ACK>:


Error_t I2C_SLAVE_u8DataByteRecieved_ACK (u8 *Copy_Pu8RecievedData)
{
    1dd4:	df 93       	push	r29
    1dd6:	cf 93       	push	r28
    1dd8:	00 d0       	rcall	.+0      	; 0x1dda <I2C_SLAVE_u8DataByteRecieved_ACK+0x6>
    1dda:	0f 92       	push	r0
    1ddc:	cd b7       	in	r28, 0x3d	; 61
    1dde:	de b7       	in	r29, 0x3e	; 62
    1de0:	9b 83       	std	Y+3, r25	; 0x03
    1de2:	8a 83       	std	Y+2, r24	; 0x02
    Error_t Local_Error = I2C_NO_Error ;
    1de4:	19 82       	std	Y+1, r1	; 0x01
    SET_BIT(TWCR_REG,TWCR_TWINT);                                            // Clear flag ( Set TWCR 7 )
    1de6:	a6 e5       	ldi	r26, 0x56	; 86
    1de8:	b0 e0       	ldi	r27, 0x00	; 0
    1dea:	e6 e5       	ldi	r30, 0x56	; 86
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	80 81       	ld	r24, Z
    1df0:	80 68       	ori	r24, 0x80	; 128
    1df2:	8c 93       	st	X, r24
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );                          // Wait for flag ( TWCR 7 == 0 )
    1df4:	e6 e5       	ldi	r30, 0x56	; 86
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 81       	ld	r24, Z
    1dfa:	88 23       	and	r24, r24
    1dfc:	dc f7       	brge	.-10     	; 0x1df4 <I2C_SLAVE_u8DataByteRecieved_ACK+0x20>
    if ( (TWSR_REG & STATUS_BIT_MASK) != SLAVE_DataByte_Recieved_ACK )       // Check status code == Data Byte Recived + ACK  == (0x80)
    1dfe:	e1 e2       	ldi	r30, 0x21	; 33
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	80 81       	ld	r24, Z
    1e04:	88 2f       	mov	r24, r24
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	88 7f       	andi	r24, 0xF8	; 248
    1e0a:	90 70       	andi	r25, 0x00	; 0
    1e0c:	80 38       	cpi	r24, 0x80	; 128
    1e0e:	91 05       	cpc	r25, r1
    1e10:	11 f0       	breq	.+4      	; 0x1e16 <I2C_SLAVE_u8DataByteRecieved_ACK+0x42>
    {
        Local_Error = I2C_Error_Slave_DataByteRecieved_ACK ; 
    1e12:	8d e0       	ldi	r24, 0x0D	; 13
    1e14:	89 83       	std	Y+1, r24	; 0x01
    }
    *Copy_Pu8RecievedData = TWDR_REG ;                                       // Read Data From Reg TWDR 
    1e16:	e3 e2       	ldi	r30, 0x23	; 35
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	80 81       	ld	r24, Z
    1e1c:	ea 81       	ldd	r30, Y+2	; 0x02
    1e1e:	fb 81       	ldd	r31, Y+3	; 0x03
    1e20:	80 83       	st	Z, r24
    return Local_Error ;
    1e22:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e24:	0f 90       	pop	r0
    1e26:	0f 90       	pop	r0
    1e28:	0f 90       	pop	r0
    1e2a:	cf 91       	pop	r28
    1e2c:	df 91       	pop	r29
    1e2e:	08 95       	ret

00001e30 <I2C_SLAVE_u8DataByteRecieved_NOTACK>:


Error_t I2C_SLAVE_u8DataByteRecieved_NOTACK (u8 *Copy_Pu8RecievedData)
{
    1e30:	df 93       	push	r29
    1e32:	cf 93       	push	r28
    1e34:	00 d0       	rcall	.+0      	; 0x1e36 <I2C_SLAVE_u8DataByteRecieved_NOTACK+0x6>
    1e36:	0f 92       	push	r0
    1e38:	cd b7       	in	r28, 0x3d	; 61
    1e3a:	de b7       	in	r29, 0x3e	; 62
    1e3c:	9b 83       	std	Y+3, r25	; 0x03
    1e3e:	8a 83       	std	Y+2, r24	; 0x02
    Error_t Local_Error = I2C_NO_Error ;    
    1e40:	19 82       	std	Y+1, r1	; 0x01
    Disable_ACK ();                                                             // Disable ACK 
    1e42:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <Disable_ACK>
    SET_BIT(TWCR_REG,TWCR_TWINT);                                               // Clear flag ( Set TWCR 7 )
    1e46:	a6 e5       	ldi	r26, 0x56	; 86
    1e48:	b0 e0       	ldi	r27, 0x00	; 0
    1e4a:	e6 e5       	ldi	r30, 0x56	; 86
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	80 68       	ori	r24, 0x80	; 128
    1e52:	8c 93       	st	X, r24
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );                             // Wait for flag ( TWCR 7 == 0 )
    1e54:	e6 e5       	ldi	r30, 0x56	; 86
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	80 81       	ld	r24, Z
    1e5a:	88 23       	and	r24, r24
    1e5c:	dc f7       	brge	.-10     	; 0x1e54 <I2C_SLAVE_u8DataByteRecieved_NOTACK+0x24>
    if ( (TWSR_REG & STATUS_BIT_MASK) != SLAVE_DataByte_Recieved_NOTACK )       // Check status code == Data Byte Recived + NOTACK  == (0x88)
    1e5e:	e1 e2       	ldi	r30, 0x21	; 33
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	88 2f       	mov	r24, r24
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	88 7f       	andi	r24, 0xF8	; 248
    1e6a:	90 70       	andi	r25, 0x00	; 0
    1e6c:	88 38       	cpi	r24, 0x88	; 136
    1e6e:	91 05       	cpc	r25, r1
    1e70:	11 f0       	breq	.+4      	; 0x1e76 <I2C_SLAVE_u8DataByteRecieved_NOTACK+0x46>
    {
        Local_Error = I2C_Error_Slave_DataByteRecieved_NOTACK ; 
    1e72:	8e e0       	ldi	r24, 0x0E	; 14
    1e74:	89 83       	std	Y+1, r24	; 0x01
    }
    *Copy_Pu8RecievedData = TWDR_REG ;                                          // Read Data From Reg TWDR
    1e76:	e3 e2       	ldi	r30, 0x23	; 35
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	80 81       	ld	r24, Z
    1e7c:	ea 81       	ldd	r30, Y+2	; 0x02
    1e7e:	fb 81       	ldd	r31, Y+3	; 0x03
    1e80:	80 83       	st	Z, r24
    return Local_Error ;
    1e82:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e84:	0f 90       	pop	r0
    1e86:	0f 90       	pop	r0
    1e88:	0f 90       	pop	r0
    1e8a:	cf 91       	pop	r28
    1e8c:	df 91       	pop	r29
    1e8e:	08 95       	ret

00001e90 <I2C_SLAVE_u8DataByteTransmit_ACK>:


Error_t I2C_SLAVE_u8DataByteTransmit_ACK (u8 Copy_Pu8TransmitData)
{
    1e90:	df 93       	push	r29
    1e92:	cf 93       	push	r28
    1e94:	00 d0       	rcall	.+0      	; 0x1e96 <I2C_SLAVE_u8DataByteTransmit_ACK+0x6>
    1e96:	cd b7       	in	r28, 0x3d	; 61
    1e98:	de b7       	in	r29, 0x3e	; 62
    1e9a:	8a 83       	std	Y+2, r24	; 0x02
    Error_t Local_Error = I2C_NO_Error ;
    1e9c:	19 82       	std	Y+1, r1	; 0x01
    TWDR_REG =  Copy_Pu8TransmitData ;                                       // Write Data in Reg TWDR 
    1e9e:	e3 e2       	ldi	r30, 0x23	; 35
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea4:	80 83       	st	Z, r24
    SET_BIT(TWCR_REG,TWCR_TWINT);                                            // Clear flag ( Set TWCR 7 )
    1ea6:	a6 e5       	ldi	r26, 0x56	; 86
    1ea8:	b0 e0       	ldi	r27, 0x00	; 0
    1eaa:	e6 e5       	ldi	r30, 0x56	; 86
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	80 81       	ld	r24, Z
    1eb0:	80 68       	ori	r24, 0x80	; 128
    1eb2:	8c 93       	st	X, r24
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );                          // Wait for flag ( TWCR 7 == 0 )
    1eb4:	e6 e5       	ldi	r30, 0x56	; 86
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	80 81       	ld	r24, Z
    1eba:	88 23       	and	r24, r24
    1ebc:	dc f7       	brge	.-10     	; 0x1eb4 <I2C_SLAVE_u8DataByteTransmit_ACK+0x24>
    if ( (TWSR_REG & STATUS_BIT_MASK) != SLAVE_DataByte_Transmitted_ACK )    // Check status code == Data Byte Transmit + ACK  == (0xB8)
    1ebe:	e1 e2       	ldi	r30, 0x21	; 33
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	80 81       	ld	r24, Z
    1ec4:	88 2f       	mov	r24, r24
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	88 7f       	andi	r24, 0xF8	; 248
    1eca:	90 70       	andi	r25, 0x00	; 0
    1ecc:	88 3b       	cpi	r24, 0xB8	; 184
    1ece:	91 05       	cpc	r25, r1
    1ed0:	11 f0       	breq	.+4      	; 0x1ed6 <I2C_SLAVE_u8DataByteTransmit_ACK+0x46>
    {
        Local_Error = I2C_Error_Slave_DataByteTransmit_ACK ; 
    1ed2:	8f e0       	ldi	r24, 0x0F	; 15
    1ed4:	89 83       	std	Y+1, r24	; 0x01
    } 
    return Local_Error ;
    1ed6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ed8:	0f 90       	pop	r0
    1eda:	0f 90       	pop	r0
    1edc:	cf 91       	pop	r28
    1ede:	df 91       	pop	r29
    1ee0:	08 95       	ret

00001ee2 <I2C_SLAVE_u8DataByteTransmit_NOTACK>:


Error_t I2C_SLAVE_u8DataByteTransmit_NOTACK (u8 Copy_Pu8TransmitData)
{
    1ee2:	df 93       	push	r29
    1ee4:	cf 93       	push	r28
    1ee6:	00 d0       	rcall	.+0      	; 0x1ee8 <I2C_SLAVE_u8DataByteTransmit_NOTACK+0x6>
    1ee8:	cd b7       	in	r28, 0x3d	; 61
    1eea:	de b7       	in	r29, 0x3e	; 62
    1eec:	8a 83       	std	Y+2, r24	; 0x02
    Error_t Local_Error = I2C_NO_Error ;
    1eee:	19 82       	std	Y+1, r1	; 0x01
    Disable_ACK ();                                                             // Disable ACK 
    1ef0:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <Disable_ACK>
    TWDR_REG =  Copy_Pu8TransmitData ;                                          // Write Data in Reg TWDR 
    1ef4:	e3 e2       	ldi	r30, 0x23	; 35
    1ef6:	f0 e0       	ldi	r31, 0x00	; 0
    1ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    1efa:	80 83       	st	Z, r24
    SET_BIT(TWCR_REG,TWCR_TWINT);                                               // Clear flag ( Set TWCR 7 )
    1efc:	a6 e5       	ldi	r26, 0x56	; 86
    1efe:	b0 e0       	ldi	r27, 0x00	; 0
    1f00:	e6 e5       	ldi	r30, 0x56	; 86
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	80 81       	ld	r24, Z
    1f06:	80 68       	ori	r24, 0x80	; 128
    1f08:	8c 93       	st	X, r24
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );                             // Wait for flag ( TWCR 7 == 0 )
    1f0a:	e6 e5       	ldi	r30, 0x56	; 86
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	80 81       	ld	r24, Z
    1f10:	88 23       	and	r24, r24
    1f12:	dc f7       	brge	.-10     	; 0x1f0a <I2C_SLAVE_u8DataByteTransmit_NOTACK+0x28>
    if ( (TWSR_REG & STATUS_BIT_MASK) != SLAVE_DataByte_Transmitted_NOTACK )    // Check status code == Data Byte Transmit + NOTACK  == (0xC0)
    1f14:	e1 e2       	ldi	r30, 0x21	; 33
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	80 81       	ld	r24, Z
    1f1a:	88 2f       	mov	r24, r24
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	88 7f       	andi	r24, 0xF8	; 248
    1f20:	90 70       	andi	r25, 0x00	; 0
    1f22:	80 3c       	cpi	r24, 0xC0	; 192
    1f24:	91 05       	cpc	r25, r1
    1f26:	11 f0       	breq	.+4      	; 0x1f2c <I2C_SLAVE_u8DataByteTransmit_NOTACK+0x4a>
    {
        Local_Error = I2C_Error_Slave_DataByteTransmit_NOTACK ; 
    1f28:	80 e1       	ldi	r24, 0x10	; 16
    1f2a:	89 83       	std	Y+1, r24	; 0x01
    } 
    return Local_Error ;
    1f2c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f2e:	0f 90       	pop	r0
    1f30:	0f 90       	pop	r0
    1f32:	cf 91       	pop	r28
    1f34:	df 91       	pop	r29
    1f36:	08 95       	ret

00001f38 <Enable_ACK>:


void Enable_ACK (void)
{
    1f38:	df 93       	push	r29
    1f3a:	cf 93       	push	r28
    1f3c:	cd b7       	in	r28, 0x3d	; 61
    1f3e:	de b7       	in	r29, 0x3e	; 62
    // Enable ACK  ( Set TWCR 6 )
    SET_BIT(TWCR_REG,TWCR_TWEA);
    1f40:	a6 e5       	ldi	r26, 0x56	; 86
    1f42:	b0 e0       	ldi	r27, 0x00	; 0
    1f44:	e6 e5       	ldi	r30, 0x56	; 86
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	80 81       	ld	r24, Z
    1f4a:	80 64       	ori	r24, 0x40	; 64
    1f4c:	8c 93       	st	X, r24
}
    1f4e:	cf 91       	pop	r28
    1f50:	df 91       	pop	r29
    1f52:	08 95       	ret

00001f54 <Disable_ACK>:


void Disable_ACK (void)
{
    1f54:	df 93       	push	r29
    1f56:	cf 93       	push	r28
    1f58:	cd b7       	in	r28, 0x3d	; 61
    1f5a:	de b7       	in	r29, 0x3e	; 62
    // Disable ACK  ( Clear TWCR 6 )
    CLR_BIT(TWCR_REG,TWCR_TWEA);
    1f5c:	a6 e5       	ldi	r26, 0x56	; 86
    1f5e:	b0 e0       	ldi	r27, 0x00	; 0
    1f60:	e6 e5       	ldi	r30, 0x56	; 86
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	80 81       	ld	r24, Z
    1f66:	8f 7b       	andi	r24, 0xBF	; 191
    1f68:	8c 93       	st	X, r24
}
    1f6a:	cf 91       	pop	r28
    1f6c:	df 91       	pop	r29
    1f6e:	08 95       	ret

00001f70 <GIE_void_Enable>:
#include "GIE_Private.h"
#include "GIE_Config.h"


void GIE_void_Enable ( void)
{
    1f70:	df 93       	push	r29
    1f72:	cf 93       	push	r28
    1f74:	cd b7       	in	r28, 0x3d	; 61
    1f76:	de b7       	in	r29, 0x3e	; 62
         SET_BIT(SREG_REG,SREG_I);
    1f78:	af e5       	ldi	r26, 0x5F	; 95
    1f7a:	b0 e0       	ldi	r27, 0x00	; 0
    1f7c:	ef e5       	ldi	r30, 0x5F	; 95
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	80 81       	ld	r24, Z
    1f82:	80 68       	ori	r24, 0x80	; 128
    1f84:	8c 93       	st	X, r24
}
    1f86:	cf 91       	pop	r28
    1f88:	df 91       	pop	r29
    1f8a:	08 95       	ret

00001f8c <GIE_void_Disable>:
void GIE_void_Disable ( void)
{
    1f8c:	df 93       	push	r29
    1f8e:	cf 93       	push	r28
    1f90:	cd b7       	in	r28, 0x3d	; 61
    1f92:	de b7       	in	r29, 0x3e	; 62
         CLR_BIT(SREG_REG,SREG_I);
    1f94:	af e5       	ldi	r26, 0x5F	; 95
    1f96:	b0 e0       	ldi	r27, 0x00	; 0
    1f98:	ef e5       	ldi	r30, 0x5F	; 95
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	80 81       	ld	r24, Z
    1f9e:	8f 77       	andi	r24, 0x7F	; 127
    1fa0:	8c 93       	st	X, r24
}
    1fa2:	cf 91       	pop	r28
    1fa4:	df 91       	pop	r29
    1fa6:	08 95       	ret

00001fa8 <EXTI_voidEnable>:
void (*Global_PF_Vector_3)(void) = NULL ;



void EXTI_voidEnable ( u8 Copy_u8EXTI_INTnumber , u8 Copy_u8SenseControl )
{
    1fa8:	df 93       	push	r29
    1faa:	cf 93       	push	r28
    1fac:	cd b7       	in	r28, 0x3d	; 61
    1fae:	de b7       	in	r29, 0x3e	; 62
    1fb0:	2a 97       	sbiw	r28, 0x0a	; 10
    1fb2:	0f b6       	in	r0, 0x3f	; 63
    1fb4:	f8 94       	cli
    1fb6:	de bf       	out	0x3e, r29	; 62
    1fb8:	0f be       	out	0x3f, r0	; 63
    1fba:	cd bf       	out	0x3d, r28	; 61
    1fbc:	89 83       	std	Y+1, r24	; 0x01
    1fbe:	6a 83       	std	Y+2, r22	; 0x02
    switch ( Copy_u8EXTI_INTnumber )
    1fc0:	89 81       	ldd	r24, Y+1	; 0x01
    1fc2:	28 2f       	mov	r18, r24
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	3a 87       	std	Y+10, r19	; 0x0a
    1fc8:	29 87       	std	Y+9, r18	; 0x09
    1fca:	89 85       	ldd	r24, Y+9	; 0x09
    1fcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fce:	81 30       	cpi	r24, 0x01	; 1
    1fd0:	91 05       	cpc	r25, r1
    1fd2:	09 f4       	brne	.+2      	; 0x1fd6 <EXTI_voidEnable+0x2e>
    1fd4:	6d c0       	rjmp	.+218    	; 0x20b0 <EXTI_voidEnable+0x108>
    1fd6:	29 85       	ldd	r18, Y+9	; 0x09
    1fd8:	3a 85       	ldd	r19, Y+10	; 0x0a
    1fda:	22 30       	cpi	r18, 0x02	; 2
    1fdc:	31 05       	cpc	r19, r1
    1fde:	09 f4       	brne	.+2      	; 0x1fe2 <EXTI_voidEnable+0x3a>
    1fe0:	c9 c0       	rjmp	.+402    	; 0x2174 <EXTI_voidEnable+0x1cc>
    1fe2:	89 85       	ldd	r24, Y+9	; 0x09
    1fe4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fe6:	00 97       	sbiw	r24, 0x00	; 0
    1fe8:	09 f0       	breq	.+2      	; 0x1fec <EXTI_voidEnable+0x44>
    1fea:	e9 c0       	rjmp	.+466    	; 0x21be <EXTI_voidEnable+0x216>
    {
        case EXTI_INT0 :     // Set 1 On PIN6 At GTCR_REG to [Enable] (PIE) Peripheral EXTI_INTerrupt Enable to EXTI_INT0 .
                         SET_BIT(GICR_REG,PIN6);            
    1fec:	ab e5       	ldi	r26, 0x5B	; 91
    1fee:	b0 e0       	ldi	r27, 0x00	; 0
    1ff0:	eb e5       	ldi	r30, 0x5B	; 91
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	80 81       	ld	r24, Z
    1ff6:	80 64       	ori	r24, 0x40	; 64
    1ff8:	8c 93       	st	X, r24
                        switch ( Copy_u8SenseControl )
    1ffa:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffc:	28 2f       	mov	r18, r24
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	38 87       	std	Y+8, r19	; 0x08
    2002:	2f 83       	std	Y+7, r18	; 0x07
    2004:	8f 81       	ldd	r24, Y+7	; 0x07
    2006:	98 85       	ldd	r25, Y+8	; 0x08
    2008:	81 30       	cpi	r24, 0x01	; 1
    200a:	91 05       	cpc	r25, r1
    200c:	21 f1       	breq	.+72     	; 0x2056 <EXTI_voidEnable+0xae>
    200e:	2f 81       	ldd	r18, Y+7	; 0x07
    2010:	38 85       	ldd	r19, Y+8	; 0x08
    2012:	22 30       	cpi	r18, 0x02	; 2
    2014:	31 05       	cpc	r19, r1
    2016:	2c f4       	brge	.+10     	; 0x2022 <EXTI_voidEnable+0x7a>
    2018:	8f 81       	ldd	r24, Y+7	; 0x07
    201a:	98 85       	ldd	r25, Y+8	; 0x08
    201c:	00 97       	sbiw	r24, 0x00	; 0
    201e:	61 f0       	breq	.+24     	; 0x2038 <EXTI_voidEnable+0x90>
    2020:	ce c0       	rjmp	.+412    	; 0x21be <EXTI_voidEnable+0x216>
    2022:	2f 81       	ldd	r18, Y+7	; 0x07
    2024:	38 85       	ldd	r19, Y+8	; 0x08
    2026:	22 30       	cpi	r18, 0x02	; 2
    2028:	31 05       	cpc	r19, r1
    202a:	21 f1       	breq	.+72     	; 0x2074 <EXTI_voidEnable+0xcc>
    202c:	8f 81       	ldd	r24, Y+7	; 0x07
    202e:	98 85       	ldd	r25, Y+8	; 0x08
    2030:	83 30       	cpi	r24, 0x03	; 3
    2032:	91 05       	cpc	r25, r1
    2034:	71 f1       	breq	.+92     	; 0x2092 <EXTI_voidEnable+0xea>
    2036:	c3 c0       	rjmp	.+390    	; 0x21be <EXTI_voidEnable+0x216>
                        {															 // BIT1  -  BIT0  on MCUCR_REG
                            case FALLING_EDGE :										 //    1   -   0   Falling Edge
                            	SET_BIT(MCUCR_REG,PIN1);
    2038:	a5 e5       	ldi	r26, 0x55	; 85
    203a:	b0 e0       	ldi	r27, 0x00	; 0
    203c:	e5 e5       	ldi	r30, 0x55	; 85
    203e:	f0 e0       	ldi	r31, 0x00	; 0
    2040:	80 81       	ld	r24, Z
    2042:	82 60       	ori	r24, 0x02	; 2
    2044:	8c 93       	st	X, r24
                            	CLR_BIT(MCUCR_REG,PIN0);
    2046:	a5 e5       	ldi	r26, 0x55	; 85
    2048:	b0 e0       	ldi	r27, 0x00	; 0
    204a:	e5 e5       	ldi	r30, 0x55	; 85
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	80 81       	ld	r24, Z
    2050:	8e 7f       	andi	r24, 0xFE	; 254
    2052:	8c 93       	st	X, r24
    2054:	b4 c0       	rjmp	.+360    	; 0x21be <EXTI_voidEnable+0x216>
                            	break;
                            case RAISING_EDGE :     								 //   1   -   1   Raising Edge
                            	SET_BIT(MCUCR_REG,PIN1);
    2056:	a5 e5       	ldi	r26, 0x55	; 85
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	e5 e5       	ldi	r30, 0x55	; 85
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	80 81       	ld	r24, Z
    2060:	82 60       	ori	r24, 0x02	; 2
    2062:	8c 93       	st	X, r24
                            	SET_BIT(MCUCR_REG,PIN0);
    2064:	a5 e5       	ldi	r26, 0x55	; 85
    2066:	b0 e0       	ldi	r27, 0x00	; 0
    2068:	e5 e5       	ldi	r30, 0x55	; 85
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	80 81       	ld	r24, Z
    206e:	81 60       	ori	r24, 0x01	; 1
    2070:	8c 93       	st	X, r24
    2072:	a5 c0       	rjmp	.+330    	; 0x21be <EXTI_voidEnable+0x216>
                            	break;
                            case LOW_LEVEL    :     								 //   0   -   0   Low Level
                            	CLR_BIT(MCUCR_REG,PIN1);
    2074:	a5 e5       	ldi	r26, 0x55	; 85
    2076:	b0 e0       	ldi	r27, 0x00	; 0
    2078:	e5 e5       	ldi	r30, 0x55	; 85
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	80 81       	ld	r24, Z
    207e:	8d 7f       	andi	r24, 0xFD	; 253
    2080:	8c 93       	st	X, r24
                            	CLR_BIT(MCUCR_REG,PIN0);
    2082:	a5 e5       	ldi	r26, 0x55	; 85
    2084:	b0 e0       	ldi	r27, 0x00	; 0
    2086:	e5 e5       	ldi	r30, 0x55	; 85
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	80 81       	ld	r24, Z
    208c:	8e 7f       	andi	r24, 0xFE	; 254
    208e:	8c 93       	st	X, r24
    2090:	96 c0       	rjmp	.+300    	; 0x21be <EXTI_voidEnable+0x216>
                            	break;
                            case ON_CHANGE    :										//   0   -   1   On Change
                            	CLR_BIT(MCUCR_REG,PIN1);
    2092:	a5 e5       	ldi	r26, 0x55	; 85
    2094:	b0 e0       	ldi	r27, 0x00	; 0
    2096:	e5 e5       	ldi	r30, 0x55	; 85
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	80 81       	ld	r24, Z
    209c:	8d 7f       	andi	r24, 0xFD	; 253
    209e:	8c 93       	st	X, r24
                            	SET_BIT(MCUCR_REG,PIN0);
    20a0:	a5 e5       	ldi	r26, 0x55	; 85
    20a2:	b0 e0       	ldi	r27, 0x00	; 0
    20a4:	e5 e5       	ldi	r30, 0x55	; 85
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	80 81       	ld	r24, Z
    20aa:	81 60       	ori	r24, 0x01	; 1
    20ac:	8c 93       	st	X, r24
    20ae:	87 c0       	rjmp	.+270    	; 0x21be <EXTI_voidEnable+0x216>
                            	break;
                        }
                        break;

        case EXTI_INT1 :     // Set 1 On PIN7 At GTCR_REG to [Enable] (PIE) Peripheral EXTI_INTerrupt Enable to EXTI_INT1 .
                        SET_BIT(GICR_REG,PIN7);             
    20b0:	ab e5       	ldi	r26, 0x5B	; 91
    20b2:	b0 e0       	ldi	r27, 0x00	; 0
    20b4:	eb e5       	ldi	r30, 0x5B	; 91
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	80 68       	ori	r24, 0x80	; 128
    20bc:	8c 93       	st	X, r24
                        switch ( Copy_u8SenseControl )
    20be:	8a 81       	ldd	r24, Y+2	; 0x02
    20c0:	28 2f       	mov	r18, r24
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	3e 83       	std	Y+6, r19	; 0x06
    20c6:	2d 83       	std	Y+5, r18	; 0x05
    20c8:	8d 81       	ldd	r24, Y+5	; 0x05
    20ca:	9e 81       	ldd	r25, Y+6	; 0x06
    20cc:	81 30       	cpi	r24, 0x01	; 1
    20ce:	91 05       	cpc	r25, r1
    20d0:	21 f1       	breq	.+72     	; 0x211a <EXTI_voidEnable+0x172>
    20d2:	2d 81       	ldd	r18, Y+5	; 0x05
    20d4:	3e 81       	ldd	r19, Y+6	; 0x06
    20d6:	22 30       	cpi	r18, 0x02	; 2
    20d8:	31 05       	cpc	r19, r1
    20da:	2c f4       	brge	.+10     	; 0x20e6 <EXTI_voidEnable+0x13e>
    20dc:	8d 81       	ldd	r24, Y+5	; 0x05
    20de:	9e 81       	ldd	r25, Y+6	; 0x06
    20e0:	00 97       	sbiw	r24, 0x00	; 0
    20e2:	61 f0       	breq	.+24     	; 0x20fc <EXTI_voidEnable+0x154>
    20e4:	6c c0       	rjmp	.+216    	; 0x21be <EXTI_voidEnable+0x216>
    20e6:	2d 81       	ldd	r18, Y+5	; 0x05
    20e8:	3e 81       	ldd	r19, Y+6	; 0x06
    20ea:	22 30       	cpi	r18, 0x02	; 2
    20ec:	31 05       	cpc	r19, r1
    20ee:	21 f1       	breq	.+72     	; 0x2138 <EXTI_voidEnable+0x190>
    20f0:	8d 81       	ldd	r24, Y+5	; 0x05
    20f2:	9e 81       	ldd	r25, Y+6	; 0x06
    20f4:	83 30       	cpi	r24, 0x03	; 3
    20f6:	91 05       	cpc	r25, r1
    20f8:	71 f1       	breq	.+92     	; 0x2156 <EXTI_voidEnable+0x1ae>
    20fa:	61 c0       	rjmp	.+194    	; 0x21be <EXTI_voidEnable+0x216>
                        {                                                           // BIT3  -  BIT2  on MCUCR_REG
                            case FALLING_EDGE :										//   1   -   0   Falling Edge
                            	SET_BIT(MCUCR_REG,PIN3);
    20fc:	a5 e5       	ldi	r26, 0x55	; 85
    20fe:	b0 e0       	ldi	r27, 0x00	; 0
    2100:	e5 e5       	ldi	r30, 0x55	; 85
    2102:	f0 e0       	ldi	r31, 0x00	; 0
    2104:	80 81       	ld	r24, Z
    2106:	88 60       	ori	r24, 0x08	; 8
    2108:	8c 93       	st	X, r24
                            	CLR_BIT(MCUCR_REG,PIN2);
    210a:	a5 e5       	ldi	r26, 0x55	; 85
    210c:	b0 e0       	ldi	r27, 0x00	; 0
    210e:	e5 e5       	ldi	r30, 0x55	; 85
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	80 81       	ld	r24, Z
    2114:	8b 7f       	andi	r24, 0xFB	; 251
    2116:	8c 93       	st	X, r24
    2118:	52 c0       	rjmp	.+164    	; 0x21be <EXTI_voidEnable+0x216>
                            	break;
                            case RAISING_EDGE :     								//   1   -   1   Raising Edge
                            	SET_BIT(MCUCR_REG,PIN3);
    211a:	a5 e5       	ldi	r26, 0x55	; 85
    211c:	b0 e0       	ldi	r27, 0x00	; 0
    211e:	e5 e5       	ldi	r30, 0x55	; 85
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	80 81       	ld	r24, Z
    2124:	88 60       	ori	r24, 0x08	; 8
    2126:	8c 93       	st	X, r24
                            	SET_BIT(MCUCR_REG,PIN2);
    2128:	a5 e5       	ldi	r26, 0x55	; 85
    212a:	b0 e0       	ldi	r27, 0x00	; 0
    212c:	e5 e5       	ldi	r30, 0x55	; 85
    212e:	f0 e0       	ldi	r31, 0x00	; 0
    2130:	80 81       	ld	r24, Z
    2132:	84 60       	ori	r24, 0x04	; 4
    2134:	8c 93       	st	X, r24
    2136:	43 c0       	rjmp	.+134    	; 0x21be <EXTI_voidEnable+0x216>
                            	break;
                            case LOW_LEVEL    :										//   0   -   0   Low Level
                            	CLR_BIT(MCUCR_REG,PIN3);
    2138:	a5 e5       	ldi	r26, 0x55	; 85
    213a:	b0 e0       	ldi	r27, 0x00	; 0
    213c:	e5 e5       	ldi	r30, 0x55	; 85
    213e:	f0 e0       	ldi	r31, 0x00	; 0
    2140:	80 81       	ld	r24, Z
    2142:	87 7f       	andi	r24, 0xF7	; 247
    2144:	8c 93       	st	X, r24
                            	CLR_BIT(MCUCR_REG,PIN2);
    2146:	a5 e5       	ldi	r26, 0x55	; 85
    2148:	b0 e0       	ldi	r27, 0x00	; 0
    214a:	e5 e5       	ldi	r30, 0x55	; 85
    214c:	f0 e0       	ldi	r31, 0x00	; 0
    214e:	80 81       	ld	r24, Z
    2150:	8b 7f       	andi	r24, 0xFB	; 251
    2152:	8c 93       	st	X, r24
    2154:	34 c0       	rjmp	.+104    	; 0x21be <EXTI_voidEnable+0x216>
                            	break;
                            case ON_CHANGE    :										//   0   -   1   On Change
                            	CLR_BIT(MCUCR_REG,PIN3);
    2156:	a5 e5       	ldi	r26, 0x55	; 85
    2158:	b0 e0       	ldi	r27, 0x00	; 0
    215a:	e5 e5       	ldi	r30, 0x55	; 85
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	80 81       	ld	r24, Z
    2160:	87 7f       	andi	r24, 0xF7	; 247
    2162:	8c 93       	st	X, r24
                            	SET_BIT(MCUCR_REG,PIN2);
    2164:	a5 e5       	ldi	r26, 0x55	; 85
    2166:	b0 e0       	ldi	r27, 0x00	; 0
    2168:	e5 e5       	ldi	r30, 0x55	; 85
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	80 81       	ld	r24, Z
    216e:	84 60       	ori	r24, 0x04	; 4
    2170:	8c 93       	st	X, r24
    2172:	25 c0       	rjmp	.+74     	; 0x21be <EXTI_voidEnable+0x216>
                            	break;
                            default           :                                                                   break;  
                        }
                        break;
        case EXTI_INT2 :      // Set 1 On PIN5 At GTCR_REG to [Enable] (PIE) Peripheral EXTI_INTerrupt Enable to EXTI_INT2 .
                        SET_BIT(GICR_REG,PIN5);            
    2174:	ab e5       	ldi	r26, 0x5B	; 91
    2176:	b0 e0       	ldi	r27, 0x00	; 0
    2178:	eb e5       	ldi	r30, 0x5B	; 91
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	80 81       	ld	r24, Z
    217e:	80 62       	ori	r24, 0x20	; 32
    2180:	8c 93       	st	X, r24
                        switch ( Copy_u8SenseControl )
    2182:	8a 81       	ldd	r24, Y+2	; 0x02
    2184:	28 2f       	mov	r18, r24
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	3c 83       	std	Y+4, r19	; 0x04
    218a:	2b 83       	std	Y+3, r18	; 0x03
    218c:	8b 81       	ldd	r24, Y+3	; 0x03
    218e:	9c 81       	ldd	r25, Y+4	; 0x04
    2190:	00 97       	sbiw	r24, 0x00	; 0
    2192:	31 f0       	breq	.+12     	; 0x21a0 <EXTI_voidEnable+0x1f8>
    2194:	2b 81       	ldd	r18, Y+3	; 0x03
    2196:	3c 81       	ldd	r19, Y+4	; 0x04
    2198:	21 30       	cpi	r18, 0x01	; 1
    219a:	31 05       	cpc	r19, r1
    219c:	49 f0       	breq	.+18     	; 0x21b0 <EXTI_voidEnable+0x208>
    219e:	0f c0       	rjmp	.+30     	; 0x21be <EXTI_voidEnable+0x216>
                        {                                                                      //  BIT6  on  MCUCSR_REG
                            case FALLING_EDGE :
                            	CLR_BIT(MCUCSR_REG,PIN6);      								   //   0    Falling Edge
    21a0:	a4 e5       	ldi	r26, 0x54	; 84
    21a2:	b0 e0       	ldi	r27, 0x00	; 0
    21a4:	e4 e5       	ldi	r30, 0x54	; 84
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	80 81       	ld	r24, Z
    21aa:	8f 7b       	andi	r24, 0xBF	; 191
    21ac:	8c 93       	st	X, r24
    21ae:	07 c0       	rjmp	.+14     	; 0x21be <EXTI_voidEnable+0x216>
                            	break;
                            case RAISING_EDGE :     										   //   1    Raising Edge
                            	SET_BIT(MCUCSR_REG,PIN6);
    21b0:	a4 e5       	ldi	r26, 0x54	; 84
    21b2:	b0 e0       	ldi	r27, 0x00	; 0
    21b4:	e4 e5       	ldi	r30, 0x54	; 84
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	80 81       	ld	r24, Z
    21ba:	80 64       	ori	r24, 0x40	; 64
    21bc:	8c 93       	st	X, r24
                        } 
                        break;
        default   :
        	break;
    }
}
    21be:	2a 96       	adiw	r28, 0x0a	; 10
    21c0:	0f b6       	in	r0, 0x3f	; 63
    21c2:	f8 94       	cli
    21c4:	de bf       	out	0x3e, r29	; 62
    21c6:	0f be       	out	0x3f, r0	; 63
    21c8:	cd bf       	out	0x3d, r28	; 61
    21ca:	cf 91       	pop	r28
    21cc:	df 91       	pop	r29
    21ce:	08 95       	ret

000021d0 <EXTI_voidDisable>:


void EXTI_voidDisable ( u8 Copy_u8EXTI_INTnumber )
{
    21d0:	df 93       	push	r29
    21d2:	cf 93       	push	r28
    21d4:	00 d0       	rcall	.+0      	; 0x21d6 <EXTI_voidDisable+0x6>
    21d6:	0f 92       	push	r0
    21d8:	cd b7       	in	r28, 0x3d	; 61
    21da:	de b7       	in	r29, 0x3e	; 62
    21dc:	89 83       	std	Y+1, r24	; 0x01
    switch ( Copy_u8EXTI_INTnumber )
    21de:	89 81       	ldd	r24, Y+1	; 0x01
    21e0:	28 2f       	mov	r18, r24
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	3b 83       	std	Y+3, r19	; 0x03
    21e6:	2a 83       	std	Y+2, r18	; 0x02
    21e8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ea:	9b 81       	ldd	r25, Y+3	; 0x03
    21ec:	81 30       	cpi	r24, 0x01	; 1
    21ee:	91 05       	cpc	r25, r1
    21f0:	89 f0       	breq	.+34     	; 0x2214 <EXTI_voidDisable+0x44>
    21f2:	2a 81       	ldd	r18, Y+2	; 0x02
    21f4:	3b 81       	ldd	r19, Y+3	; 0x03
    21f6:	22 30       	cpi	r18, 0x02	; 2
    21f8:	31 05       	cpc	r19, r1
    21fa:	a1 f0       	breq	.+40     	; 0x2224 <EXTI_voidDisable+0x54>
    21fc:	8a 81       	ldd	r24, Y+2	; 0x02
    21fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2200:	00 97       	sbiw	r24, 0x00	; 0
    2202:	b9 f4       	brne	.+46     	; 0x2232 <EXTI_voidDisable+0x62>
    {
        case EXTI_INT0 :         // Set 0 On PIN6 At GTCR_REG to [Disable] (PIE) Peripheral EXTI_INTerrupt Enable to EXTI_INT0 .
        	CLR_BIT(GICR_REG,PIN6);
    2204:	ab e5       	ldi	r26, 0x5B	; 91
    2206:	b0 e0       	ldi	r27, 0x00	; 0
    2208:	eb e5       	ldi	r30, 0x5B	; 91
    220a:	f0 e0       	ldi	r31, 0x00	; 0
    220c:	80 81       	ld	r24, Z
    220e:	8f 7b       	andi	r24, 0xBF	; 191
    2210:	8c 93       	st	X, r24
    2212:	0f c0       	rjmp	.+30     	; 0x2232 <EXTI_voidDisable+0x62>
        	break;
        case EXTI_INT1 :         // Set 0 On PIN7 At GTCR_REG to [Disable] (PIE) Peripheral EXTI_INTerrupt Enable to EXTI_INT1 .
        	CLR_BIT(GICR_REG,PIN7);
    2214:	ab e5       	ldi	r26, 0x5B	; 91
    2216:	b0 e0       	ldi	r27, 0x00	; 0
    2218:	eb e5       	ldi	r30, 0x5B	; 91
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	80 81       	ld	r24, Z
    221e:	8f 77       	andi	r24, 0x7F	; 127
    2220:	8c 93       	st	X, r24
    2222:	07 c0       	rjmp	.+14     	; 0x2232 <EXTI_voidDisable+0x62>
        	break;
        case EXTI_INT2 :         // Set 0 On PIN5 At GTCR_REG to [Disable] (PIE) Peripheral EXTI_INTerrupt Enable to EXTI_INT2 .
        	CLR_BIT(GICR_REG,PIN5);
    2224:	ab e5       	ldi	r26, 0x5B	; 91
    2226:	b0 e0       	ldi	r27, 0x00	; 0
    2228:	eb e5       	ldi	r30, 0x5B	; 91
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	80 81       	ld	r24, Z
    222e:	8f 7d       	andi	r24, 0xDF	; 223
    2230:	8c 93       	st	X, r24
        	break;
        default   :
        	break;
    }
}
    2232:	0f 90       	pop	r0
    2234:	0f 90       	pop	r0
    2236:	0f 90       	pop	r0
    2238:	cf 91       	pop	r28
    223a:	df 91       	pop	r29
    223c:	08 95       	ret

0000223e <EXTI_voidSetCallBack>:

void EXTI_voidSetCallBack ( u8 Copy_u8EXTI_INTnumber , void (*Local_PoEXTI_INTerToFunction) (void) )
{
    223e:	df 93       	push	r29
    2240:	cf 93       	push	r28
    2242:	00 d0       	rcall	.+0      	; 0x2244 <EXTI_voidSetCallBack+0x6>
    2244:	00 d0       	rcall	.+0      	; 0x2246 <EXTI_voidSetCallBack+0x8>
    2246:	0f 92       	push	r0
    2248:	cd b7       	in	r28, 0x3d	; 61
    224a:	de b7       	in	r29, 0x3e	; 62
    224c:	89 83       	std	Y+1, r24	; 0x01
    224e:	7b 83       	std	Y+3, r23	; 0x03
    2250:	6a 83       	std	Y+2, r22	; 0x02
    switch( Copy_u8EXTI_INTnumber )
    2252:	89 81       	ldd	r24, Y+1	; 0x01
    2254:	28 2f       	mov	r18, r24
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	3d 83       	std	Y+5, r19	; 0x05
    225a:	2c 83       	std	Y+4, r18	; 0x04
    225c:	8c 81       	ldd	r24, Y+4	; 0x04
    225e:	9d 81       	ldd	r25, Y+5	; 0x05
    2260:	81 30       	cpi	r24, 0x01	; 1
    2262:	91 05       	cpc	r25, r1
    2264:	81 f0       	breq	.+32     	; 0x2286 <EXTI_voidSetCallBack+0x48>
    2266:	2c 81       	ldd	r18, Y+4	; 0x04
    2268:	3d 81       	ldd	r19, Y+5	; 0x05
    226a:	22 30       	cpi	r18, 0x02	; 2
    226c:	31 05       	cpc	r19, r1
    226e:	91 f0       	breq	.+36     	; 0x2294 <EXTI_voidSetCallBack+0x56>
    2270:	8c 81       	ldd	r24, Y+4	; 0x04
    2272:	9d 81       	ldd	r25, Y+5	; 0x05
    2274:	00 97       	sbiw	r24, 0x00	; 0
    2276:	a1 f4       	brne	.+40     	; 0x22a0 <EXTI_voidSetCallBack+0x62>
    {
        case EXTI_INT0 :
        	Global_PF_Vector_1 = Local_PoEXTI_INTerToFunction ;
    2278:	8a 81       	ldd	r24, Y+2	; 0x02
    227a:	9b 81       	ldd	r25, Y+3	; 0x03
    227c:	90 93 4a 02 	sts	0x024A, r25
    2280:	80 93 49 02 	sts	0x0249, r24
    2284:	0d c0       	rjmp	.+26     	; 0x22a0 <EXTI_voidSetCallBack+0x62>
        	break;
        case EXTI_INT1 :
        	Global_PF_Vector_2 = Local_PoEXTI_INTerToFunction ;
    2286:	8a 81       	ldd	r24, Y+2	; 0x02
    2288:	9b 81       	ldd	r25, Y+3	; 0x03
    228a:	90 93 4c 02 	sts	0x024C, r25
    228e:	80 93 4b 02 	sts	0x024B, r24
    2292:	06 c0       	rjmp	.+12     	; 0x22a0 <EXTI_voidSetCallBack+0x62>
        	break;
        case EXTI_INT2 :
        	Global_PF_Vector_3 = Local_PoEXTI_INTerToFunction ;
    2294:	8a 81       	ldd	r24, Y+2	; 0x02
    2296:	9b 81       	ldd	r25, Y+3	; 0x03
    2298:	90 93 4e 02 	sts	0x024E, r25
    229c:	80 93 4d 02 	sts	0x024D, r24
        	break;
        default   :
        	break;
    } 
}
    22a0:	0f 90       	pop	r0
    22a2:	0f 90       	pop	r0
    22a4:	0f 90       	pop	r0
    22a6:	0f 90       	pop	r0
    22a8:	0f 90       	pop	r0
    22aa:	cf 91       	pop	r28
    22ac:	df 91       	pop	r29
    22ae:	08 95       	ret

000022b0 <__vector_1>:


void __vector_1 (void)   __attribute__((signal));
void __vector_1 (void)
{
    22b0:	1f 92       	push	r1
    22b2:	0f 92       	push	r0
    22b4:	0f b6       	in	r0, 0x3f	; 63
    22b6:	0f 92       	push	r0
    22b8:	11 24       	eor	r1, r1
    22ba:	2f 93       	push	r18
    22bc:	3f 93       	push	r19
    22be:	4f 93       	push	r20
    22c0:	5f 93       	push	r21
    22c2:	6f 93       	push	r22
    22c4:	7f 93       	push	r23
    22c6:	8f 93       	push	r24
    22c8:	9f 93       	push	r25
    22ca:	af 93       	push	r26
    22cc:	bf 93       	push	r27
    22ce:	ef 93       	push	r30
    22d0:	ff 93       	push	r31
    22d2:	df 93       	push	r29
    22d4:	cf 93       	push	r28
    22d6:	cd b7       	in	r28, 0x3d	; 61
    22d8:	de b7       	in	r29, 0x3e	; 62
    if ( Global_PF_Vector_1 != NULL )
    22da:	80 91 49 02 	lds	r24, 0x0249
    22de:	90 91 4a 02 	lds	r25, 0x024A
    22e2:	00 97       	sbiw	r24, 0x00	; 0
    22e4:	29 f0       	breq	.+10     	; 0x22f0 <__vector_1+0x40>
    {
        Global_PF_Vector_1 ();  // calling Global poEXTI_INTer to function that contain address of Application Function with EXTI_INT0.
    22e6:	e0 91 49 02 	lds	r30, 0x0249
    22ea:	f0 91 4a 02 	lds	r31, 0x024A
    22ee:	09 95       	icall
    }

}
    22f0:	cf 91       	pop	r28
    22f2:	df 91       	pop	r29
    22f4:	ff 91       	pop	r31
    22f6:	ef 91       	pop	r30
    22f8:	bf 91       	pop	r27
    22fa:	af 91       	pop	r26
    22fc:	9f 91       	pop	r25
    22fe:	8f 91       	pop	r24
    2300:	7f 91       	pop	r23
    2302:	6f 91       	pop	r22
    2304:	5f 91       	pop	r21
    2306:	4f 91       	pop	r20
    2308:	3f 91       	pop	r19
    230a:	2f 91       	pop	r18
    230c:	0f 90       	pop	r0
    230e:	0f be       	out	0x3f, r0	; 63
    2310:	0f 90       	pop	r0
    2312:	1f 90       	pop	r1
    2314:	18 95       	reti

00002316 <__vector_2>:

void __vector_2 (void)   __attribute__((signal));
void __vector_2 (void) 
{
    2316:	1f 92       	push	r1
    2318:	0f 92       	push	r0
    231a:	0f b6       	in	r0, 0x3f	; 63
    231c:	0f 92       	push	r0
    231e:	11 24       	eor	r1, r1
    2320:	2f 93       	push	r18
    2322:	3f 93       	push	r19
    2324:	4f 93       	push	r20
    2326:	5f 93       	push	r21
    2328:	6f 93       	push	r22
    232a:	7f 93       	push	r23
    232c:	8f 93       	push	r24
    232e:	9f 93       	push	r25
    2330:	af 93       	push	r26
    2332:	bf 93       	push	r27
    2334:	ef 93       	push	r30
    2336:	ff 93       	push	r31
    2338:	df 93       	push	r29
    233a:	cf 93       	push	r28
    233c:	cd b7       	in	r28, 0x3d	; 61
    233e:	de b7       	in	r29, 0x3e	; 62
    if ( Global_PF_Vector_2 != NULL )
    2340:	80 91 4b 02 	lds	r24, 0x024B
    2344:	90 91 4c 02 	lds	r25, 0x024C
    2348:	00 97       	sbiw	r24, 0x00	; 0
    234a:	29 f0       	breq	.+10     	; 0x2356 <__vector_2+0x40>
    {
        Global_PF_Vector_2 ();  // calling Global poEXTI_INTer to function that contain address of Application Function with EXTI_INT1.
    234c:	e0 91 4b 02 	lds	r30, 0x024B
    2350:	f0 91 4c 02 	lds	r31, 0x024C
    2354:	09 95       	icall
    }
    
}
    2356:	cf 91       	pop	r28
    2358:	df 91       	pop	r29
    235a:	ff 91       	pop	r31
    235c:	ef 91       	pop	r30
    235e:	bf 91       	pop	r27
    2360:	af 91       	pop	r26
    2362:	9f 91       	pop	r25
    2364:	8f 91       	pop	r24
    2366:	7f 91       	pop	r23
    2368:	6f 91       	pop	r22
    236a:	5f 91       	pop	r21
    236c:	4f 91       	pop	r20
    236e:	3f 91       	pop	r19
    2370:	2f 91       	pop	r18
    2372:	0f 90       	pop	r0
    2374:	0f be       	out	0x3f, r0	; 63
    2376:	0f 90       	pop	r0
    2378:	1f 90       	pop	r1
    237a:	18 95       	reti

0000237c <__vector_3>:

void __vector_3 (void)   __attribute__((signal));
void __vector_3 (void) 
{
    237c:	1f 92       	push	r1
    237e:	0f 92       	push	r0
    2380:	0f b6       	in	r0, 0x3f	; 63
    2382:	0f 92       	push	r0
    2384:	11 24       	eor	r1, r1
    2386:	2f 93       	push	r18
    2388:	3f 93       	push	r19
    238a:	4f 93       	push	r20
    238c:	5f 93       	push	r21
    238e:	6f 93       	push	r22
    2390:	7f 93       	push	r23
    2392:	8f 93       	push	r24
    2394:	9f 93       	push	r25
    2396:	af 93       	push	r26
    2398:	bf 93       	push	r27
    239a:	ef 93       	push	r30
    239c:	ff 93       	push	r31
    239e:	df 93       	push	r29
    23a0:	cf 93       	push	r28
    23a2:	cd b7       	in	r28, 0x3d	; 61
    23a4:	de b7       	in	r29, 0x3e	; 62
    if ( Global_PF_Vector_3 != NULL )
    23a6:	80 91 4d 02 	lds	r24, 0x024D
    23aa:	90 91 4e 02 	lds	r25, 0x024E
    23ae:	00 97       	sbiw	r24, 0x00	; 0
    23b0:	29 f0       	breq	.+10     	; 0x23bc <__vector_3+0x40>
    {
        Global_PF_Vector_3 ();  // calling Global poEXTI_INTer to function that contain address of Application Function with EXTI_INT2.
    23b2:	e0 91 4d 02 	lds	r30, 0x024D
    23b6:	f0 91 4e 02 	lds	r31, 0x024E
    23ba:	09 95       	icall
    }
}
    23bc:	cf 91       	pop	r28
    23be:	df 91       	pop	r29
    23c0:	ff 91       	pop	r31
    23c2:	ef 91       	pop	r30
    23c4:	bf 91       	pop	r27
    23c6:	af 91       	pop	r26
    23c8:	9f 91       	pop	r25
    23ca:	8f 91       	pop	r24
    23cc:	7f 91       	pop	r23
    23ce:	6f 91       	pop	r22
    23d0:	5f 91       	pop	r21
    23d2:	4f 91       	pop	r20
    23d4:	3f 91       	pop	r19
    23d6:	2f 91       	pop	r18
    23d8:	0f 90       	pop	r0
    23da:	0f be       	out	0x3f, r0	; 63
    23dc:	0f 90       	pop	r0
    23de:	1f 90       	pop	r1
    23e0:	18 95       	reti

000023e2 <DIO_voidSetPinDirection>:
#include "DIO_Config.h"



void DIO_voidSetPinDirection (u8 Copy_u8PortNumber, u8 Copy_u8PinNumber, u8 Copy_u8Direction )
{
    23e2:	df 93       	push	r29
    23e4:	cf 93       	push	r28
    23e6:	cd b7       	in	r28, 0x3d	; 61
    23e8:	de b7       	in	r29, 0x3e	; 62
    23ea:	29 97       	sbiw	r28, 0x09	; 9
    23ec:	0f b6       	in	r0, 0x3f	; 63
    23ee:	f8 94       	cli
    23f0:	de bf       	out	0x3e, r29	; 62
    23f2:	0f be       	out	0x3f, r0	; 63
    23f4:	cd bf       	out	0x3d, r28	; 61
    23f6:	89 83       	std	Y+1, r24	; 0x01
    23f8:	6a 83       	std	Y+2, r22	; 0x02
    23fa:	4b 83       	std	Y+3, r20	; 0x03
    /* i/p validation */
    if ( Copy_u8PortNumber > DIO_PORTD || Copy_u8PinNumber > DIO_PIN7 )
    23fc:	89 81       	ldd	r24, Y+1	; 0x01
    23fe:	84 30       	cpi	r24, 0x04	; 4
    2400:	08 f0       	brcs	.+2      	; 0x2404 <DIO_voidSetPinDirection+0x22>
    2402:	f6 c0       	rjmp	.+492    	; 0x25f0 <DIO_voidSetPinDirection+0x20e>
    2404:	8a 81       	ldd	r24, Y+2	; 0x02
    2406:	88 30       	cpi	r24, 0x08	; 8
    2408:	08 f0       	brcs	.+2      	; 0x240c <DIO_voidSetPinDirection+0x2a>
    240a:	f2 c0       	rjmp	.+484    	; 0x25f0 <DIO_voidSetPinDirection+0x20e>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8Direction)
    240c:	8b 81       	ldd	r24, Y+3	; 0x03
    240e:	28 2f       	mov	r18, r24
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	39 87       	std	Y+9, r19	; 0x09
    2414:	28 87       	std	Y+8, r18	; 0x08
    2416:	88 85       	ldd	r24, Y+8	; 0x08
    2418:	99 85       	ldd	r25, Y+9	; 0x09
    241a:	00 97       	sbiw	r24, 0x00	; 0
    241c:	39 f0       	breq	.+14     	; 0x242c <DIO_voidSetPinDirection+0x4a>
    241e:	28 85       	ldd	r18, Y+8	; 0x08
    2420:	39 85       	ldd	r19, Y+9	; 0x09
    2422:	21 30       	cpi	r18, 0x01	; 1
    2424:	31 05       	cpc	r19, r1
    2426:	09 f4       	brne	.+2      	; 0x242a <DIO_voidSetPinDirection+0x48>
    2428:	75 c0       	rjmp	.+234    	; 0x2514 <DIO_voidSetPinDirection+0x132>
    242a:	e2 c0       	rjmp	.+452    	; 0x25f0 <DIO_voidSetPinDirection+0x20e>
        {
            case DIO_INPUT :    switch(Copy_u8PortNumber)
    242c:	89 81       	ldd	r24, Y+1	; 0x01
    242e:	28 2f       	mov	r18, r24
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	3f 83       	std	Y+7, r19	; 0x07
    2434:	2e 83       	std	Y+6, r18	; 0x06
    2436:	8e 81       	ldd	r24, Y+6	; 0x06
    2438:	9f 81       	ldd	r25, Y+7	; 0x07
    243a:	81 30       	cpi	r24, 0x01	; 1
    243c:	91 05       	cpc	r25, r1
    243e:	59 f1       	breq	.+86     	; 0x2496 <DIO_voidSetPinDirection+0xb4>
    2440:	2e 81       	ldd	r18, Y+6	; 0x06
    2442:	3f 81       	ldd	r19, Y+7	; 0x07
    2444:	22 30       	cpi	r18, 0x02	; 2
    2446:	31 05       	cpc	r19, r1
    2448:	2c f4       	brge	.+10     	; 0x2454 <DIO_voidSetPinDirection+0x72>
    244a:	8e 81       	ldd	r24, Y+6	; 0x06
    244c:	9f 81       	ldd	r25, Y+7	; 0x07
    244e:	00 97       	sbiw	r24, 0x00	; 0
    2450:	69 f0       	breq	.+26     	; 0x246c <DIO_voidSetPinDirection+0x8a>
    2452:	ce c0       	rjmp	.+412    	; 0x25f0 <DIO_voidSetPinDirection+0x20e>
    2454:	2e 81       	ldd	r18, Y+6	; 0x06
    2456:	3f 81       	ldd	r19, Y+7	; 0x07
    2458:	22 30       	cpi	r18, 0x02	; 2
    245a:	31 05       	cpc	r19, r1
    245c:	89 f1       	breq	.+98     	; 0x24c0 <DIO_voidSetPinDirection+0xde>
    245e:	8e 81       	ldd	r24, Y+6	; 0x06
    2460:	9f 81       	ldd	r25, Y+7	; 0x07
    2462:	83 30       	cpi	r24, 0x03	; 3
    2464:	91 05       	cpc	r25, r1
    2466:	09 f4       	brne	.+2      	; 0x246a <DIO_voidSetPinDirection+0x88>
    2468:	40 c0       	rjmp	.+128    	; 0x24ea <DIO_voidSetPinDirection+0x108>
    246a:	c2 c0       	rjmp	.+388    	; 0x25f0 <DIO_voidSetPinDirection+0x20e>
                            {
                                case DIO_PORTA :    CLR_BIT( DDRA_REG ,Copy_u8PinNumber );    break;       
    246c:	aa e3       	ldi	r26, 0x3A	; 58
    246e:	b0 e0       	ldi	r27, 0x00	; 0
    2470:	ea e3       	ldi	r30, 0x3A	; 58
    2472:	f0 e0       	ldi	r31, 0x00	; 0
    2474:	80 81       	ld	r24, Z
    2476:	48 2f       	mov	r20, r24
    2478:	8a 81       	ldd	r24, Y+2	; 0x02
    247a:	28 2f       	mov	r18, r24
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	81 e0       	ldi	r24, 0x01	; 1
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	02 2e       	mov	r0, r18
    2484:	02 c0       	rjmp	.+4      	; 0x248a <DIO_voidSetPinDirection+0xa8>
    2486:	88 0f       	add	r24, r24
    2488:	99 1f       	adc	r25, r25
    248a:	0a 94       	dec	r0
    248c:	e2 f7       	brpl	.-8      	; 0x2486 <DIO_voidSetPinDirection+0xa4>
    248e:	80 95       	com	r24
    2490:	84 23       	and	r24, r20
    2492:	8c 93       	st	X, r24
    2494:	ad c0       	rjmp	.+346    	; 0x25f0 <DIO_voidSetPinDirection+0x20e>
                                case DIO_PORTB :    CLR_BIT( DDRB_REG ,Copy_u8PinNumber );    break;
    2496:	a7 e3       	ldi	r26, 0x37	; 55
    2498:	b0 e0       	ldi	r27, 0x00	; 0
    249a:	e7 e3       	ldi	r30, 0x37	; 55
    249c:	f0 e0       	ldi	r31, 0x00	; 0
    249e:	80 81       	ld	r24, Z
    24a0:	48 2f       	mov	r20, r24
    24a2:	8a 81       	ldd	r24, Y+2	; 0x02
    24a4:	28 2f       	mov	r18, r24
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	02 2e       	mov	r0, r18
    24ae:	02 c0       	rjmp	.+4      	; 0x24b4 <DIO_voidSetPinDirection+0xd2>
    24b0:	88 0f       	add	r24, r24
    24b2:	99 1f       	adc	r25, r25
    24b4:	0a 94       	dec	r0
    24b6:	e2 f7       	brpl	.-8      	; 0x24b0 <DIO_voidSetPinDirection+0xce>
    24b8:	80 95       	com	r24
    24ba:	84 23       	and	r24, r20
    24bc:	8c 93       	st	X, r24
    24be:	98 c0       	rjmp	.+304    	; 0x25f0 <DIO_voidSetPinDirection+0x20e>
                                case DIO_PORTC :    CLR_BIT( DDRC_REG ,Copy_u8PinNumber );    break;
    24c0:	a4 e3       	ldi	r26, 0x34	; 52
    24c2:	b0 e0       	ldi	r27, 0x00	; 0
    24c4:	e4 e3       	ldi	r30, 0x34	; 52
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	80 81       	ld	r24, Z
    24ca:	48 2f       	mov	r20, r24
    24cc:	8a 81       	ldd	r24, Y+2	; 0x02
    24ce:	28 2f       	mov	r18, r24
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	02 2e       	mov	r0, r18
    24d8:	02 c0       	rjmp	.+4      	; 0x24de <DIO_voidSetPinDirection+0xfc>
    24da:	88 0f       	add	r24, r24
    24dc:	99 1f       	adc	r25, r25
    24de:	0a 94       	dec	r0
    24e0:	e2 f7       	brpl	.-8      	; 0x24da <DIO_voidSetPinDirection+0xf8>
    24e2:	80 95       	com	r24
    24e4:	84 23       	and	r24, r20
    24e6:	8c 93       	st	X, r24
    24e8:	83 c0       	rjmp	.+262    	; 0x25f0 <DIO_voidSetPinDirection+0x20e>
                                case DIO_PORTD :    CLR_BIT( DDRD_REG ,Copy_u8PinNumber );    break;
    24ea:	a1 e3       	ldi	r26, 0x31	; 49
    24ec:	b0 e0       	ldi	r27, 0x00	; 0
    24ee:	e1 e3       	ldi	r30, 0x31	; 49
    24f0:	f0 e0       	ldi	r31, 0x00	; 0
    24f2:	80 81       	ld	r24, Z
    24f4:	48 2f       	mov	r20, r24
    24f6:	8a 81       	ldd	r24, Y+2	; 0x02
    24f8:	28 2f       	mov	r18, r24
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	81 e0       	ldi	r24, 0x01	; 1
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	02 2e       	mov	r0, r18
    2502:	02 c0       	rjmp	.+4      	; 0x2508 <DIO_voidSetPinDirection+0x126>
    2504:	88 0f       	add	r24, r24
    2506:	99 1f       	adc	r25, r25
    2508:	0a 94       	dec	r0
    250a:	e2 f7       	brpl	.-8      	; 0x2504 <DIO_voidSetPinDirection+0x122>
    250c:	80 95       	com	r24
    250e:	84 23       	and	r24, r20
    2510:	8c 93       	st	X, r24
    2512:	6e c0       	rjmp	.+220    	; 0x25f0 <DIO_voidSetPinDirection+0x20e>
                                default    :                                                break;
                            }
                            break;
            case DIO_OUTPUT :   switch(Copy_u8PortNumber)
    2514:	89 81       	ldd	r24, Y+1	; 0x01
    2516:	28 2f       	mov	r18, r24
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	3d 83       	std	Y+5, r19	; 0x05
    251c:	2c 83       	std	Y+4, r18	; 0x04
    251e:	8c 81       	ldd	r24, Y+4	; 0x04
    2520:	9d 81       	ldd	r25, Y+5	; 0x05
    2522:	81 30       	cpi	r24, 0x01	; 1
    2524:	91 05       	cpc	r25, r1
    2526:	49 f1       	breq	.+82     	; 0x257a <DIO_voidSetPinDirection+0x198>
    2528:	2c 81       	ldd	r18, Y+4	; 0x04
    252a:	3d 81       	ldd	r19, Y+5	; 0x05
    252c:	22 30       	cpi	r18, 0x02	; 2
    252e:	31 05       	cpc	r19, r1
    2530:	2c f4       	brge	.+10     	; 0x253c <DIO_voidSetPinDirection+0x15a>
    2532:	8c 81       	ldd	r24, Y+4	; 0x04
    2534:	9d 81       	ldd	r25, Y+5	; 0x05
    2536:	00 97       	sbiw	r24, 0x00	; 0
    2538:	61 f0       	breq	.+24     	; 0x2552 <DIO_voidSetPinDirection+0x170>
    253a:	5a c0       	rjmp	.+180    	; 0x25f0 <DIO_voidSetPinDirection+0x20e>
    253c:	2c 81       	ldd	r18, Y+4	; 0x04
    253e:	3d 81       	ldd	r19, Y+5	; 0x05
    2540:	22 30       	cpi	r18, 0x02	; 2
    2542:	31 05       	cpc	r19, r1
    2544:	71 f1       	breq	.+92     	; 0x25a2 <DIO_voidSetPinDirection+0x1c0>
    2546:	8c 81       	ldd	r24, Y+4	; 0x04
    2548:	9d 81       	ldd	r25, Y+5	; 0x05
    254a:	83 30       	cpi	r24, 0x03	; 3
    254c:	91 05       	cpc	r25, r1
    254e:	e9 f1       	breq	.+122    	; 0x25ca <DIO_voidSetPinDirection+0x1e8>
    2550:	4f c0       	rjmp	.+158    	; 0x25f0 <DIO_voidSetPinDirection+0x20e>
                            {
                                case DIO_PORTA :    SET_BIT( DDRA_REG ,Copy_u8PinNumber );      break;
    2552:	aa e3       	ldi	r26, 0x3A	; 58
    2554:	b0 e0       	ldi	r27, 0x00	; 0
    2556:	ea e3       	ldi	r30, 0x3A	; 58
    2558:	f0 e0       	ldi	r31, 0x00	; 0
    255a:	80 81       	ld	r24, Z
    255c:	48 2f       	mov	r20, r24
    255e:	8a 81       	ldd	r24, Y+2	; 0x02
    2560:	28 2f       	mov	r18, r24
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	81 e0       	ldi	r24, 0x01	; 1
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	02 2e       	mov	r0, r18
    256a:	02 c0       	rjmp	.+4      	; 0x2570 <DIO_voidSetPinDirection+0x18e>
    256c:	88 0f       	add	r24, r24
    256e:	99 1f       	adc	r25, r25
    2570:	0a 94       	dec	r0
    2572:	e2 f7       	brpl	.-8      	; 0x256c <DIO_voidSetPinDirection+0x18a>
    2574:	84 2b       	or	r24, r20
    2576:	8c 93       	st	X, r24
    2578:	3b c0       	rjmp	.+118    	; 0x25f0 <DIO_voidSetPinDirection+0x20e>
                                case DIO_PORTB :    SET_BIT( DDRB_REG ,Copy_u8PinNumber );      break;
    257a:	a7 e3       	ldi	r26, 0x37	; 55
    257c:	b0 e0       	ldi	r27, 0x00	; 0
    257e:	e7 e3       	ldi	r30, 0x37	; 55
    2580:	f0 e0       	ldi	r31, 0x00	; 0
    2582:	80 81       	ld	r24, Z
    2584:	48 2f       	mov	r20, r24
    2586:	8a 81       	ldd	r24, Y+2	; 0x02
    2588:	28 2f       	mov	r18, r24
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	81 e0       	ldi	r24, 0x01	; 1
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	02 2e       	mov	r0, r18
    2592:	02 c0       	rjmp	.+4      	; 0x2598 <DIO_voidSetPinDirection+0x1b6>
    2594:	88 0f       	add	r24, r24
    2596:	99 1f       	adc	r25, r25
    2598:	0a 94       	dec	r0
    259a:	e2 f7       	brpl	.-8      	; 0x2594 <DIO_voidSetPinDirection+0x1b2>
    259c:	84 2b       	or	r24, r20
    259e:	8c 93       	st	X, r24
    25a0:	27 c0       	rjmp	.+78     	; 0x25f0 <DIO_voidSetPinDirection+0x20e>
                                case DIO_PORTC :    SET_BIT( DDRC_REG ,Copy_u8PinNumber );      break;
    25a2:	a4 e3       	ldi	r26, 0x34	; 52
    25a4:	b0 e0       	ldi	r27, 0x00	; 0
    25a6:	e4 e3       	ldi	r30, 0x34	; 52
    25a8:	f0 e0       	ldi	r31, 0x00	; 0
    25aa:	80 81       	ld	r24, Z
    25ac:	48 2f       	mov	r20, r24
    25ae:	8a 81       	ldd	r24, Y+2	; 0x02
    25b0:	28 2f       	mov	r18, r24
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	02 2e       	mov	r0, r18
    25ba:	02 c0       	rjmp	.+4      	; 0x25c0 <DIO_voidSetPinDirection+0x1de>
    25bc:	88 0f       	add	r24, r24
    25be:	99 1f       	adc	r25, r25
    25c0:	0a 94       	dec	r0
    25c2:	e2 f7       	brpl	.-8      	; 0x25bc <DIO_voidSetPinDirection+0x1da>
    25c4:	84 2b       	or	r24, r20
    25c6:	8c 93       	st	X, r24
    25c8:	13 c0       	rjmp	.+38     	; 0x25f0 <DIO_voidSetPinDirection+0x20e>
                                case DIO_PORTD :    SET_BIT( DDRD_REG ,Copy_u8PinNumber );      break;
    25ca:	a1 e3       	ldi	r26, 0x31	; 49
    25cc:	b0 e0       	ldi	r27, 0x00	; 0
    25ce:	e1 e3       	ldi	r30, 0x31	; 49
    25d0:	f0 e0       	ldi	r31, 0x00	; 0
    25d2:	80 81       	ld	r24, Z
    25d4:	48 2f       	mov	r20, r24
    25d6:	8a 81       	ldd	r24, Y+2	; 0x02
    25d8:	28 2f       	mov	r18, r24
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	81 e0       	ldi	r24, 0x01	; 1
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	02 2e       	mov	r0, r18
    25e2:	02 c0       	rjmp	.+4      	; 0x25e8 <DIO_voidSetPinDirection+0x206>
    25e4:	88 0f       	add	r24, r24
    25e6:	99 1f       	adc	r25, r25
    25e8:	0a 94       	dec	r0
    25ea:	e2 f7       	brpl	.-8      	; 0x25e4 <DIO_voidSetPinDirection+0x202>
    25ec:	84 2b       	or	r24, r20
    25ee:	8c 93       	st	X, r24
                            break;
            default :       break;
                            
        }
    }
}
    25f0:	29 96       	adiw	r28, 0x09	; 9
    25f2:	0f b6       	in	r0, 0x3f	; 63
    25f4:	f8 94       	cli
    25f6:	de bf       	out	0x3e, r29	; 62
    25f8:	0f be       	out	0x3f, r0	; 63
    25fa:	cd bf       	out	0x3d, r28	; 61
    25fc:	cf 91       	pop	r28
    25fe:	df 91       	pop	r29
    2600:	08 95       	ret

00002602 <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection (u8 Copy_u8PortNumber, u8 Copy_u8Direction )
{
    2602:	df 93       	push	r29
    2604:	cf 93       	push	r28
    2606:	cd b7       	in	r28, 0x3d	; 61
    2608:	de b7       	in	r29, 0x3e	; 62
    260a:	28 97       	sbiw	r28, 0x08	; 8
    260c:	0f b6       	in	r0, 0x3f	; 63
    260e:	f8 94       	cli
    2610:	de bf       	out	0x3e, r29	; 62
    2612:	0f be       	out	0x3f, r0	; 63
    2614:	cd bf       	out	0x3d, r28	; 61
    2616:	89 83       	std	Y+1, r24	; 0x01
    2618:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8PortNumber > DIO_PORTD )
    261a:	89 81       	ldd	r24, Y+1	; 0x01
    261c:	84 30       	cpi	r24, 0x04	; 4
    261e:	08 f0       	brcs	.+2      	; 0x2622 <DIO_voidSetPortDirection+0x20>
    2620:	70 c0       	rjmp	.+224    	; 0x2702 <DIO_voidSetPortDirection+0x100>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8Direction)
    2622:	8a 81       	ldd	r24, Y+2	; 0x02
    2624:	28 2f       	mov	r18, r24
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	38 87       	std	Y+8, r19	; 0x08
    262a:	2f 83       	std	Y+7, r18	; 0x07
    262c:	8f 81       	ldd	r24, Y+7	; 0x07
    262e:	98 85       	ldd	r25, Y+8	; 0x08
    2630:	00 97       	sbiw	r24, 0x00	; 0
    2632:	31 f0       	breq	.+12     	; 0x2640 <DIO_voidSetPortDirection+0x3e>
    2634:	2f 81       	ldd	r18, Y+7	; 0x07
    2636:	38 85       	ldd	r19, Y+8	; 0x08
    2638:	21 30       	cpi	r18, 0x01	; 1
    263a:	31 05       	cpc	r19, r1
    263c:	81 f1       	breq	.+96     	; 0x269e <DIO_voidSetPortDirection+0x9c>
    263e:	61 c0       	rjmp	.+194    	; 0x2702 <DIO_voidSetPortDirection+0x100>
        {
            case DIO_INPUT :    switch(Copy_u8PortNumber)
    2640:	89 81       	ldd	r24, Y+1	; 0x01
    2642:	28 2f       	mov	r18, r24
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	3e 83       	std	Y+6, r19	; 0x06
    2648:	2d 83       	std	Y+5, r18	; 0x05
    264a:	8d 81       	ldd	r24, Y+5	; 0x05
    264c:	9e 81       	ldd	r25, Y+6	; 0x06
    264e:	81 30       	cpi	r24, 0x01	; 1
    2650:	91 05       	cpc	r25, r1
    2652:	c9 f0       	breq	.+50     	; 0x2686 <DIO_voidSetPortDirection+0x84>
    2654:	2d 81       	ldd	r18, Y+5	; 0x05
    2656:	3e 81       	ldd	r19, Y+6	; 0x06
    2658:	22 30       	cpi	r18, 0x02	; 2
    265a:	31 05       	cpc	r19, r1
    265c:	2c f4       	brge	.+10     	; 0x2668 <DIO_voidSetPortDirection+0x66>
    265e:	8d 81       	ldd	r24, Y+5	; 0x05
    2660:	9e 81       	ldd	r25, Y+6	; 0x06
    2662:	00 97       	sbiw	r24, 0x00	; 0
    2664:	61 f0       	breq	.+24     	; 0x267e <DIO_voidSetPortDirection+0x7c>
    2666:	4d c0       	rjmp	.+154    	; 0x2702 <DIO_voidSetPortDirection+0x100>
    2668:	2d 81       	ldd	r18, Y+5	; 0x05
    266a:	3e 81       	ldd	r19, Y+6	; 0x06
    266c:	22 30       	cpi	r18, 0x02	; 2
    266e:	31 05       	cpc	r19, r1
    2670:	71 f0       	breq	.+28     	; 0x268e <DIO_voidSetPortDirection+0x8c>
    2672:	8d 81       	ldd	r24, Y+5	; 0x05
    2674:	9e 81       	ldd	r25, Y+6	; 0x06
    2676:	83 30       	cpi	r24, 0x03	; 3
    2678:	91 05       	cpc	r25, r1
    267a:	69 f0       	breq	.+26     	; 0x2696 <DIO_voidSetPortDirection+0x94>
    267c:	42 c0       	rjmp	.+132    	; 0x2702 <DIO_voidSetPortDirection+0x100>
                            {
                                case DIO_PORTA :    DDRA_REG = 0x00 ;   break;
    267e:	ea e3       	ldi	r30, 0x3A	; 58
    2680:	f0 e0       	ldi	r31, 0x00	; 0
    2682:	10 82       	st	Z, r1
    2684:	3e c0       	rjmp	.+124    	; 0x2702 <DIO_voidSetPortDirection+0x100>
                                case DIO_PORTB :    DDRB_REG = 0x00 ;   break;
    2686:	e7 e3       	ldi	r30, 0x37	; 55
    2688:	f0 e0       	ldi	r31, 0x00	; 0
    268a:	10 82       	st	Z, r1
    268c:	3a c0       	rjmp	.+116    	; 0x2702 <DIO_voidSetPortDirection+0x100>
                                case DIO_PORTC :    DDRC_REG = 0x00 ;   break;
    268e:	e4 e3       	ldi	r30, 0x34	; 52
    2690:	f0 e0       	ldi	r31, 0x00	; 0
    2692:	10 82       	st	Z, r1
    2694:	36 c0       	rjmp	.+108    	; 0x2702 <DIO_voidSetPortDirection+0x100>
                                case DIO_PORTD :    DDRD_REG = 0x00 ;   break;
    2696:	e1 e3       	ldi	r30, 0x31	; 49
    2698:	f0 e0       	ldi	r31, 0x00	; 0
    269a:	10 82       	st	Z, r1
    269c:	32 c0       	rjmp	.+100    	; 0x2702 <DIO_voidSetPortDirection+0x100>
                                default    :                        break;
                            }
                            break;
            case DIO_OUTPUT :   switch(Copy_u8PortNumber)
    269e:	89 81       	ldd	r24, Y+1	; 0x01
    26a0:	28 2f       	mov	r18, r24
    26a2:	30 e0       	ldi	r19, 0x00	; 0
    26a4:	3c 83       	std	Y+4, r19	; 0x04
    26a6:	2b 83       	std	Y+3, r18	; 0x03
    26a8:	8b 81       	ldd	r24, Y+3	; 0x03
    26aa:	9c 81       	ldd	r25, Y+4	; 0x04
    26ac:	81 30       	cpi	r24, 0x01	; 1
    26ae:	91 05       	cpc	r25, r1
    26b0:	d1 f0       	breq	.+52     	; 0x26e6 <DIO_voidSetPortDirection+0xe4>
    26b2:	2b 81       	ldd	r18, Y+3	; 0x03
    26b4:	3c 81       	ldd	r19, Y+4	; 0x04
    26b6:	22 30       	cpi	r18, 0x02	; 2
    26b8:	31 05       	cpc	r19, r1
    26ba:	2c f4       	brge	.+10     	; 0x26c6 <DIO_voidSetPortDirection+0xc4>
    26bc:	8b 81       	ldd	r24, Y+3	; 0x03
    26be:	9c 81       	ldd	r25, Y+4	; 0x04
    26c0:	00 97       	sbiw	r24, 0x00	; 0
    26c2:	61 f0       	breq	.+24     	; 0x26dc <DIO_voidSetPortDirection+0xda>
    26c4:	1e c0       	rjmp	.+60     	; 0x2702 <DIO_voidSetPortDirection+0x100>
    26c6:	2b 81       	ldd	r18, Y+3	; 0x03
    26c8:	3c 81       	ldd	r19, Y+4	; 0x04
    26ca:	22 30       	cpi	r18, 0x02	; 2
    26cc:	31 05       	cpc	r19, r1
    26ce:	81 f0       	breq	.+32     	; 0x26f0 <DIO_voidSetPortDirection+0xee>
    26d0:	8b 81       	ldd	r24, Y+3	; 0x03
    26d2:	9c 81       	ldd	r25, Y+4	; 0x04
    26d4:	83 30       	cpi	r24, 0x03	; 3
    26d6:	91 05       	cpc	r25, r1
    26d8:	81 f0       	breq	.+32     	; 0x26fa <DIO_voidSetPortDirection+0xf8>
    26da:	13 c0       	rjmp	.+38     	; 0x2702 <DIO_voidSetPortDirection+0x100>
                            {
                                case DIO_PORTA :    DDRA_REG = 0xff ;   break;
    26dc:	ea e3       	ldi	r30, 0x3A	; 58
    26de:	f0 e0       	ldi	r31, 0x00	; 0
    26e0:	8f ef       	ldi	r24, 0xFF	; 255
    26e2:	80 83       	st	Z, r24
    26e4:	0e c0       	rjmp	.+28     	; 0x2702 <DIO_voidSetPortDirection+0x100>
                                case DIO_PORTB :    DDRB_REG = 0xff ;   break;
    26e6:	e7 e3       	ldi	r30, 0x37	; 55
    26e8:	f0 e0       	ldi	r31, 0x00	; 0
    26ea:	8f ef       	ldi	r24, 0xFF	; 255
    26ec:	80 83       	st	Z, r24
    26ee:	09 c0       	rjmp	.+18     	; 0x2702 <DIO_voidSetPortDirection+0x100>
                                case DIO_PORTC :    DDRC_REG = 0xff ;   break;
    26f0:	e4 e3       	ldi	r30, 0x34	; 52
    26f2:	f0 e0       	ldi	r31, 0x00	; 0
    26f4:	8f ef       	ldi	r24, 0xFF	; 255
    26f6:	80 83       	st	Z, r24
    26f8:	04 c0       	rjmp	.+8      	; 0x2702 <DIO_voidSetPortDirection+0x100>
                                case DIO_PORTD :    DDRD_REG = 0xff ;   break;
    26fa:	e1 e3       	ldi	r30, 0x31	; 49
    26fc:	f0 e0       	ldi	r31, 0x00	; 0
    26fe:	8f ef       	ldi	r24, 0xFF	; 255
    2700:	80 83       	st	Z, r24
                            break;
            default :       break;
                            
        }
    }
}
    2702:	28 96       	adiw	r28, 0x08	; 8
    2704:	0f b6       	in	r0, 0x3f	; 63
    2706:	f8 94       	cli
    2708:	de bf       	out	0x3e, r29	; 62
    270a:	0f be       	out	0x3f, r0	; 63
    270c:	cd bf       	out	0x3d, r28	; 61
    270e:	cf 91       	pop	r28
    2710:	df 91       	pop	r29
    2712:	08 95       	ret

00002714 <DIO_voidSetPinValue>:


void DIO_voidSetPinValue (u8 Copy_u8PortNumber, u8 Copy_u8PinNumber, u8 Copy_u8Value )
{
    2714:	df 93       	push	r29
    2716:	cf 93       	push	r28
    2718:	cd b7       	in	r28, 0x3d	; 61
    271a:	de b7       	in	r29, 0x3e	; 62
    271c:	29 97       	sbiw	r28, 0x09	; 9
    271e:	0f b6       	in	r0, 0x3f	; 63
    2720:	f8 94       	cli
    2722:	de bf       	out	0x3e, r29	; 62
    2724:	0f be       	out	0x3f, r0	; 63
    2726:	cd bf       	out	0x3d, r28	; 61
    2728:	89 83       	std	Y+1, r24	; 0x01
    272a:	6a 83       	std	Y+2, r22	; 0x02
    272c:	4b 83       	std	Y+3, r20	; 0x03
        /* i/p validation */
    if ( Copy_u8PortNumber > DIO_PORTD || Copy_u8PinNumber > DIO_PIN7 )
    272e:	89 81       	ldd	r24, Y+1	; 0x01
    2730:	84 30       	cpi	r24, 0x04	; 4
    2732:	08 f0       	brcs	.+2      	; 0x2736 <DIO_voidSetPinValue+0x22>
    2734:	f6 c0       	rjmp	.+492    	; 0x2922 <DIO_voidSetPinValue+0x20e>
    2736:	8a 81       	ldd	r24, Y+2	; 0x02
    2738:	88 30       	cpi	r24, 0x08	; 8
    273a:	08 f0       	brcs	.+2      	; 0x273e <DIO_voidSetPinValue+0x2a>
    273c:	f2 c0       	rjmp	.+484    	; 0x2922 <DIO_voidSetPinValue+0x20e>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8Value)
    273e:	8b 81       	ldd	r24, Y+3	; 0x03
    2740:	28 2f       	mov	r18, r24
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	39 87       	std	Y+9, r19	; 0x09
    2746:	28 87       	std	Y+8, r18	; 0x08
    2748:	88 85       	ldd	r24, Y+8	; 0x08
    274a:	99 85       	ldd	r25, Y+9	; 0x09
    274c:	00 97       	sbiw	r24, 0x00	; 0
    274e:	39 f0       	breq	.+14     	; 0x275e <DIO_voidSetPinValue+0x4a>
    2750:	28 85       	ldd	r18, Y+8	; 0x08
    2752:	39 85       	ldd	r19, Y+9	; 0x09
    2754:	21 30       	cpi	r18, 0x01	; 1
    2756:	31 05       	cpc	r19, r1
    2758:	09 f4       	brne	.+2      	; 0x275c <DIO_voidSetPinValue+0x48>
    275a:	75 c0       	rjmp	.+234    	; 0x2846 <DIO_voidSetPinValue+0x132>
    275c:	e2 c0       	rjmp	.+452    	; 0x2922 <DIO_voidSetPinValue+0x20e>
        {
            case DIO_LOW :    switch(Copy_u8PortNumber)
    275e:	89 81       	ldd	r24, Y+1	; 0x01
    2760:	28 2f       	mov	r18, r24
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	3f 83       	std	Y+7, r19	; 0x07
    2766:	2e 83       	std	Y+6, r18	; 0x06
    2768:	8e 81       	ldd	r24, Y+6	; 0x06
    276a:	9f 81       	ldd	r25, Y+7	; 0x07
    276c:	81 30       	cpi	r24, 0x01	; 1
    276e:	91 05       	cpc	r25, r1
    2770:	59 f1       	breq	.+86     	; 0x27c8 <DIO_voidSetPinValue+0xb4>
    2772:	2e 81       	ldd	r18, Y+6	; 0x06
    2774:	3f 81       	ldd	r19, Y+7	; 0x07
    2776:	22 30       	cpi	r18, 0x02	; 2
    2778:	31 05       	cpc	r19, r1
    277a:	2c f4       	brge	.+10     	; 0x2786 <DIO_voidSetPinValue+0x72>
    277c:	8e 81       	ldd	r24, Y+6	; 0x06
    277e:	9f 81       	ldd	r25, Y+7	; 0x07
    2780:	00 97       	sbiw	r24, 0x00	; 0
    2782:	69 f0       	breq	.+26     	; 0x279e <DIO_voidSetPinValue+0x8a>
    2784:	ce c0       	rjmp	.+412    	; 0x2922 <DIO_voidSetPinValue+0x20e>
    2786:	2e 81       	ldd	r18, Y+6	; 0x06
    2788:	3f 81       	ldd	r19, Y+7	; 0x07
    278a:	22 30       	cpi	r18, 0x02	; 2
    278c:	31 05       	cpc	r19, r1
    278e:	89 f1       	breq	.+98     	; 0x27f2 <DIO_voidSetPinValue+0xde>
    2790:	8e 81       	ldd	r24, Y+6	; 0x06
    2792:	9f 81       	ldd	r25, Y+7	; 0x07
    2794:	83 30       	cpi	r24, 0x03	; 3
    2796:	91 05       	cpc	r25, r1
    2798:	09 f4       	brne	.+2      	; 0x279c <DIO_voidSetPinValue+0x88>
    279a:	40 c0       	rjmp	.+128    	; 0x281c <DIO_voidSetPinValue+0x108>
    279c:	c2 c0       	rjmp	.+388    	; 0x2922 <DIO_voidSetPinValue+0x20e>
                            {
                                case DIO_PORTA :    CLR_BIT( PORTA_REG ,Copy_u8PinNumber );   break;
    279e:	ab e3       	ldi	r26, 0x3B	; 59
    27a0:	b0 e0       	ldi	r27, 0x00	; 0
    27a2:	eb e3       	ldi	r30, 0x3B	; 59
    27a4:	f0 e0       	ldi	r31, 0x00	; 0
    27a6:	80 81       	ld	r24, Z
    27a8:	48 2f       	mov	r20, r24
    27aa:	8a 81       	ldd	r24, Y+2	; 0x02
    27ac:	28 2f       	mov	r18, r24
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	02 2e       	mov	r0, r18
    27b6:	02 c0       	rjmp	.+4      	; 0x27bc <DIO_voidSetPinValue+0xa8>
    27b8:	88 0f       	add	r24, r24
    27ba:	99 1f       	adc	r25, r25
    27bc:	0a 94       	dec	r0
    27be:	e2 f7       	brpl	.-8      	; 0x27b8 <DIO_voidSetPinValue+0xa4>
    27c0:	80 95       	com	r24
    27c2:	84 23       	and	r24, r20
    27c4:	8c 93       	st	X, r24
    27c6:	ad c0       	rjmp	.+346    	; 0x2922 <DIO_voidSetPinValue+0x20e>
                                case DIO_PORTB :    CLR_BIT( PORTB_REG ,Copy_u8PinNumber );   break;
    27c8:	a8 e3       	ldi	r26, 0x38	; 56
    27ca:	b0 e0       	ldi	r27, 0x00	; 0
    27cc:	e8 e3       	ldi	r30, 0x38	; 56
    27ce:	f0 e0       	ldi	r31, 0x00	; 0
    27d0:	80 81       	ld	r24, Z
    27d2:	48 2f       	mov	r20, r24
    27d4:	8a 81       	ldd	r24, Y+2	; 0x02
    27d6:	28 2f       	mov	r18, r24
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	81 e0       	ldi	r24, 0x01	; 1
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	02 2e       	mov	r0, r18
    27e0:	02 c0       	rjmp	.+4      	; 0x27e6 <DIO_voidSetPinValue+0xd2>
    27e2:	88 0f       	add	r24, r24
    27e4:	99 1f       	adc	r25, r25
    27e6:	0a 94       	dec	r0
    27e8:	e2 f7       	brpl	.-8      	; 0x27e2 <DIO_voidSetPinValue+0xce>
    27ea:	80 95       	com	r24
    27ec:	84 23       	and	r24, r20
    27ee:	8c 93       	st	X, r24
    27f0:	98 c0       	rjmp	.+304    	; 0x2922 <DIO_voidSetPinValue+0x20e>
                                case DIO_PORTC :    CLR_BIT( PORTC_REG ,Copy_u8PinNumber );   break;
    27f2:	a5 e3       	ldi	r26, 0x35	; 53
    27f4:	b0 e0       	ldi	r27, 0x00	; 0
    27f6:	e5 e3       	ldi	r30, 0x35	; 53
    27f8:	f0 e0       	ldi	r31, 0x00	; 0
    27fa:	80 81       	ld	r24, Z
    27fc:	48 2f       	mov	r20, r24
    27fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2800:	28 2f       	mov	r18, r24
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	02 2e       	mov	r0, r18
    280a:	02 c0       	rjmp	.+4      	; 0x2810 <DIO_voidSetPinValue+0xfc>
    280c:	88 0f       	add	r24, r24
    280e:	99 1f       	adc	r25, r25
    2810:	0a 94       	dec	r0
    2812:	e2 f7       	brpl	.-8      	; 0x280c <DIO_voidSetPinValue+0xf8>
    2814:	80 95       	com	r24
    2816:	84 23       	and	r24, r20
    2818:	8c 93       	st	X, r24
    281a:	83 c0       	rjmp	.+262    	; 0x2922 <DIO_voidSetPinValue+0x20e>
                                case DIO_PORTD :    CLR_BIT( PORTD_REG ,Copy_u8PinNumber );   break;
    281c:	a2 e3       	ldi	r26, 0x32	; 50
    281e:	b0 e0       	ldi	r27, 0x00	; 0
    2820:	e2 e3       	ldi	r30, 0x32	; 50
    2822:	f0 e0       	ldi	r31, 0x00	; 0
    2824:	80 81       	ld	r24, Z
    2826:	48 2f       	mov	r20, r24
    2828:	8a 81       	ldd	r24, Y+2	; 0x02
    282a:	28 2f       	mov	r18, r24
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	81 e0       	ldi	r24, 0x01	; 1
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	02 2e       	mov	r0, r18
    2834:	02 c0       	rjmp	.+4      	; 0x283a <DIO_voidSetPinValue+0x126>
    2836:	88 0f       	add	r24, r24
    2838:	99 1f       	adc	r25, r25
    283a:	0a 94       	dec	r0
    283c:	e2 f7       	brpl	.-8      	; 0x2836 <DIO_voidSetPinValue+0x122>
    283e:	80 95       	com	r24
    2840:	84 23       	and	r24, r20
    2842:	8c 93       	st	X, r24
    2844:	6e c0       	rjmp	.+220    	; 0x2922 <DIO_voidSetPinValue+0x20e>
                                default    :                                                break; 
                            }
                            break;
            case DIO_HIGH :   switch(Copy_u8PortNumber)
    2846:	89 81       	ldd	r24, Y+1	; 0x01
    2848:	28 2f       	mov	r18, r24
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	3d 83       	std	Y+5, r19	; 0x05
    284e:	2c 83       	std	Y+4, r18	; 0x04
    2850:	8c 81       	ldd	r24, Y+4	; 0x04
    2852:	9d 81       	ldd	r25, Y+5	; 0x05
    2854:	81 30       	cpi	r24, 0x01	; 1
    2856:	91 05       	cpc	r25, r1
    2858:	49 f1       	breq	.+82     	; 0x28ac <DIO_voidSetPinValue+0x198>
    285a:	2c 81       	ldd	r18, Y+4	; 0x04
    285c:	3d 81       	ldd	r19, Y+5	; 0x05
    285e:	22 30       	cpi	r18, 0x02	; 2
    2860:	31 05       	cpc	r19, r1
    2862:	2c f4       	brge	.+10     	; 0x286e <DIO_voidSetPinValue+0x15a>
    2864:	8c 81       	ldd	r24, Y+4	; 0x04
    2866:	9d 81       	ldd	r25, Y+5	; 0x05
    2868:	00 97       	sbiw	r24, 0x00	; 0
    286a:	61 f0       	breq	.+24     	; 0x2884 <DIO_voidSetPinValue+0x170>
    286c:	5a c0       	rjmp	.+180    	; 0x2922 <DIO_voidSetPinValue+0x20e>
    286e:	2c 81       	ldd	r18, Y+4	; 0x04
    2870:	3d 81       	ldd	r19, Y+5	; 0x05
    2872:	22 30       	cpi	r18, 0x02	; 2
    2874:	31 05       	cpc	r19, r1
    2876:	71 f1       	breq	.+92     	; 0x28d4 <DIO_voidSetPinValue+0x1c0>
    2878:	8c 81       	ldd	r24, Y+4	; 0x04
    287a:	9d 81       	ldd	r25, Y+5	; 0x05
    287c:	83 30       	cpi	r24, 0x03	; 3
    287e:	91 05       	cpc	r25, r1
    2880:	e9 f1       	breq	.+122    	; 0x28fc <DIO_voidSetPinValue+0x1e8>
    2882:	4f c0       	rjmp	.+158    	; 0x2922 <DIO_voidSetPinValue+0x20e>
                            {
                                case DIO_PORTA :    SET_BIT( PORTA_REG ,Copy_u8PinNumber );     break;
    2884:	ab e3       	ldi	r26, 0x3B	; 59
    2886:	b0 e0       	ldi	r27, 0x00	; 0
    2888:	eb e3       	ldi	r30, 0x3B	; 59
    288a:	f0 e0       	ldi	r31, 0x00	; 0
    288c:	80 81       	ld	r24, Z
    288e:	48 2f       	mov	r20, r24
    2890:	8a 81       	ldd	r24, Y+2	; 0x02
    2892:	28 2f       	mov	r18, r24
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	81 e0       	ldi	r24, 0x01	; 1
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	02 2e       	mov	r0, r18
    289c:	02 c0       	rjmp	.+4      	; 0x28a2 <DIO_voidSetPinValue+0x18e>
    289e:	88 0f       	add	r24, r24
    28a0:	99 1f       	adc	r25, r25
    28a2:	0a 94       	dec	r0
    28a4:	e2 f7       	brpl	.-8      	; 0x289e <DIO_voidSetPinValue+0x18a>
    28a6:	84 2b       	or	r24, r20
    28a8:	8c 93       	st	X, r24
    28aa:	3b c0       	rjmp	.+118    	; 0x2922 <DIO_voidSetPinValue+0x20e>
                                case DIO_PORTB :    SET_BIT( PORTB_REG ,Copy_u8PinNumber );     break;
    28ac:	a8 e3       	ldi	r26, 0x38	; 56
    28ae:	b0 e0       	ldi	r27, 0x00	; 0
    28b0:	e8 e3       	ldi	r30, 0x38	; 56
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	80 81       	ld	r24, Z
    28b6:	48 2f       	mov	r20, r24
    28b8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ba:	28 2f       	mov	r18, r24
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	81 e0       	ldi	r24, 0x01	; 1
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	02 2e       	mov	r0, r18
    28c4:	02 c0       	rjmp	.+4      	; 0x28ca <DIO_voidSetPinValue+0x1b6>
    28c6:	88 0f       	add	r24, r24
    28c8:	99 1f       	adc	r25, r25
    28ca:	0a 94       	dec	r0
    28cc:	e2 f7       	brpl	.-8      	; 0x28c6 <DIO_voidSetPinValue+0x1b2>
    28ce:	84 2b       	or	r24, r20
    28d0:	8c 93       	st	X, r24
    28d2:	27 c0       	rjmp	.+78     	; 0x2922 <DIO_voidSetPinValue+0x20e>
                                case DIO_PORTC :    SET_BIT( PORTC_REG ,Copy_u8PinNumber );     break;
    28d4:	a5 e3       	ldi	r26, 0x35	; 53
    28d6:	b0 e0       	ldi	r27, 0x00	; 0
    28d8:	e5 e3       	ldi	r30, 0x35	; 53
    28da:	f0 e0       	ldi	r31, 0x00	; 0
    28dc:	80 81       	ld	r24, Z
    28de:	48 2f       	mov	r20, r24
    28e0:	8a 81       	ldd	r24, Y+2	; 0x02
    28e2:	28 2f       	mov	r18, r24
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	02 2e       	mov	r0, r18
    28ec:	02 c0       	rjmp	.+4      	; 0x28f2 <DIO_voidSetPinValue+0x1de>
    28ee:	88 0f       	add	r24, r24
    28f0:	99 1f       	adc	r25, r25
    28f2:	0a 94       	dec	r0
    28f4:	e2 f7       	brpl	.-8      	; 0x28ee <DIO_voidSetPinValue+0x1da>
    28f6:	84 2b       	or	r24, r20
    28f8:	8c 93       	st	X, r24
    28fa:	13 c0       	rjmp	.+38     	; 0x2922 <DIO_voidSetPinValue+0x20e>
                                case DIO_PORTD :    SET_BIT( PORTD_REG ,Copy_u8PinNumber );     break;
    28fc:	a2 e3       	ldi	r26, 0x32	; 50
    28fe:	b0 e0       	ldi	r27, 0x00	; 0
    2900:	e2 e3       	ldi	r30, 0x32	; 50
    2902:	f0 e0       	ldi	r31, 0x00	; 0
    2904:	80 81       	ld	r24, Z
    2906:	48 2f       	mov	r20, r24
    2908:	8a 81       	ldd	r24, Y+2	; 0x02
    290a:	28 2f       	mov	r18, r24
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	81 e0       	ldi	r24, 0x01	; 1
    2910:	90 e0       	ldi	r25, 0x00	; 0
    2912:	02 2e       	mov	r0, r18
    2914:	02 c0       	rjmp	.+4      	; 0x291a <DIO_voidSetPinValue+0x206>
    2916:	88 0f       	add	r24, r24
    2918:	99 1f       	adc	r25, r25
    291a:	0a 94       	dec	r0
    291c:	e2 f7       	brpl	.-8      	; 0x2916 <DIO_voidSetPinValue+0x202>
    291e:	84 2b       	or	r24, r20
    2920:	8c 93       	st	X, r24
                            break;
            default :       break;
                            
        }
    }
}
    2922:	29 96       	adiw	r28, 0x09	; 9
    2924:	0f b6       	in	r0, 0x3f	; 63
    2926:	f8 94       	cli
    2928:	de bf       	out	0x3e, r29	; 62
    292a:	0f be       	out	0x3f, r0	; 63
    292c:	cd bf       	out	0x3d, r28	; 61
    292e:	cf 91       	pop	r28
    2930:	df 91       	pop	r29
    2932:	08 95       	ret

00002934 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue (u8 Copy_u8PortNumber, u8 Copy_u8Value )
{
    2934:	df 93       	push	r29
    2936:	cf 93       	push	r28
    2938:	00 d0       	rcall	.+0      	; 0x293a <DIO_voidSetPortValue+0x6>
    293a:	00 d0       	rcall	.+0      	; 0x293c <DIO_voidSetPortValue+0x8>
    293c:	cd b7       	in	r28, 0x3d	; 61
    293e:	de b7       	in	r29, 0x3e	; 62
    2940:	89 83       	std	Y+1, r24	; 0x01
    2942:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8PortNumber > DIO_PORTD )
    2944:	89 81       	ldd	r24, Y+1	; 0x01
    2946:	84 30       	cpi	r24, 0x04	; 4
    2948:	90 f5       	brcc	.+100    	; 0x29ae <DIO_voidSetPortValue+0x7a>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8PortNumber)
    294a:	89 81       	ldd	r24, Y+1	; 0x01
    294c:	28 2f       	mov	r18, r24
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	3c 83       	std	Y+4, r19	; 0x04
    2952:	2b 83       	std	Y+3, r18	; 0x03
    2954:	8b 81       	ldd	r24, Y+3	; 0x03
    2956:	9c 81       	ldd	r25, Y+4	; 0x04
    2958:	81 30       	cpi	r24, 0x01	; 1
    295a:	91 05       	cpc	r25, r1
    295c:	d1 f0       	breq	.+52     	; 0x2992 <DIO_voidSetPortValue+0x5e>
    295e:	2b 81       	ldd	r18, Y+3	; 0x03
    2960:	3c 81       	ldd	r19, Y+4	; 0x04
    2962:	22 30       	cpi	r18, 0x02	; 2
    2964:	31 05       	cpc	r19, r1
    2966:	2c f4       	brge	.+10     	; 0x2972 <DIO_voidSetPortValue+0x3e>
    2968:	8b 81       	ldd	r24, Y+3	; 0x03
    296a:	9c 81       	ldd	r25, Y+4	; 0x04
    296c:	00 97       	sbiw	r24, 0x00	; 0
    296e:	61 f0       	breq	.+24     	; 0x2988 <DIO_voidSetPortValue+0x54>
    2970:	1e c0       	rjmp	.+60     	; 0x29ae <DIO_voidSetPortValue+0x7a>
    2972:	2b 81       	ldd	r18, Y+3	; 0x03
    2974:	3c 81       	ldd	r19, Y+4	; 0x04
    2976:	22 30       	cpi	r18, 0x02	; 2
    2978:	31 05       	cpc	r19, r1
    297a:	81 f0       	breq	.+32     	; 0x299c <DIO_voidSetPortValue+0x68>
    297c:	8b 81       	ldd	r24, Y+3	; 0x03
    297e:	9c 81       	ldd	r25, Y+4	; 0x04
    2980:	83 30       	cpi	r24, 0x03	; 3
    2982:	91 05       	cpc	r25, r1
    2984:	81 f0       	breq	.+32     	; 0x29a6 <DIO_voidSetPortValue+0x72>
    2986:	13 c0       	rjmp	.+38     	; 0x29ae <DIO_voidSetPortValue+0x7a>
        {
            case DIO_PORTA: PORTA_REG = Copy_u8Value;
    2988:	eb e3       	ldi	r30, 0x3B	; 59
    298a:	f0 e0       	ldi	r31, 0x00	; 0
    298c:	8a 81       	ldd	r24, Y+2	; 0x02
    298e:	80 83       	st	Z, r24
    2990:	0e c0       	rjmp	.+28     	; 0x29ae <DIO_voidSetPortValue+0x7a>
                        break;
    
            case DIO_PORTB: PORTB_REG = Copy_u8Value;
    2992:	e8 e3       	ldi	r30, 0x38	; 56
    2994:	f0 e0       	ldi	r31, 0x00	; 0
    2996:	8a 81       	ldd	r24, Y+2	; 0x02
    2998:	80 83       	st	Z, r24
    299a:	09 c0       	rjmp	.+18     	; 0x29ae <DIO_voidSetPortValue+0x7a>
                        break;
    
            case DIO_PORTC: PORTC_REG = Copy_u8Value;
    299c:	e5 e3       	ldi	r30, 0x35	; 53
    299e:	f0 e0       	ldi	r31, 0x00	; 0
    29a0:	8a 81       	ldd	r24, Y+2	; 0x02
    29a2:	80 83       	st	Z, r24
    29a4:	04 c0       	rjmp	.+8      	; 0x29ae <DIO_voidSetPortValue+0x7a>
                        break;
    
            case DIO_PORTD: PORTD_REG = Copy_u8Value;
    29a6:	e2 e3       	ldi	r30, 0x32	; 50
    29a8:	f0 e0       	ldi	r31, 0x00	; 0
    29aa:	8a 81       	ldd	r24, Y+2	; 0x02
    29ac:	80 83       	st	Z, r24
                        break;
            default:
                        break;
        }
    }
}
    29ae:	0f 90       	pop	r0
    29b0:	0f 90       	pop	r0
    29b2:	0f 90       	pop	r0
    29b4:	0f 90       	pop	r0
    29b6:	cf 91       	pop	r28
    29b8:	df 91       	pop	r29
    29ba:	08 95       	ret

000029bc <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue (u8 Copy_u8PortNumber, u8 Copy_u8PinNumber )
{
    29bc:	df 93       	push	r29
    29be:	cf 93       	push	r28
    29c0:	00 d0       	rcall	.+0      	; 0x29c2 <DIO_u8GetPinValue+0x6>
    29c2:	00 d0       	rcall	.+0      	; 0x29c4 <DIO_u8GetPinValue+0x8>
    29c4:	0f 92       	push	r0
    29c6:	cd b7       	in	r28, 0x3d	; 61
    29c8:	de b7       	in	r29, 0x3e	; 62
    29ca:	8a 83       	std	Y+2, r24	; 0x02
    29cc:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8Variable;
    /* i/p validation */
    if ( Copy_u8PortNumber > DIO_PORTD || Copy_u8PinNumber > DIO_PIN7 )
    29ce:	8a 81       	ldd	r24, Y+2	; 0x02
    29d0:	84 30       	cpi	r24, 0x04	; 4
    29d2:	08 f0       	brcs	.+2      	; 0x29d6 <DIO_u8GetPinValue+0x1a>
    29d4:	6a c0       	rjmp	.+212    	; 0x2aaa <DIO_u8GetPinValue+0xee>
    29d6:	8b 81       	ldd	r24, Y+3	; 0x03
    29d8:	88 30       	cpi	r24, 0x08	; 8
    29da:	08 f0       	brcs	.+2      	; 0x29de <DIO_u8GetPinValue+0x22>
    29dc:	66 c0       	rjmp	.+204    	; 0x2aaa <DIO_u8GetPinValue+0xee>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8PortNumber)
    29de:	8a 81       	ldd	r24, Y+2	; 0x02
    29e0:	28 2f       	mov	r18, r24
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	3d 83       	std	Y+5, r19	; 0x05
    29e6:	2c 83       	std	Y+4, r18	; 0x04
    29e8:	8c 81       	ldd	r24, Y+4	; 0x04
    29ea:	9d 81       	ldd	r25, Y+5	; 0x05
    29ec:	81 30       	cpi	r24, 0x01	; 1
    29ee:	91 05       	cpc	r25, r1
    29f0:	39 f1       	breq	.+78     	; 0x2a40 <DIO_u8GetPinValue+0x84>
    29f2:	2c 81       	ldd	r18, Y+4	; 0x04
    29f4:	3d 81       	ldd	r19, Y+5	; 0x05
    29f6:	22 30       	cpi	r18, 0x02	; 2
    29f8:	31 05       	cpc	r19, r1
    29fa:	2c f4       	brge	.+10     	; 0x2a06 <DIO_u8GetPinValue+0x4a>
    29fc:	8c 81       	ldd	r24, Y+4	; 0x04
    29fe:	9d 81       	ldd	r25, Y+5	; 0x05
    2a00:	00 97       	sbiw	r24, 0x00	; 0
    2a02:	61 f0       	breq	.+24     	; 0x2a1c <DIO_u8GetPinValue+0x60>
    2a04:	52 c0       	rjmp	.+164    	; 0x2aaa <DIO_u8GetPinValue+0xee>
    2a06:	2c 81       	ldd	r18, Y+4	; 0x04
    2a08:	3d 81       	ldd	r19, Y+5	; 0x05
    2a0a:	22 30       	cpi	r18, 0x02	; 2
    2a0c:	31 05       	cpc	r19, r1
    2a0e:	51 f1       	breq	.+84     	; 0x2a64 <DIO_u8GetPinValue+0xa8>
    2a10:	8c 81       	ldd	r24, Y+4	; 0x04
    2a12:	9d 81       	ldd	r25, Y+5	; 0x05
    2a14:	83 30       	cpi	r24, 0x03	; 3
    2a16:	91 05       	cpc	r25, r1
    2a18:	b9 f1       	breq	.+110    	; 0x2a88 <DIO_u8GetPinValue+0xcc>
    2a1a:	47 c0       	rjmp	.+142    	; 0x2aaa <DIO_u8GetPinValue+0xee>
        {
            case DIO_PORTA :    Local_u8Variable = GET_BIT( PINA_REG ,Copy_u8PinNumber );   break;   
    2a1c:	e9 e3       	ldi	r30, 0x39	; 57
    2a1e:	f0 e0       	ldi	r31, 0x00	; 0
    2a20:	80 81       	ld	r24, Z
    2a22:	48 2f       	mov	r20, r24
    2a24:	8b 81       	ldd	r24, Y+3	; 0x03
    2a26:	28 2f       	mov	r18, r24
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	81 e0       	ldi	r24, 0x01	; 1
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	02 2e       	mov	r0, r18
    2a30:	02 c0       	rjmp	.+4      	; 0x2a36 <DIO_u8GetPinValue+0x7a>
    2a32:	88 0f       	add	r24, r24
    2a34:	99 1f       	adc	r25, r25
    2a36:	0a 94       	dec	r0
    2a38:	e2 f7       	brpl	.-8      	; 0x2a32 <DIO_u8GetPinValue+0x76>
    2a3a:	84 23       	and	r24, r20
    2a3c:	89 83       	std	Y+1, r24	; 0x01
    2a3e:	35 c0       	rjmp	.+106    	; 0x2aaa <DIO_u8GetPinValue+0xee>
            case DIO_PORTB :    Local_u8Variable = GET_BIT( PINB_REG ,Copy_u8PinNumber );   break;
    2a40:	e6 e3       	ldi	r30, 0x36	; 54
    2a42:	f0 e0       	ldi	r31, 0x00	; 0
    2a44:	80 81       	ld	r24, Z
    2a46:	48 2f       	mov	r20, r24
    2a48:	8b 81       	ldd	r24, Y+3	; 0x03
    2a4a:	28 2f       	mov	r18, r24
    2a4c:	30 e0       	ldi	r19, 0x00	; 0
    2a4e:	81 e0       	ldi	r24, 0x01	; 1
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	02 2e       	mov	r0, r18
    2a54:	02 c0       	rjmp	.+4      	; 0x2a5a <DIO_u8GetPinValue+0x9e>
    2a56:	88 0f       	add	r24, r24
    2a58:	99 1f       	adc	r25, r25
    2a5a:	0a 94       	dec	r0
    2a5c:	e2 f7       	brpl	.-8      	; 0x2a56 <DIO_u8GetPinValue+0x9a>
    2a5e:	84 23       	and	r24, r20
    2a60:	89 83       	std	Y+1, r24	; 0x01
    2a62:	23 c0       	rjmp	.+70     	; 0x2aaa <DIO_u8GetPinValue+0xee>
            case DIO_PORTC :    Local_u8Variable = GET_BIT( PINC_REG ,Copy_u8PinNumber );   break;
    2a64:	e3 e3       	ldi	r30, 0x33	; 51
    2a66:	f0 e0       	ldi	r31, 0x00	; 0
    2a68:	80 81       	ld	r24, Z
    2a6a:	48 2f       	mov	r20, r24
    2a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6e:	28 2f       	mov	r18, r24
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	81 e0       	ldi	r24, 0x01	; 1
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	02 2e       	mov	r0, r18
    2a78:	02 c0       	rjmp	.+4      	; 0x2a7e <DIO_u8GetPinValue+0xc2>
    2a7a:	88 0f       	add	r24, r24
    2a7c:	99 1f       	adc	r25, r25
    2a7e:	0a 94       	dec	r0
    2a80:	e2 f7       	brpl	.-8      	; 0x2a7a <DIO_u8GetPinValue+0xbe>
    2a82:	84 23       	and	r24, r20
    2a84:	89 83       	std	Y+1, r24	; 0x01
    2a86:	11 c0       	rjmp	.+34     	; 0x2aaa <DIO_u8GetPinValue+0xee>
            case DIO_PORTD :    Local_u8Variable = GET_BIT( PIND_REG ,Copy_u8PinNumber );   break;
    2a88:	e0 e3       	ldi	r30, 0x30	; 48
    2a8a:	f0 e0       	ldi	r31, 0x00	; 0
    2a8c:	80 81       	ld	r24, Z
    2a8e:	48 2f       	mov	r20, r24
    2a90:	8b 81       	ldd	r24, Y+3	; 0x03
    2a92:	28 2f       	mov	r18, r24
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	81 e0       	ldi	r24, 0x01	; 1
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	02 2e       	mov	r0, r18
    2a9c:	02 c0       	rjmp	.+4      	; 0x2aa2 <DIO_u8GetPinValue+0xe6>
    2a9e:	88 0f       	add	r24, r24
    2aa0:	99 1f       	adc	r25, r25
    2aa2:	0a 94       	dec	r0
    2aa4:	e2 f7       	brpl	.-8      	; 0x2a9e <DIO_u8GetPinValue+0xe2>
    2aa6:	84 23       	and	r24, r20
    2aa8:	89 83       	std	Y+1, r24	; 0x01
            default :                                                                   break;
        }
    }
    return Local_u8Variable ;
    2aaa:	89 81       	ldd	r24, Y+1	; 0x01
}
    2aac:	0f 90       	pop	r0
    2aae:	0f 90       	pop	r0
    2ab0:	0f 90       	pop	r0
    2ab2:	0f 90       	pop	r0
    2ab4:	0f 90       	pop	r0
    2ab6:	cf 91       	pop	r28
    2ab8:	df 91       	pop	r29
    2aba:	08 95       	ret

00002abc <DIO_u8GetPortValue>:


u8 DIO_u8GetPortValue (u8 Copy_u8PortNumber )
{
    2abc:	df 93       	push	r29
    2abe:	cf 93       	push	r28
    2ac0:	00 d0       	rcall	.+0      	; 0x2ac2 <DIO_u8GetPortValue+0x6>
    2ac2:	00 d0       	rcall	.+0      	; 0x2ac4 <DIO_u8GetPortValue+0x8>
    2ac4:	cd b7       	in	r28, 0x3d	; 61
    2ac6:	de b7       	in	r29, 0x3e	; 62
    2ac8:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8Variable;
    /* i/p validation */
    if ( Copy_u8PortNumber > DIO_PORTD )
    2aca:	8a 81       	ldd	r24, Y+2	; 0x02
    2acc:	84 30       	cpi	r24, 0x04	; 4
    2ace:	90 f5       	brcc	.+100    	; 0x2b34 <DIO_u8GetPortValue+0x78>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8PortNumber)
    2ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad2:	28 2f       	mov	r18, r24
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
    2ad6:	3c 83       	std	Y+4, r19	; 0x04
    2ad8:	2b 83       	std	Y+3, r18	; 0x03
    2ada:	8b 81       	ldd	r24, Y+3	; 0x03
    2adc:	9c 81       	ldd	r25, Y+4	; 0x04
    2ade:	81 30       	cpi	r24, 0x01	; 1
    2ae0:	91 05       	cpc	r25, r1
    2ae2:	d1 f0       	breq	.+52     	; 0x2b18 <DIO_u8GetPortValue+0x5c>
    2ae4:	2b 81       	ldd	r18, Y+3	; 0x03
    2ae6:	3c 81       	ldd	r19, Y+4	; 0x04
    2ae8:	22 30       	cpi	r18, 0x02	; 2
    2aea:	31 05       	cpc	r19, r1
    2aec:	2c f4       	brge	.+10     	; 0x2af8 <DIO_u8GetPortValue+0x3c>
    2aee:	8b 81       	ldd	r24, Y+3	; 0x03
    2af0:	9c 81       	ldd	r25, Y+4	; 0x04
    2af2:	00 97       	sbiw	r24, 0x00	; 0
    2af4:	61 f0       	breq	.+24     	; 0x2b0e <DIO_u8GetPortValue+0x52>
    2af6:	1e c0       	rjmp	.+60     	; 0x2b34 <DIO_u8GetPortValue+0x78>
    2af8:	2b 81       	ldd	r18, Y+3	; 0x03
    2afa:	3c 81       	ldd	r19, Y+4	; 0x04
    2afc:	22 30       	cpi	r18, 0x02	; 2
    2afe:	31 05       	cpc	r19, r1
    2b00:	81 f0       	breq	.+32     	; 0x2b22 <DIO_u8GetPortValue+0x66>
    2b02:	8b 81       	ldd	r24, Y+3	; 0x03
    2b04:	9c 81       	ldd	r25, Y+4	; 0x04
    2b06:	83 30       	cpi	r24, 0x03	; 3
    2b08:	91 05       	cpc	r25, r1
    2b0a:	81 f0       	breq	.+32     	; 0x2b2c <DIO_u8GetPortValue+0x70>
    2b0c:	13 c0       	rjmp	.+38     	; 0x2b34 <DIO_u8GetPortValue+0x78>
        {
            case DIO_PORTA :    Local_u8Variable = PINA_REG ;   break;  
    2b0e:	e9 e3       	ldi	r30, 0x39	; 57
    2b10:	f0 e0       	ldi	r31, 0x00	; 0
    2b12:	80 81       	ld	r24, Z
    2b14:	89 83       	std	Y+1, r24	; 0x01
    2b16:	0e c0       	rjmp	.+28     	; 0x2b34 <DIO_u8GetPortValue+0x78>
            case DIO_PORTB :    Local_u8Variable = PINB_REG ;   break;
    2b18:	e6 e3       	ldi	r30, 0x36	; 54
    2b1a:	f0 e0       	ldi	r31, 0x00	; 0
    2b1c:	80 81       	ld	r24, Z
    2b1e:	89 83       	std	Y+1, r24	; 0x01
    2b20:	09 c0       	rjmp	.+18     	; 0x2b34 <DIO_u8GetPortValue+0x78>
            case DIO_PORTC :    Local_u8Variable = PINC_REG ;   break;
    2b22:	e3 e3       	ldi	r30, 0x33	; 51
    2b24:	f0 e0       	ldi	r31, 0x00	; 0
    2b26:	80 81       	ld	r24, Z
    2b28:	89 83       	std	Y+1, r24	; 0x01
    2b2a:	04 c0       	rjmp	.+8      	; 0x2b34 <DIO_u8GetPortValue+0x78>
            case DIO_PORTD :    Local_u8Variable = PIND_REG ;   break;
    2b2c:	e0 e3       	ldi	r30, 0x30	; 48
    2b2e:	f0 e0       	ldi	r31, 0x00	; 0
    2b30:	80 81       	ld	r24, Z
    2b32:	89 83       	std	Y+1, r24	; 0x01
            default    :                                    break;
        }
    }
    return Local_u8Variable ;
    2b34:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b36:	0f 90       	pop	r0
    2b38:	0f 90       	pop	r0
    2b3a:	0f 90       	pop	r0
    2b3c:	0f 90       	pop	r0
    2b3e:	cf 91       	pop	r28
    2b40:	df 91       	pop	r29
    2b42:	08 95       	ret

00002b44 <DIO_voidTogglePinValue>:


void DIO_voidTogglePinValue (u8 Copy_u8PortNumber, u8 Copy_u8PinNumber )
{
    2b44:	df 93       	push	r29
    2b46:	cf 93       	push	r28
    2b48:	00 d0       	rcall	.+0      	; 0x2b4a <DIO_voidTogglePinValue+0x6>
    2b4a:	00 d0       	rcall	.+0      	; 0x2b4c <DIO_voidTogglePinValue+0x8>
    2b4c:	cd b7       	in	r28, 0x3d	; 61
    2b4e:	de b7       	in	r29, 0x3e	; 62
    2b50:	89 83       	std	Y+1, r24	; 0x01
    2b52:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8PortNumber > DIO_PORTD || Copy_u8PinNumber > DIO_PIN7 )
    2b54:	89 81       	ldd	r24, Y+1	; 0x01
    2b56:	84 30       	cpi	r24, 0x04	; 4
    2b58:	08 f0       	brcs	.+2      	; 0x2b5c <DIO_voidTogglePinValue+0x18>
    2b5a:	72 c0       	rjmp	.+228    	; 0x2c40 <DIO_voidTogglePinValue+0xfc>
    2b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b5e:	88 30       	cpi	r24, 0x08	; 8
    2b60:	08 f0       	brcs	.+2      	; 0x2b64 <DIO_voidTogglePinValue+0x20>
    2b62:	6e c0       	rjmp	.+220    	; 0x2c40 <DIO_voidTogglePinValue+0xfc>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8PortNumber)
    2b64:	89 81       	ldd	r24, Y+1	; 0x01
    2b66:	28 2f       	mov	r18, r24
    2b68:	30 e0       	ldi	r19, 0x00	; 0
    2b6a:	3c 83       	std	Y+4, r19	; 0x04
    2b6c:	2b 83       	std	Y+3, r18	; 0x03
    2b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b70:	9c 81       	ldd	r25, Y+4	; 0x04
    2b72:	81 30       	cpi	r24, 0x01	; 1
    2b74:	91 05       	cpc	r25, r1
    2b76:	49 f1       	breq	.+82     	; 0x2bca <DIO_voidTogglePinValue+0x86>
    2b78:	2b 81       	ldd	r18, Y+3	; 0x03
    2b7a:	3c 81       	ldd	r19, Y+4	; 0x04
    2b7c:	22 30       	cpi	r18, 0x02	; 2
    2b7e:	31 05       	cpc	r19, r1
    2b80:	2c f4       	brge	.+10     	; 0x2b8c <DIO_voidTogglePinValue+0x48>
    2b82:	8b 81       	ldd	r24, Y+3	; 0x03
    2b84:	9c 81       	ldd	r25, Y+4	; 0x04
    2b86:	00 97       	sbiw	r24, 0x00	; 0
    2b88:	61 f0       	breq	.+24     	; 0x2ba2 <DIO_voidTogglePinValue+0x5e>
    2b8a:	5a c0       	rjmp	.+180    	; 0x2c40 <DIO_voidTogglePinValue+0xfc>
    2b8c:	2b 81       	ldd	r18, Y+3	; 0x03
    2b8e:	3c 81       	ldd	r19, Y+4	; 0x04
    2b90:	22 30       	cpi	r18, 0x02	; 2
    2b92:	31 05       	cpc	r19, r1
    2b94:	71 f1       	breq	.+92     	; 0x2bf2 <DIO_voidTogglePinValue+0xae>
    2b96:	8b 81       	ldd	r24, Y+3	; 0x03
    2b98:	9c 81       	ldd	r25, Y+4	; 0x04
    2b9a:	83 30       	cpi	r24, 0x03	; 3
    2b9c:	91 05       	cpc	r25, r1
    2b9e:	e9 f1       	breq	.+122    	; 0x2c1a <DIO_voidTogglePinValue+0xd6>
    2ba0:	4f c0       	rjmp	.+158    	; 0x2c40 <DIO_voidTogglePinValue+0xfc>
        {
            case DIO_PORTA :    TOG_BIT( PORTA_REG, Copy_u8PinNumber );     break;
    2ba2:	ab e3       	ldi	r26, 0x3B	; 59
    2ba4:	b0 e0       	ldi	r27, 0x00	; 0
    2ba6:	eb e3       	ldi	r30, 0x3B	; 59
    2ba8:	f0 e0       	ldi	r31, 0x00	; 0
    2baa:	80 81       	ld	r24, Z
    2bac:	48 2f       	mov	r20, r24
    2bae:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb0:	28 2f       	mov	r18, r24
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    2bb4:	81 e0       	ldi	r24, 0x01	; 1
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	02 2e       	mov	r0, r18
    2bba:	02 c0       	rjmp	.+4      	; 0x2bc0 <DIO_voidTogglePinValue+0x7c>
    2bbc:	88 0f       	add	r24, r24
    2bbe:	99 1f       	adc	r25, r25
    2bc0:	0a 94       	dec	r0
    2bc2:	e2 f7       	brpl	.-8      	; 0x2bbc <DIO_voidTogglePinValue+0x78>
    2bc4:	84 27       	eor	r24, r20
    2bc6:	8c 93       	st	X, r24
    2bc8:	3b c0       	rjmp	.+118    	; 0x2c40 <DIO_voidTogglePinValue+0xfc>
            case DIO_PORTB :    TOG_BIT( PORTB_REG, Copy_u8PinNumber );     break;
    2bca:	a8 e3       	ldi	r26, 0x38	; 56
    2bcc:	b0 e0       	ldi	r27, 0x00	; 0
    2bce:	e8 e3       	ldi	r30, 0x38	; 56
    2bd0:	f0 e0       	ldi	r31, 0x00	; 0
    2bd2:	80 81       	ld	r24, Z
    2bd4:	48 2f       	mov	r20, r24
    2bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd8:	28 2f       	mov	r18, r24
    2bda:	30 e0       	ldi	r19, 0x00	; 0
    2bdc:	81 e0       	ldi	r24, 0x01	; 1
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	02 2e       	mov	r0, r18
    2be2:	02 c0       	rjmp	.+4      	; 0x2be8 <DIO_voidTogglePinValue+0xa4>
    2be4:	88 0f       	add	r24, r24
    2be6:	99 1f       	adc	r25, r25
    2be8:	0a 94       	dec	r0
    2bea:	e2 f7       	brpl	.-8      	; 0x2be4 <DIO_voidTogglePinValue+0xa0>
    2bec:	84 27       	eor	r24, r20
    2bee:	8c 93       	st	X, r24
    2bf0:	27 c0       	rjmp	.+78     	; 0x2c40 <DIO_voidTogglePinValue+0xfc>
            case DIO_PORTC :    TOG_BIT( PORTC_REG, Copy_u8PinNumber );     break;
    2bf2:	a5 e3       	ldi	r26, 0x35	; 53
    2bf4:	b0 e0       	ldi	r27, 0x00	; 0
    2bf6:	e5 e3       	ldi	r30, 0x35	; 53
    2bf8:	f0 e0       	ldi	r31, 0x00	; 0
    2bfa:	80 81       	ld	r24, Z
    2bfc:	48 2f       	mov	r20, r24
    2bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2c00:	28 2f       	mov	r18, r24
    2c02:	30 e0       	ldi	r19, 0x00	; 0
    2c04:	81 e0       	ldi	r24, 0x01	; 1
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	02 2e       	mov	r0, r18
    2c0a:	02 c0       	rjmp	.+4      	; 0x2c10 <DIO_voidTogglePinValue+0xcc>
    2c0c:	88 0f       	add	r24, r24
    2c0e:	99 1f       	adc	r25, r25
    2c10:	0a 94       	dec	r0
    2c12:	e2 f7       	brpl	.-8      	; 0x2c0c <DIO_voidTogglePinValue+0xc8>
    2c14:	84 27       	eor	r24, r20
    2c16:	8c 93       	st	X, r24
    2c18:	13 c0       	rjmp	.+38     	; 0x2c40 <DIO_voidTogglePinValue+0xfc>
            case DIO_PORTD :    TOG_BIT( PORTD_REG, Copy_u8PinNumber );     break;
    2c1a:	a2 e3       	ldi	r26, 0x32	; 50
    2c1c:	b0 e0       	ldi	r27, 0x00	; 0
    2c1e:	e2 e3       	ldi	r30, 0x32	; 50
    2c20:	f0 e0       	ldi	r31, 0x00	; 0
    2c22:	80 81       	ld	r24, Z
    2c24:	48 2f       	mov	r20, r24
    2c26:	8a 81       	ldd	r24, Y+2	; 0x02
    2c28:	28 2f       	mov	r18, r24
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	81 e0       	ldi	r24, 0x01	; 1
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	02 2e       	mov	r0, r18
    2c32:	02 c0       	rjmp	.+4      	; 0x2c38 <DIO_voidTogglePinValue+0xf4>
    2c34:	88 0f       	add	r24, r24
    2c36:	99 1f       	adc	r25, r25
    2c38:	0a 94       	dec	r0
    2c3a:	e2 f7       	brpl	.-8      	; 0x2c34 <DIO_voidTogglePinValue+0xf0>
    2c3c:	84 27       	eor	r24, r20
    2c3e:	8c 93       	st	X, r24
            default :                                                      break;
        }
    }
}
    2c40:	0f 90       	pop	r0
    2c42:	0f 90       	pop	r0
    2c44:	0f 90       	pop	r0
    2c46:	0f 90       	pop	r0
    2c48:	cf 91       	pop	r28
    2c4a:	df 91       	pop	r29
    2c4c:	08 95       	ret

00002c4e <DIO_voidTogglePortValue>:


void DIO_voidTogglePortValue (u8 Copy_u8PortNumber )
{
    2c4e:	df 93       	push	r29
    2c50:	cf 93       	push	r28
    2c52:	00 d0       	rcall	.+0      	; 0x2c54 <DIO_voidTogglePortValue+0x6>
    2c54:	0f 92       	push	r0
    2c56:	cd b7       	in	r28, 0x3d	; 61
    2c58:	de b7       	in	r29, 0x3e	; 62
    2c5a:	89 83       	std	Y+1, r24	; 0x01
        /* i/p validation */
    if ( Copy_u8PortNumber > DIO_PORTD )
    2c5c:	89 81       	ldd	r24, Y+1	; 0x01
    2c5e:	84 30       	cpi	r24, 0x04	; 4
    2c60:	08 f0       	brcs	.+2      	; 0x2c64 <DIO_voidTogglePortValue+0x16>
    2c62:	3e c0       	rjmp	.+124    	; 0x2ce0 <DIO_voidTogglePortValue+0x92>
    {
        // Do Nothing
    }
    else 
    {
        switch(Copy_u8PortNumber)
    2c64:	89 81       	ldd	r24, Y+1	; 0x01
    2c66:	28 2f       	mov	r18, r24
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	3b 83       	std	Y+3, r19	; 0x03
    2c6c:	2a 83       	std	Y+2, r18	; 0x02
    2c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c70:	9b 81       	ldd	r25, Y+3	; 0x03
    2c72:	81 30       	cpi	r24, 0x01	; 1
    2c74:	91 05       	cpc	r25, r1
    2c76:	e9 f0       	breq	.+58     	; 0x2cb2 <DIO_voidTogglePortValue+0x64>
    2c78:	2a 81       	ldd	r18, Y+2	; 0x02
    2c7a:	3b 81       	ldd	r19, Y+3	; 0x03
    2c7c:	22 30       	cpi	r18, 0x02	; 2
    2c7e:	31 05       	cpc	r19, r1
    2c80:	2c f4       	brge	.+10     	; 0x2c8c <DIO_voidTogglePortValue+0x3e>
    2c82:	8a 81       	ldd	r24, Y+2	; 0x02
    2c84:	9b 81       	ldd	r25, Y+3	; 0x03
    2c86:	00 97       	sbiw	r24, 0x00	; 0
    2c88:	61 f0       	breq	.+24     	; 0x2ca2 <DIO_voidTogglePortValue+0x54>
    2c8a:	2a c0       	rjmp	.+84     	; 0x2ce0 <DIO_voidTogglePortValue+0x92>
    2c8c:	2a 81       	ldd	r18, Y+2	; 0x02
    2c8e:	3b 81       	ldd	r19, Y+3	; 0x03
    2c90:	22 30       	cpi	r18, 0x02	; 2
    2c92:	31 05       	cpc	r19, r1
    2c94:	b1 f0       	breq	.+44     	; 0x2cc2 <DIO_voidTogglePortValue+0x74>
    2c96:	8a 81       	ldd	r24, Y+2	; 0x02
    2c98:	9b 81       	ldd	r25, Y+3	; 0x03
    2c9a:	83 30       	cpi	r24, 0x03	; 3
    2c9c:	91 05       	cpc	r25, r1
    2c9e:	c9 f0       	breq	.+50     	; 0x2cd2 <DIO_voidTogglePortValue+0x84>
    2ca0:	1f c0       	rjmp	.+62     	; 0x2ce0 <DIO_voidTogglePortValue+0x92>
        {
            case DIO_PORTA :    PORTA_REG ^= 0xff ;     break;           
    2ca2:	ab e3       	ldi	r26, 0x3B	; 59
    2ca4:	b0 e0       	ldi	r27, 0x00	; 0
    2ca6:	eb e3       	ldi	r30, 0x3B	; 59
    2ca8:	f0 e0       	ldi	r31, 0x00	; 0
    2caa:	80 81       	ld	r24, Z
    2cac:	80 95       	com	r24
    2cae:	8c 93       	st	X, r24
    2cb0:	17 c0       	rjmp	.+46     	; 0x2ce0 <DIO_voidTogglePortValue+0x92>
            case DIO_PORTB :    PORTB_REG ^= 0xff ;     break;          
    2cb2:	a8 e3       	ldi	r26, 0x38	; 56
    2cb4:	b0 e0       	ldi	r27, 0x00	; 0
    2cb6:	e8 e3       	ldi	r30, 0x38	; 56
    2cb8:	f0 e0       	ldi	r31, 0x00	; 0
    2cba:	80 81       	ld	r24, Z
    2cbc:	80 95       	com	r24
    2cbe:	8c 93       	st	X, r24
    2cc0:	0f c0       	rjmp	.+30     	; 0x2ce0 <DIO_voidTogglePortValue+0x92>
            case DIO_PORTC :    PORTC_REG ^= 0xff ;     break; 
    2cc2:	a5 e3       	ldi	r26, 0x35	; 53
    2cc4:	b0 e0       	ldi	r27, 0x00	; 0
    2cc6:	e5 e3       	ldi	r30, 0x35	; 53
    2cc8:	f0 e0       	ldi	r31, 0x00	; 0
    2cca:	80 81       	ld	r24, Z
    2ccc:	80 95       	com	r24
    2cce:	8c 93       	st	X, r24
    2cd0:	07 c0       	rjmp	.+14     	; 0x2ce0 <DIO_voidTogglePortValue+0x92>
            case DIO_PORTD :    PORTD_REG ^= 0xff ;     break; 
    2cd2:	a2 e3       	ldi	r26, 0x32	; 50
    2cd4:	b0 e0       	ldi	r27, 0x00	; 0
    2cd6:	e2 e3       	ldi	r30, 0x32	; 50
    2cd8:	f0 e0       	ldi	r31, 0x00	; 0
    2cda:	80 81       	ld	r24, Z
    2cdc:	80 95       	com	r24
    2cde:	8c 93       	st	X, r24
            default    :                            break;
        }
    }
}
    2ce0:	0f 90       	pop	r0
    2ce2:	0f 90       	pop	r0
    2ce4:	0f 90       	pop	r0
    2ce6:	cf 91       	pop	r28
    2ce8:	df 91       	pop	r29
    2cea:	08 95       	ret

00002cec <DIO_voidConfig_Pull_Up_Pin>:

void DIO_voidConfig_Pull_Up_Pin (u8 Copy_u8PortNumber, u8 Copy_u8PinNumber , u8 Copy_u8PullUpStatus )
{
    2cec:	df 93       	push	r29
    2cee:	cf 93       	push	r28
    2cf0:	00 d0       	rcall	.+0      	; 0x2cf2 <DIO_voidConfig_Pull_Up_Pin+0x6>
    2cf2:	00 d0       	rcall	.+0      	; 0x2cf4 <DIO_voidConfig_Pull_Up_Pin+0x8>
    2cf4:	0f 92       	push	r0
    2cf6:	cd b7       	in	r28, 0x3d	; 61
    2cf8:	de b7       	in	r29, 0x3e	; 62
    2cfa:	89 83       	std	Y+1, r24	; 0x01
    2cfc:	6a 83       	std	Y+2, r22	; 0x02
    2cfe:	4b 83       	std	Y+3, r20	; 0x03
    /* i/p validation */
    if ( Copy_u8PortNumber > DIO_PORTD || Copy_u8PinNumber > DIO_PIN7 )
    2d00:	89 81       	ldd	r24, Y+1	; 0x01
    2d02:	84 30       	cpi	r24, 0x04	; 4
    2d04:	e0 f4       	brcc	.+56     	; 0x2d3e <DIO_voidConfig_Pull_Up_Pin+0x52>
    2d06:	8a 81       	ldd	r24, Y+2	; 0x02
    2d08:	88 30       	cpi	r24, 0x08	; 8
    2d0a:	c8 f4       	brcc	.+50     	; 0x2d3e <DIO_voidConfig_Pull_Up_Pin+0x52>
    {
        // Do Nothing
    }
    else
    {
       switch(Copy_u8PullUpStatus)
    2d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d0e:	28 2f       	mov	r18, r24
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	3d 83       	std	Y+5, r19	; 0x05
    2d14:	2c 83       	std	Y+4, r18	; 0x04
    2d16:	8c 81       	ldd	r24, Y+4	; 0x04
    2d18:	9d 81       	ldd	r25, Y+5	; 0x05
    2d1a:	00 97       	sbiw	r24, 0x00	; 0
    2d1c:	59 f0       	breq	.+22     	; 0x2d34 <DIO_voidConfig_Pull_Up_Pin+0x48>
    2d1e:	2c 81       	ldd	r18, Y+4	; 0x04
    2d20:	3d 81       	ldd	r19, Y+5	; 0x05
    2d22:	21 30       	cpi	r18, 0x01	; 1
    2d24:	31 05       	cpc	r19, r1
    2d26:	59 f4       	brne	.+22     	; 0x2d3e <DIO_voidConfig_Pull_Up_Pin+0x52>
       {
            case DIO_ON  :   DIO_voidSetPinValue (Copy_u8PortNumber,Copy_u8PinNumber, DIO_HIGH );   break;
    2d28:	89 81       	ldd	r24, Y+1	; 0x01
    2d2a:	6a 81       	ldd	r22, Y+2	; 0x02
    2d2c:	41 e0       	ldi	r20, 0x01	; 1
    2d2e:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
    2d32:	05 c0       	rjmp	.+10     	; 0x2d3e <DIO_voidConfig_Pull_Up_Pin+0x52>
            case DIO_OFF :   DIO_voidSetPinValue (Copy_u8PortNumber,Copy_u8PinNumber, DIO_LOW  );   break;
    2d34:	89 81       	ldd	r24, Y+1	; 0x01
    2d36:	6a 81       	ldd	r22, Y+2	; 0x02
    2d38:	40 e0       	ldi	r20, 0x00	; 0
    2d3a:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
            default  :                                                                      break;
       }
    }
}
    2d3e:	0f 90       	pop	r0
    2d40:	0f 90       	pop	r0
    2d42:	0f 90       	pop	r0
    2d44:	0f 90       	pop	r0
    2d46:	0f 90       	pop	r0
    2d48:	cf 91       	pop	r28
    2d4a:	df 91       	pop	r29
    2d4c:	08 95       	ret

00002d4e <DIO_voidConfig_Pull_Up_Port>:

void DIO_voidConfig_Pull_Up_Port (u8 Copy_u8PortNumber, u8 Copy_u8PullUpStatus )
{
    2d4e:	df 93       	push	r29
    2d50:	cf 93       	push	r28
    2d52:	00 d0       	rcall	.+0      	; 0x2d54 <DIO_voidConfig_Pull_Up_Port+0x6>
    2d54:	00 d0       	rcall	.+0      	; 0x2d56 <DIO_voidConfig_Pull_Up_Port+0x8>
    2d56:	cd b7       	in	r28, 0x3d	; 61
    2d58:	de b7       	in	r29, 0x3e	; 62
    2d5a:	89 83       	std	Y+1, r24	; 0x01
    2d5c:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8PortNumber > DIO_PORTD )
    2d5e:	89 81       	ldd	r24, Y+1	; 0x01
    2d60:	84 30       	cpi	r24, 0x04	; 4
    2d62:	b8 f4       	brcc	.+46     	; 0x2d92 <DIO_voidConfig_Pull_Up_Port+0x44>
    {
        // Do Nothing
    }
    else
    {
       switch(Copy_u8PullUpStatus)
    2d64:	8a 81       	ldd	r24, Y+2	; 0x02
    2d66:	28 2f       	mov	r18, r24
    2d68:	30 e0       	ldi	r19, 0x00	; 0
    2d6a:	3c 83       	std	Y+4, r19	; 0x04
    2d6c:	2b 83       	std	Y+3, r18	; 0x03
    2d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d70:	9c 81       	ldd	r25, Y+4	; 0x04
    2d72:	00 97       	sbiw	r24, 0x00	; 0
    2d74:	51 f0       	breq	.+20     	; 0x2d8a <DIO_voidConfig_Pull_Up_Port+0x3c>
    2d76:	2b 81       	ldd	r18, Y+3	; 0x03
    2d78:	3c 81       	ldd	r19, Y+4	; 0x04
    2d7a:	21 30       	cpi	r18, 0x01	; 1
    2d7c:	31 05       	cpc	r19, r1
    2d7e:	49 f4       	brne	.+18     	; 0x2d92 <DIO_voidConfig_Pull_Up_Port+0x44>
       {
            case DIO_ON :  DIO_voidSetPortValue (Copy_u8PortNumber, DIO_HIGH );  break;
    2d80:	89 81       	ldd	r24, Y+1	; 0x01
    2d82:	61 e0       	ldi	r22, 0x01	; 1
    2d84:	0e 94 9a 14 	call	0x2934	; 0x2934 <DIO_voidSetPortValue>
    2d88:	04 c0       	rjmp	.+8      	; 0x2d92 <DIO_voidConfig_Pull_Up_Port+0x44>
            case DIO_OFF:  DIO_voidSetPortValue (Copy_u8PortNumber, DIO_LOW );   break;
    2d8a:	89 81       	ldd	r24, Y+1	; 0x01
    2d8c:	60 e0       	ldi	r22, 0x00	; 0
    2d8e:	0e 94 9a 14 	call	0x2934	; 0x2934 <DIO_voidSetPortValue>
            default :                                                    break;
       }
    }
}
    2d92:	0f 90       	pop	r0
    2d94:	0f 90       	pop	r0
    2d96:	0f 90       	pop	r0
    2d98:	0f 90       	pop	r0
    2d9a:	cf 91       	pop	r28
    2d9c:	df 91       	pop	r29
    2d9e:	08 95       	ret

00002da0 <ADC_voidInit>:

u16 ADC_u16Result = 0 ;
u8 ADC_u18BusyFlag = 0 ;

void ADC_voidInit (void)
{
    2da0:	df 93       	push	r29
    2da2:	cf 93       	push	r28
    2da4:	cd b7       	in	r28, 0x3d	; 61
    2da6:	de b7       	in	r29, 0x3e	; 62

    #if ( REFERENCE_VOLTAGE == AREF )
        CLR_BIT(ADMUX_REG,ADMUX_REFS0);
        CLR_BIT(ADMUX_REG,ADMUX_REFS1);
    #elif ( REFERENCE_VOLTAGE == AVCC )
      SET_BIT(ADMUX_REG,ADMUX_REFS0);
    2da8:	a7 e2       	ldi	r26, 0x27	; 39
    2daa:	b0 e0       	ldi	r27, 0x00	; 0
    2dac:	e7 e2       	ldi	r30, 0x27	; 39
    2dae:	f0 e0       	ldi	r31, 0x00	; 0
    2db0:	80 81       	ld	r24, Z
    2db2:	80 64       	ori	r24, 0x40	; 64
    2db4:	8c 93       	st	X, r24
        CLR_BIT(ADMUX_REG,ADMUX_REFS1);
    2db6:	a7 e2       	ldi	r26, 0x27	; 39
    2db8:	b0 e0       	ldi	r27, 0x00	; 0
    2dba:	e7 e2       	ldi	r30, 0x27	; 39
    2dbc:	f0 e0       	ldi	r31, 0x00	; 0
    2dbe:	80 81       	ld	r24, Z
    2dc0:	8f 77       	andi	r24, 0x7F	; 127
    2dc2:	8c 93       	st	X, r24
    #endif

/*     Select RIGHT or LEFT Adjust      */

    #if ( ADJUST == RIGHT )
        CLR_BIT(ADMUX_REG,ADMUX_ADLAR);
    2dc4:	a7 e2       	ldi	r26, 0x27	; 39
    2dc6:	b0 e0       	ldi	r27, 0x00	; 0
    2dc8:	e7 e2       	ldi	r30, 0x27	; 39
    2dca:	f0 e0       	ldi	r31, 0x00	; 0
    2dcc:	80 81       	ld	r24, Z
    2dce:	8f 7d       	andi	r24, 0xDF	; 223
    2dd0:	8c 93       	st	X, r24
    #endif

/*        ADC Enable or Disable         */

    #if ( ADEN == ENABLE )
      SET_BIT(ADCSRA_REG,ADCSRA_ADEN);
    2dd2:	a6 e2       	ldi	r26, 0x26	; 38
    2dd4:	b0 e0       	ldi	r27, 0x00	; 0
    2dd6:	e6 e2       	ldi	r30, 0x26	; 38
    2dd8:	f0 e0       	ldi	r31, 0x00	; 0
    2dda:	80 81       	ld	r24, Z
    2ddc:	80 68       	ori	r24, 0x80	; 128
    2dde:	8c 93       	st	X, r24
            SET_BIT(SFIOR_REG,SFIOR_ADTS1);
            SET_BIT(SFIOR_REG,SFIOR_ADTS2);
        #endif

    #elif ( ADATE == DISABLE )
        CLR_BIT(ADCSRA_REG,ADCSRA_ADATE);
    2de0:	a6 e2       	ldi	r26, 0x26	; 38
    2de2:	b0 e0       	ldi	r27, 0x00	; 0
    2de4:	e6 e2       	ldi	r30, 0x26	; 38
    2de6:	f0 e0       	ldi	r31, 0x00	; 0
    2de8:	80 81       	ld	r24, Z
    2dea:	8f 7d       	andi	r24, 0xDF	; 223
    2dec:	8c 93       	st	X, r24
/*    ADC Interrupt Enable or Disable   */

    #if ( ADIE == ENABLE )          // work with Interrupt
        SET_BIT(ADCSRA_REG,ADCSRA_ADIE);
    #elif ( ADIE == DISABLE )       // work with Polling
        CLR_BIT(ADCSRA_REG,ADCSRA_ADIE);
    2dee:	a6 e2       	ldi	r26, 0x26	; 38
    2df0:	b0 e0       	ldi	r27, 0x00	; 0
    2df2:	e6 e2       	ldi	r30, 0x26	; 38
    2df4:	f0 e0       	ldi	r31, 0x00	; 0
    2df6:	80 81       	ld	r24, Z
    2df8:	87 7f       	andi	r24, 0xF7	; 247
    2dfa:	8c 93       	st	X, r24
    #endif

/*       ADC Prescaler Selection        */

    /*     Clear Prescaler      */ 
    ADCSRA_REG = ( ADCSRA_REG & 0b11111000 );
    2dfc:	a6 e2       	ldi	r26, 0x26	; 38
    2dfe:	b0 e0       	ldi	r27, 0x00	; 0
    2e00:	e6 e2       	ldi	r30, 0x26	; 38
    2e02:	f0 e0       	ldi	r31, 0x00	; 0
    2e04:	80 81       	ld	r24, Z
    2e06:	88 7f       	andi	r24, 0xF8	; 248
    2e08:	8c 93       	st	X, r24
    #elif ( PRESCALER == PRESCALER_DIVISION_BY_64 )
        CLR_BIT(ADCSRA_REG,ADCSRA_ADPS0);
        SET_BIT(ADCSRA_REG,ADCSRA_ADPS1);
        SET_BIT(ADCSRA_REG,ADCSRA_ADPS2);
    #elif ( PRESCALER == PRESCALER_DIVISION_BY_128 )
        SET_BIT(ADCSRA_REG,ADCSRA_ADPS0);
    2e0a:	a6 e2       	ldi	r26, 0x26	; 38
    2e0c:	b0 e0       	ldi	r27, 0x00	; 0
    2e0e:	e6 e2       	ldi	r30, 0x26	; 38
    2e10:	f0 e0       	ldi	r31, 0x00	; 0
    2e12:	80 81       	ld	r24, Z
    2e14:	81 60       	ori	r24, 0x01	; 1
    2e16:	8c 93       	st	X, r24
        SET_BIT(ADCSRA_REG,ADCSRA_ADPS1);
    2e18:	a6 e2       	ldi	r26, 0x26	; 38
    2e1a:	b0 e0       	ldi	r27, 0x00	; 0
    2e1c:	e6 e2       	ldi	r30, 0x26	; 38
    2e1e:	f0 e0       	ldi	r31, 0x00	; 0
    2e20:	80 81       	ld	r24, Z
    2e22:	82 60       	ori	r24, 0x02	; 2
    2e24:	8c 93       	st	X, r24
        SET_BIT(ADCSRA_REG,ADCSRA_ADPS2);
    2e26:	a6 e2       	ldi	r26, 0x26	; 38
    2e28:	b0 e0       	ldi	r27, 0x00	; 0
    2e2a:	e6 e2       	ldi	r30, 0x26	; 38
    2e2c:	f0 e0       	ldi	r31, 0x00	; 0
    2e2e:	80 81       	ld	r24, Z
    2e30:	84 60       	ori	r24, 0x04	; 4
    2e32:	8c 93       	st	X, r24
    #endif

}
    2e34:	cf 91       	pop	r28
    2e36:	df 91       	pop	r29
    2e38:	08 95       	ret

00002e3a <ADC_u16ReadSynchronus>:

u16 ADC_u16ReadSynchronus ( u8 Copy_u8ChannelNumber ) 
{
    2e3a:	df 93       	push	r29
    2e3c:	cf 93       	push	r28
    2e3e:	00 d0       	rcall	.+0      	; 0x2e40 <ADC_u16ReadSynchronus+0x6>
    2e40:	00 d0       	rcall	.+0      	; 0x2e42 <ADC_u16ReadSynchronus+0x8>
    2e42:	cd b7       	in	r28, 0x3d	; 61
    2e44:	de b7       	in	r29, 0x3e	; 62
    2e46:	8a 83       	std	Y+2, r24	; 0x02

    /*     Clear MUX      */ 
    ADMUX_REG = ( ADMUX_REG & 0b11100000 );        
    2e48:	a7 e2       	ldi	r26, 0x27	; 39
    2e4a:	b0 e0       	ldi	r27, 0x00	; 0
    2e4c:	e7 e2       	ldi	r30, 0x27	; 39
    2e4e:	f0 e0       	ldi	r31, 0x00	; 0
    2e50:	80 81       	ld	r24, Z
    2e52:	80 7e       	andi	r24, 0xE0	; 224
    2e54:	8c 93       	st	X, r24

    /*   Select channel   */ 
    switch ( Copy_u8ChannelNumber )
    2e56:	8a 81       	ldd	r24, Y+2	; 0x02
    2e58:	28 2f       	mov	r18, r24
    2e5a:	30 e0       	ldi	r19, 0x00	; 0
    2e5c:	3c 83       	std	Y+4, r19	; 0x04
    2e5e:	2b 83       	std	Y+3, r18	; 0x03
    2e60:	8b 81       	ldd	r24, Y+3	; 0x03
    2e62:	9c 81       	ldd	r25, Y+4	; 0x04
    2e64:	83 30       	cpi	r24, 0x03	; 3
    2e66:	91 05       	cpc	r25, r1
    2e68:	09 f4       	brne	.+2      	; 0x2e6c <ADC_u16ReadSynchronus+0x32>
    2e6a:	45 c0       	rjmp	.+138    	; 0x2ef6 <ADC_u16ReadSynchronus+0xbc>
    2e6c:	2b 81       	ldd	r18, Y+3	; 0x03
    2e6e:	3c 81       	ldd	r19, Y+4	; 0x04
    2e70:	24 30       	cpi	r18, 0x04	; 4
    2e72:	31 05       	cpc	r19, r1
    2e74:	7c f4       	brge	.+30     	; 0x2e94 <ADC_u16ReadSynchronus+0x5a>
    2e76:	8b 81       	ldd	r24, Y+3	; 0x03
    2e78:	9c 81       	ldd	r25, Y+4	; 0x04
    2e7a:	81 30       	cpi	r24, 0x01	; 1
    2e7c:	91 05       	cpc	r25, r1
    2e7e:	49 f1       	breq	.+82     	; 0x2ed2 <ADC_u16ReadSynchronus+0x98>
    2e80:	2b 81       	ldd	r18, Y+3	; 0x03
    2e82:	3c 81       	ldd	r19, Y+4	; 0x04
    2e84:	22 30       	cpi	r18, 0x02	; 2
    2e86:	31 05       	cpc	r19, r1
    2e88:	6c f5       	brge	.+90     	; 0x2ee4 <ADC_u16ReadSynchronus+0xaa>
    2e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e8e:	00 97       	sbiw	r24, 0x00	; 0
    2e90:	c1 f0       	breq	.+48     	; 0x2ec2 <ADC_u16ReadSynchronus+0x88>
    2e92:	5d c0       	rjmp	.+186    	; 0x2f4e <ADC_u16ReadSynchronus+0x114>
    2e94:	2b 81       	ldd	r18, Y+3	; 0x03
    2e96:	3c 81       	ldd	r19, Y+4	; 0x04
    2e98:	25 30       	cpi	r18, 0x05	; 5
    2e9a:	31 05       	cpc	r19, r1
    2e9c:	09 f4       	brne	.+2      	; 0x2ea0 <ADC_u16ReadSynchronus+0x66>
    2e9e:	3d c0       	rjmp	.+122    	; 0x2f1a <ADC_u16ReadSynchronus+0xe0>
    2ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ea4:	85 30       	cpi	r24, 0x05	; 5
    2ea6:	91 05       	cpc	r25, r1
    2ea8:	7c f1       	brlt	.+94     	; 0x2f08 <ADC_u16ReadSynchronus+0xce>
    2eaa:	2b 81       	ldd	r18, Y+3	; 0x03
    2eac:	3c 81       	ldd	r19, Y+4	; 0x04
    2eae:	26 30       	cpi	r18, 0x06	; 6
    2eb0:	31 05       	cpc	r19, r1
    2eb2:	e1 f1       	breq	.+120    	; 0x2f2c <ADC_u16ReadSynchronus+0xf2>
    2eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb6:	9c 81       	ldd	r25, Y+4	; 0x04
    2eb8:	87 30       	cpi	r24, 0x07	; 7
    2eba:	91 05       	cpc	r25, r1
    2ebc:	09 f4       	brne	.+2      	; 0x2ec0 <ADC_u16ReadSynchronus+0x86>
    2ebe:	3f c0       	rjmp	.+126    	; 0x2f3e <ADC_u16ReadSynchronus+0x104>
    2ec0:	46 c0       	rjmp	.+140    	; 0x2f4e <ADC_u16ReadSynchronus+0x114>
    {
        case ADC0 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000000 );     break;
    2ec2:	a7 e2       	ldi	r26, 0x27	; 39
    2ec4:	b0 e0       	ldi	r27, 0x00	; 0
    2ec6:	e7 e2       	ldi	r30, 0x27	; 39
    2ec8:	f0 e0       	ldi	r31, 0x00	; 0
    2eca:	80 81       	ld	r24, Z
    2ecc:	80 7e       	andi	r24, 0xE0	; 224
    2ece:	8c 93       	st	X, r24
    2ed0:	3e c0       	rjmp	.+124    	; 0x2f4e <ADC_u16ReadSynchronus+0x114>
        case ADC1 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000001 );     break;
    2ed2:	a7 e2       	ldi	r26, 0x27	; 39
    2ed4:	b0 e0       	ldi	r27, 0x00	; 0
    2ed6:	e7 e2       	ldi	r30, 0x27	; 39
    2ed8:	f0 e0       	ldi	r31, 0x00	; 0
    2eda:	80 81       	ld	r24, Z
    2edc:	80 7e       	andi	r24, 0xE0	; 224
    2ede:	81 60       	ori	r24, 0x01	; 1
    2ee0:	8c 93       	st	X, r24
    2ee2:	35 c0       	rjmp	.+106    	; 0x2f4e <ADC_u16ReadSynchronus+0x114>
        case ADC2 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000010 );     break;        
    2ee4:	a7 e2       	ldi	r26, 0x27	; 39
    2ee6:	b0 e0       	ldi	r27, 0x00	; 0
    2ee8:	e7 e2       	ldi	r30, 0x27	; 39
    2eea:	f0 e0       	ldi	r31, 0x00	; 0
    2eec:	80 81       	ld	r24, Z
    2eee:	80 7e       	andi	r24, 0xE0	; 224
    2ef0:	82 60       	ori	r24, 0x02	; 2
    2ef2:	8c 93       	st	X, r24
    2ef4:	2c c0       	rjmp	.+88     	; 0x2f4e <ADC_u16ReadSynchronus+0x114>
        case ADC3 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000011 );     break;
    2ef6:	a7 e2       	ldi	r26, 0x27	; 39
    2ef8:	b0 e0       	ldi	r27, 0x00	; 0
    2efa:	e7 e2       	ldi	r30, 0x27	; 39
    2efc:	f0 e0       	ldi	r31, 0x00	; 0
    2efe:	80 81       	ld	r24, Z
    2f00:	80 7e       	andi	r24, 0xE0	; 224
    2f02:	83 60       	ori	r24, 0x03	; 3
    2f04:	8c 93       	st	X, r24
    2f06:	23 c0       	rjmp	.+70     	; 0x2f4e <ADC_u16ReadSynchronus+0x114>
        case ADC4 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000100 );     break;
    2f08:	a7 e2       	ldi	r26, 0x27	; 39
    2f0a:	b0 e0       	ldi	r27, 0x00	; 0
    2f0c:	e7 e2       	ldi	r30, 0x27	; 39
    2f0e:	f0 e0       	ldi	r31, 0x00	; 0
    2f10:	80 81       	ld	r24, Z
    2f12:	80 7e       	andi	r24, 0xE0	; 224
    2f14:	84 60       	ori	r24, 0x04	; 4
    2f16:	8c 93       	st	X, r24
    2f18:	1a c0       	rjmp	.+52     	; 0x2f4e <ADC_u16ReadSynchronus+0x114>
        case ADC5 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000101 );     break;
    2f1a:	a7 e2       	ldi	r26, 0x27	; 39
    2f1c:	b0 e0       	ldi	r27, 0x00	; 0
    2f1e:	e7 e2       	ldi	r30, 0x27	; 39
    2f20:	f0 e0       	ldi	r31, 0x00	; 0
    2f22:	80 81       	ld	r24, Z
    2f24:	80 7e       	andi	r24, 0xE0	; 224
    2f26:	85 60       	ori	r24, 0x05	; 5
    2f28:	8c 93       	st	X, r24
    2f2a:	11 c0       	rjmp	.+34     	; 0x2f4e <ADC_u16ReadSynchronus+0x114>
        case ADC6 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000110 );     break;
    2f2c:	a7 e2       	ldi	r26, 0x27	; 39
    2f2e:	b0 e0       	ldi	r27, 0x00	; 0
    2f30:	e7 e2       	ldi	r30, 0x27	; 39
    2f32:	f0 e0       	ldi	r31, 0x00	; 0
    2f34:	80 81       	ld	r24, Z
    2f36:	80 7e       	andi	r24, 0xE0	; 224
    2f38:	86 60       	ori	r24, 0x06	; 6
    2f3a:	8c 93       	st	X, r24
    2f3c:	08 c0       	rjmp	.+16     	; 0x2f4e <ADC_u16ReadSynchronus+0x114>
        case ADC7 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000111 );     break;
    2f3e:	a7 e2       	ldi	r26, 0x27	; 39
    2f40:	b0 e0       	ldi	r27, 0x00	; 0
    2f42:	e7 e2       	ldi	r30, 0x27	; 39
    2f44:	f0 e0       	ldi	r31, 0x00	; 0
    2f46:	80 81       	ld	r24, Z
    2f48:	80 7e       	andi	r24, 0xE0	; 224
    2f4a:	87 60       	ori	r24, 0x07	; 7
    2f4c:	8c 93       	st	X, r24
 
    /*    Start Conversion    */ 
    #if ( ADATE == ENABLE )
        // Start Conversion When Triggering Occures.
    #elif ( ADATE == DISABLE )
      SET_BIT(ADCSRA_REG,ADCSRA_ADSC);
    2f4e:	a6 e2       	ldi	r26, 0x26	; 38
    2f50:	b0 e0       	ldi	r27, 0x00	; 0
    2f52:	e6 e2       	ldi	r30, 0x26	; 38
    2f54:	f0 e0       	ldi	r31, 0x00	; 0
    2f56:	80 81       	ld	r24, Z
    2f58:	80 64       	ori	r24, 0x40	; 64
    2f5a:	8c 93       	st	X, r24
    // work with Interrupt
    #if ( ADIE == ENABLE )                        
    // When ADC Finish conversion will Raising Interrupt Flag and Jump to ADC_ISR Function.    
    #elif ( ADIE == DISABLE )                     // work with Polling
        /* GET FLAG and Polling the Flag */
        u8 ADIF=0 ;
    2f5c:	19 82       	std	Y+1, r1	; 0x01
    2f5e:	05 c0       	rjmp	.+10     	; 0x2f6a <ADC_u16ReadSynchronus+0x130>
        while( ADIF == 0 )
        {
            ADIF = GET_BIT(ADCSRA_REG,ADCSRA_ADIF);    // Stuck on while untill Flag Raising 1 .
    2f60:	e6 e2       	ldi	r30, 0x26	; 38
    2f62:	f0 e0       	ldi	r31, 0x00	; 0
    2f64:	80 81       	ld	r24, Z
    2f66:	80 71       	andi	r24, 0x10	; 16
    2f68:	89 83       	std	Y+1, r24	; 0x01
    #if ( ADIE == ENABLE )                        
    // When ADC Finish conversion will Raising Interrupt Flag and Jump to ADC_ISR Function.    
    #elif ( ADIE == DISABLE )                     // work with Polling
        /* GET FLAG and Polling the Flag */
        u8 ADIF=0 ;
        while( ADIF == 0 )
    2f6a:	89 81       	ldd	r24, Y+1	; 0x01
    2f6c:	88 23       	and	r24, r24
    2f6e:	c1 f3       	breq	.-16     	; 0x2f60 <ADC_u16ReadSynchronus+0x126>

    #if ( ADIE == ENABLE )          // work with Interrupt
        // Interrupt Flag Will Cleared Automaticlly.    
    #elif ( ADIE == DISABLE )       // work with Polling
        /* Clear Flag */
      SET_BIT(ADCSRA_REG,ADCSRA_ADIF);
    2f70:	a6 e2       	ldi	r26, 0x26	; 38
    2f72:	b0 e0       	ldi	r27, 0x00	; 0
    2f74:	e6 e2       	ldi	r30, 0x26	; 38
    2f76:	f0 e0       	ldi	r31, 0x00	; 0
    2f78:	80 81       	ld	r24, Z
    2f7a:	80 61       	ori	r24, 0x10	; 16
    2f7c:	8c 93       	st	X, r24
    #endif 

    #if ( ADJUST == RIGHT )
        return ADC_REG ;      
    2f7e:	e4 e2       	ldi	r30, 0x24	; 36
    2f80:	f0 e0       	ldi	r31, 0x00	; 0
    2f82:	80 81       	ld	r24, Z
    2f84:	91 81       	ldd	r25, Z+1	; 0x01
    #elif ( ADJUST == LEFT )
        return ADCH_REG ;
    #endif

}
    2f86:	0f 90       	pop	r0
    2f88:	0f 90       	pop	r0
    2f8a:	0f 90       	pop	r0
    2f8c:	0f 90       	pop	r0
    2f8e:	cf 91       	pop	r28
    2f90:	df 91       	pop	r29
    2f92:	08 95       	ret

00002f94 <ADC_u16ReadASynchronus>:

u16 ADC_u16ReadASynchronus ( u8 Copy_u8ChannelNumber ,  void (*Local_PvoidCallBackFunctionPtr) (void) ) 
{
    2f94:	df 93       	push	r29
    2f96:	cf 93       	push	r28
    2f98:	cd b7       	in	r28, 0x3d	; 61
    2f9a:	de b7       	in	r29, 0x3e	; 62
    2f9c:	27 97       	sbiw	r28, 0x07	; 7
    2f9e:	0f b6       	in	r0, 0x3f	; 63
    2fa0:	f8 94       	cli
    2fa2:	de bf       	out	0x3e, r29	; 62
    2fa4:	0f be       	out	0x3f, r0	; 63
    2fa6:	cd bf       	out	0x3d, r28	; 61
    2fa8:	89 83       	std	Y+1, r24	; 0x01
    2faa:	7b 83       	std	Y+3, r23	; 0x03
    2fac:	6a 83       	std	Y+2, r22	; 0x02
    if ( (ADC_u18BusyFlag == BUSY) ||  (Local_PvoidCallBackFunctionPtr == NULL) )
    2fae:	80 91 53 02 	lds	r24, 0x0253
    2fb2:	88 23       	and	r24, r24
    2fb4:	21 f0       	breq	.+8      	; 0x2fbe <ADC_u16ReadASynchronus+0x2a>
    2fb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb8:	9b 81       	ldd	r25, Y+3	; 0x03
    2fba:	00 97       	sbiw	r24, 0x00	; 0
    2fbc:	19 f4       	brne	.+6      	; 0x2fc4 <ADC_u16ReadASynchronus+0x30>
    {
        return 0;
    2fbe:	1f 82       	std	Y+7, r1	; 0x07
    2fc0:	1e 82       	std	Y+6, r1	; 0x06
    2fc2:	9f c0       	rjmp	.+318    	; 0x3102 <ADC_u16ReadASynchronus+0x16e>
    }
    else
    {
        /*   Make the ADC State is Busy   */
            ADC_u18BusyFlag = BUSY ;
    2fc4:	10 92 53 02 	sts	0x0253, r1
        
            /*     Clear MUX      */ 
            ADMUX_REG = ( ADMUX_REG & 0b11100000 );        
    2fc8:	a7 e2       	ldi	r26, 0x27	; 39
    2fca:	b0 e0       	ldi	r27, 0x00	; 0
    2fcc:	e7 e2       	ldi	r30, 0x27	; 39
    2fce:	f0 e0       	ldi	r31, 0x00	; 0
    2fd0:	80 81       	ld	r24, Z
    2fd2:	80 7e       	andi	r24, 0xE0	; 224
    2fd4:	8c 93       	st	X, r24
        
            /*   Select channel   */ 
            switch ( Copy_u8ChannelNumber )
    2fd6:	89 81       	ldd	r24, Y+1	; 0x01
    2fd8:	28 2f       	mov	r18, r24
    2fda:	30 e0       	ldi	r19, 0x00	; 0
    2fdc:	3d 83       	std	Y+5, r19	; 0x05
    2fde:	2c 83       	std	Y+4, r18	; 0x04
    2fe0:	8c 81       	ldd	r24, Y+4	; 0x04
    2fe2:	9d 81       	ldd	r25, Y+5	; 0x05
    2fe4:	83 30       	cpi	r24, 0x03	; 3
    2fe6:	91 05       	cpc	r25, r1
    2fe8:	09 f4       	brne	.+2      	; 0x2fec <ADC_u16ReadASynchronus+0x58>
    2fea:	45 c0       	rjmp	.+138    	; 0x3076 <ADC_u16ReadASynchronus+0xe2>
    2fec:	2c 81       	ldd	r18, Y+4	; 0x04
    2fee:	3d 81       	ldd	r19, Y+5	; 0x05
    2ff0:	24 30       	cpi	r18, 0x04	; 4
    2ff2:	31 05       	cpc	r19, r1
    2ff4:	7c f4       	brge	.+30     	; 0x3014 <ADC_u16ReadASynchronus+0x80>
    2ff6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ff8:	9d 81       	ldd	r25, Y+5	; 0x05
    2ffa:	81 30       	cpi	r24, 0x01	; 1
    2ffc:	91 05       	cpc	r25, r1
    2ffe:	49 f1       	breq	.+82     	; 0x3052 <ADC_u16ReadASynchronus+0xbe>
    3000:	2c 81       	ldd	r18, Y+4	; 0x04
    3002:	3d 81       	ldd	r19, Y+5	; 0x05
    3004:	22 30       	cpi	r18, 0x02	; 2
    3006:	31 05       	cpc	r19, r1
    3008:	6c f5       	brge	.+90     	; 0x3064 <ADC_u16ReadASynchronus+0xd0>
    300a:	8c 81       	ldd	r24, Y+4	; 0x04
    300c:	9d 81       	ldd	r25, Y+5	; 0x05
    300e:	00 97       	sbiw	r24, 0x00	; 0
    3010:	c1 f0       	breq	.+48     	; 0x3042 <ADC_u16ReadASynchronus+0xae>
    3012:	5d c0       	rjmp	.+186    	; 0x30ce <ADC_u16ReadASynchronus+0x13a>
    3014:	2c 81       	ldd	r18, Y+4	; 0x04
    3016:	3d 81       	ldd	r19, Y+5	; 0x05
    3018:	25 30       	cpi	r18, 0x05	; 5
    301a:	31 05       	cpc	r19, r1
    301c:	09 f4       	brne	.+2      	; 0x3020 <ADC_u16ReadASynchronus+0x8c>
    301e:	3d c0       	rjmp	.+122    	; 0x309a <ADC_u16ReadASynchronus+0x106>
    3020:	8c 81       	ldd	r24, Y+4	; 0x04
    3022:	9d 81       	ldd	r25, Y+5	; 0x05
    3024:	85 30       	cpi	r24, 0x05	; 5
    3026:	91 05       	cpc	r25, r1
    3028:	7c f1       	brlt	.+94     	; 0x3088 <ADC_u16ReadASynchronus+0xf4>
    302a:	2c 81       	ldd	r18, Y+4	; 0x04
    302c:	3d 81       	ldd	r19, Y+5	; 0x05
    302e:	26 30       	cpi	r18, 0x06	; 6
    3030:	31 05       	cpc	r19, r1
    3032:	e1 f1       	breq	.+120    	; 0x30ac <ADC_u16ReadASynchronus+0x118>
    3034:	8c 81       	ldd	r24, Y+4	; 0x04
    3036:	9d 81       	ldd	r25, Y+5	; 0x05
    3038:	87 30       	cpi	r24, 0x07	; 7
    303a:	91 05       	cpc	r25, r1
    303c:	09 f4       	brne	.+2      	; 0x3040 <ADC_u16ReadASynchronus+0xac>
    303e:	3f c0       	rjmp	.+126    	; 0x30be <ADC_u16ReadASynchronus+0x12a>
    3040:	46 c0       	rjmp	.+140    	; 0x30ce <ADC_u16ReadASynchronus+0x13a>
            {
                case ADC0 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000000 );     break;
    3042:	a7 e2       	ldi	r26, 0x27	; 39
    3044:	b0 e0       	ldi	r27, 0x00	; 0
    3046:	e7 e2       	ldi	r30, 0x27	; 39
    3048:	f0 e0       	ldi	r31, 0x00	; 0
    304a:	80 81       	ld	r24, Z
    304c:	80 7e       	andi	r24, 0xE0	; 224
    304e:	8c 93       	st	X, r24
    3050:	3e c0       	rjmp	.+124    	; 0x30ce <ADC_u16ReadASynchronus+0x13a>
                case ADC1 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000001 );     break;
    3052:	a7 e2       	ldi	r26, 0x27	; 39
    3054:	b0 e0       	ldi	r27, 0x00	; 0
    3056:	e7 e2       	ldi	r30, 0x27	; 39
    3058:	f0 e0       	ldi	r31, 0x00	; 0
    305a:	80 81       	ld	r24, Z
    305c:	80 7e       	andi	r24, 0xE0	; 224
    305e:	81 60       	ori	r24, 0x01	; 1
    3060:	8c 93       	st	X, r24
    3062:	35 c0       	rjmp	.+106    	; 0x30ce <ADC_u16ReadASynchronus+0x13a>
                case ADC2 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000010 );     break;        
    3064:	a7 e2       	ldi	r26, 0x27	; 39
    3066:	b0 e0       	ldi	r27, 0x00	; 0
    3068:	e7 e2       	ldi	r30, 0x27	; 39
    306a:	f0 e0       	ldi	r31, 0x00	; 0
    306c:	80 81       	ld	r24, Z
    306e:	80 7e       	andi	r24, 0xE0	; 224
    3070:	82 60       	ori	r24, 0x02	; 2
    3072:	8c 93       	st	X, r24
    3074:	2c c0       	rjmp	.+88     	; 0x30ce <ADC_u16ReadASynchronus+0x13a>
                case ADC3 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000011 );     break;
    3076:	a7 e2       	ldi	r26, 0x27	; 39
    3078:	b0 e0       	ldi	r27, 0x00	; 0
    307a:	e7 e2       	ldi	r30, 0x27	; 39
    307c:	f0 e0       	ldi	r31, 0x00	; 0
    307e:	80 81       	ld	r24, Z
    3080:	80 7e       	andi	r24, 0xE0	; 224
    3082:	83 60       	ori	r24, 0x03	; 3
    3084:	8c 93       	st	X, r24
    3086:	23 c0       	rjmp	.+70     	; 0x30ce <ADC_u16ReadASynchronus+0x13a>
                case ADC4 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000100 );     break;
    3088:	a7 e2       	ldi	r26, 0x27	; 39
    308a:	b0 e0       	ldi	r27, 0x00	; 0
    308c:	e7 e2       	ldi	r30, 0x27	; 39
    308e:	f0 e0       	ldi	r31, 0x00	; 0
    3090:	80 81       	ld	r24, Z
    3092:	80 7e       	andi	r24, 0xE0	; 224
    3094:	84 60       	ori	r24, 0x04	; 4
    3096:	8c 93       	st	X, r24
    3098:	1a c0       	rjmp	.+52     	; 0x30ce <ADC_u16ReadASynchronus+0x13a>
                case ADC5 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000101 );     break;
    309a:	a7 e2       	ldi	r26, 0x27	; 39
    309c:	b0 e0       	ldi	r27, 0x00	; 0
    309e:	e7 e2       	ldi	r30, 0x27	; 39
    30a0:	f0 e0       	ldi	r31, 0x00	; 0
    30a2:	80 81       	ld	r24, Z
    30a4:	80 7e       	andi	r24, 0xE0	; 224
    30a6:	85 60       	ori	r24, 0x05	; 5
    30a8:	8c 93       	st	X, r24
    30aa:	11 c0       	rjmp	.+34     	; 0x30ce <ADC_u16ReadASynchronus+0x13a>
                case ADC6 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000110 );     break;
    30ac:	a7 e2       	ldi	r26, 0x27	; 39
    30ae:	b0 e0       	ldi	r27, 0x00	; 0
    30b0:	e7 e2       	ldi	r30, 0x27	; 39
    30b2:	f0 e0       	ldi	r31, 0x00	; 0
    30b4:	80 81       	ld	r24, Z
    30b6:	80 7e       	andi	r24, 0xE0	; 224
    30b8:	86 60       	ori	r24, 0x06	; 6
    30ba:	8c 93       	st	X, r24
    30bc:	08 c0       	rjmp	.+16     	; 0x30ce <ADC_u16ReadASynchronus+0x13a>
                case ADC7 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000111 );     break;
    30be:	a7 e2       	ldi	r26, 0x27	; 39
    30c0:	b0 e0       	ldi	r27, 0x00	; 0
    30c2:	e7 e2       	ldi	r30, 0x27	; 39
    30c4:	f0 e0       	ldi	r31, 0x00	; 0
    30c6:	80 81       	ld	r24, Z
    30c8:	80 7e       	andi	r24, 0xE0	; 224
    30ca:	87 60       	ori	r24, 0x07	; 7
    30cc:	8c 93       	st	X, r24
                default   :                                                                 break;
            }
        
            /*    Set The Call Back Function    */ 
            Global_PF_Vector_16 = Local_PvoidCallBackFunctionPtr ;
    30ce:	8a 81       	ldd	r24, Y+2	; 0x02
    30d0:	9b 81       	ldd	r25, Y+3	; 0x03
    30d2:	90 93 50 02 	sts	0x0250, r25
    30d6:	80 93 4f 02 	sts	0x024F, r24
          
            /*    Start Conversion    */ 
            #if ( ADATE == ENABLE )
                // Start Conversion When Triggering Occures.
            #elif ( ADATE == DISABLE )
              SET_BIT(ADCSRA_REG,ADCSRA_ADSC);
    30da:	a6 e2       	ldi	r26, 0x26	; 38
    30dc:	b0 e0       	ldi	r27, 0x00	; 0
    30de:	e6 e2       	ldi	r30, 0x26	; 38
    30e0:	f0 e0       	ldi	r31, 0x00	; 0
    30e2:	80 81       	ld	r24, Z
    30e4:	80 64       	ori	r24, 0x40	; 64
    30e6:	8c 93       	st	X, r24
            #endif
          
            /*     Enable ADIE  AD Interrupt Enable  and Interrupt Flag Will Cleared Automaticlly.       */   
          SET_BIT(ADCSRA_REG,ADCSRA_ADIE);
    30e8:	a6 e2       	ldi	r26, 0x26	; 38
    30ea:	b0 e0       	ldi	r27, 0x00	; 0
    30ec:	e6 e2       	ldi	r30, 0x26	; 38
    30ee:	f0 e0       	ldi	r31, 0x00	; 0
    30f0:	80 81       	ld	r24, Z
    30f2:	88 60       	ori	r24, 0x08	; 8
    30f4:	8c 93       	st	X, r24
     
           return ADC_u16Result ; 
    30f6:	20 91 51 02 	lds	r18, 0x0251
    30fa:	30 91 52 02 	lds	r19, 0x0252
    30fe:	3f 83       	std	Y+7, r19	; 0x07
    3100:	2e 83       	std	Y+6, r18	; 0x06
    3102:	8e 81       	ldd	r24, Y+6	; 0x06
    3104:	9f 81       	ldd	r25, Y+7	; 0x07
        
    }
}
    3106:	27 96       	adiw	r28, 0x07	; 7
    3108:	0f b6       	in	r0, 0x3f	; 63
    310a:	f8 94       	cli
    310c:	de bf       	out	0x3e, r29	; 62
    310e:	0f be       	out	0x3f, r0	; 63
    3110:	cd bf       	out	0x3d, r28	; 61
    3112:	cf 91       	pop	r28
    3114:	df 91       	pop	r29
    3116:	08 95       	ret

00003118 <__vector_16>:

void __vector_16 (void)   __attribute__((signal));
void __vector_16 (void)
{
    3118:	1f 92       	push	r1
    311a:	0f 92       	push	r0
    311c:	0f b6       	in	r0, 0x3f	; 63
    311e:	0f 92       	push	r0
    3120:	11 24       	eor	r1, r1
    3122:	2f 93       	push	r18
    3124:	3f 93       	push	r19
    3126:	4f 93       	push	r20
    3128:	5f 93       	push	r21
    312a:	6f 93       	push	r22
    312c:	7f 93       	push	r23
    312e:	8f 93       	push	r24
    3130:	9f 93       	push	r25
    3132:	af 93       	push	r26
    3134:	bf 93       	push	r27
    3136:	ef 93       	push	r30
    3138:	ff 93       	push	r31
    313a:	df 93       	push	r29
    313c:	cf 93       	push	r28
    313e:	cd b7       	in	r28, 0x3d	; 61
    3140:	de b7       	in	r29, 0x3e	; 62


    #if ( ADJUST == RIGHT )
    ADC_u16Result = ADC_REG ;      
    3142:	e4 e2       	ldi	r30, 0x24	; 36
    3144:	f0 e0       	ldi	r31, 0x00	; 0
    3146:	80 81       	ld	r24, Z
    3148:	91 81       	ldd	r25, Z+1	; 0x01
    314a:	90 93 52 02 	sts	0x0252, r25
    314e:	80 93 51 02 	sts	0x0251, r24
    #elif ( ADJUST == LEFT )
    ADC_u16Result = ADCH_REG ;
    #endif

/*   Make the ADC State is NOT Busy because it's Completed   */
    ADC_u18BusyFlag = NOT_BUSY ;
    3152:	81 e0       	ldi	r24, 0x01	; 1
    3154:	80 93 53 02 	sts	0x0253, r24

/*   Call Call Back Function br Global PTR   */
    Global_PF_Vector_16 ();
    3158:	e0 91 4f 02 	lds	r30, 0x024F
    315c:	f0 91 50 02 	lds	r31, 0x0250
    3160:	09 95       	icall

/*     Disable ADIE  AD Interrupt Enable     */   
    CLR_BIT(ADCSRA_REG,ADCSRA_ADIE);
    3162:	a6 e2       	ldi	r26, 0x26	; 38
    3164:	b0 e0       	ldi	r27, 0x00	; 0
    3166:	e6 e2       	ldi	r30, 0x26	; 38
    3168:	f0 e0       	ldi	r31, 0x00	; 0
    316a:	80 81       	ld	r24, Z
    316c:	87 7f       	andi	r24, 0xF7	; 247
    316e:	8c 93       	st	X, r24
    
}
    3170:	cf 91       	pop	r28
    3172:	df 91       	pop	r29
    3174:	ff 91       	pop	r31
    3176:	ef 91       	pop	r30
    3178:	bf 91       	pop	r27
    317a:	af 91       	pop	r26
    317c:	9f 91       	pop	r25
    317e:	8f 91       	pop	r24
    3180:	7f 91       	pop	r23
    3182:	6f 91       	pop	r22
    3184:	5f 91       	pop	r21
    3186:	4f 91       	pop	r20
    3188:	3f 91       	pop	r19
    318a:	2f 91       	pop	r18
    318c:	0f 90       	pop	r0
    318e:	0f be       	out	0x3f, r0	; 63
    3190:	0f 90       	pop	r0
    3192:	1f 90       	pop	r1
    3194:	18 95       	reti

00003196 <Stepper_voidInit>:
#include "../../MCAL/DIO/DIO_Interface.h"
#include "STEPPER.h"


void Stepper_voidInit(void)
{
    3196:	df 93       	push	r29
    3198:	cf 93       	push	r28
    319a:	cd b7       	in	r28, 0x3d	; 61
    319c:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(STEPPER_PORT, COIL_BLUE  , DIO_OUTPUT);
    319e:	82 e0       	ldi	r24, 0x02	; 2
    31a0:	60 e0       	ldi	r22, 0x00	; 0
    31a2:	41 e0       	ldi	r20, 0x01	; 1
    31a4:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(STEPPER_PORT, COIL_PINK  , DIO_OUTPUT);
    31a8:	82 e0       	ldi	r24, 0x02	; 2
    31aa:	61 e0       	ldi	r22, 0x01	; 1
    31ac:	41 e0       	ldi	r20, 0x01	; 1
    31ae:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(STEPPER_PORT, COIL_YELLOW, DIO_OUTPUT);
    31b2:	82 e0       	ldi	r24, 0x02	; 2
    31b4:	62 e0       	ldi	r22, 0x02	; 2
    31b6:	41 e0       	ldi	r20, 0x01	; 1
    31b8:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(STEPPER_PORT, COIL_ORANGE, DIO_OUTPUT);
    31bc:	82 e0       	ldi	r24, 0x02	; 2
    31be:	63 e0       	ldi	r22, 0x03	; 3
    31c0:	41 e0       	ldi	r20, 0x01	; 1
    31c2:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <DIO_voidSetPinDirection>

}
    31c6:	cf 91       	pop	r28
    31c8:	df 91       	pop	r29
    31ca:	08 95       	ret

000031cc <Stepper_voidRotateCW>:
void Stepper_voidRotateCW(void)
{
    31cc:	df 93       	push	r29
    31ce:	cf 93       	push	r28
    31d0:	cd b7       	in	r28, 0x3d	; 61
    31d2:	de b7       	in	r29, 0x3e	; 62
    31d4:	e8 97       	sbiw	r28, 0x38	; 56
    31d6:	0f b6       	in	r0, 0x3f	; 63
    31d8:	f8 94       	cli
    31da:	de bf       	out	0x3e, r29	; 62
    31dc:	0f be       	out	0x3f, r0	; 63
    31de:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinValue(STEPPER_PORT, COIL_BLUE  , DIO_HIGH);
    31e0:	82 e0       	ldi	r24, 0x02	; 2
    31e2:	60 e0       	ldi	r22, 0x00	; 0
    31e4:	41 e0       	ldi	r20, 0x01	; 1
    31e6:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT, COIL_PINK  , DIO_LOW );
    31ea:	82 e0       	ldi	r24, 0x02	; 2
    31ec:	61 e0       	ldi	r22, 0x01	; 1
    31ee:	40 e0       	ldi	r20, 0x00	; 0
    31f0:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT, COIL_YELLOW, DIO_LOW );
    31f4:	82 e0       	ldi	r24, 0x02	; 2
    31f6:	62 e0       	ldi	r22, 0x02	; 2
    31f8:	40 e0       	ldi	r20, 0x00	; 0
    31fa:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT, COIL_ORANGE, DIO_LOW );
    31fe:	82 e0       	ldi	r24, 0x02	; 2
    3200:	63 e0       	ldi	r22, 0x03	; 3
    3202:	40 e0       	ldi	r20, 0x00	; 0
    3204:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
    3208:	80 e0       	ldi	r24, 0x00	; 0
    320a:	90 e0       	ldi	r25, 0x00	; 0
    320c:	a8 ec       	ldi	r26, 0xC8	; 200
    320e:	b2 e4       	ldi	r27, 0x42	; 66
    3210:	8d ab       	std	Y+53, r24	; 0x35
    3212:	9e ab       	std	Y+54, r25	; 0x36
    3214:	af ab       	std	Y+55, r26	; 0x37
    3216:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3218:	6d a9       	ldd	r22, Y+53	; 0x35
    321a:	7e a9       	ldd	r23, Y+54	; 0x36
    321c:	8f a9       	ldd	r24, Y+55	; 0x37
    321e:	98 ad       	ldd	r25, Y+56	; 0x38
    3220:	20 e0       	ldi	r18, 0x00	; 0
    3222:	30 e0       	ldi	r19, 0x00	; 0
    3224:	4a ef       	ldi	r20, 0xFA	; 250
    3226:	54 e4       	ldi	r21, 0x44	; 68
    3228:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    322c:	dc 01       	movw	r26, r24
    322e:	cb 01       	movw	r24, r22
    3230:	89 ab       	std	Y+49, r24	; 0x31
    3232:	9a ab       	std	Y+50, r25	; 0x32
    3234:	ab ab       	std	Y+51, r26	; 0x33
    3236:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3238:	69 a9       	ldd	r22, Y+49	; 0x31
    323a:	7a a9       	ldd	r23, Y+50	; 0x32
    323c:	8b a9       	ldd	r24, Y+51	; 0x33
    323e:	9c a9       	ldd	r25, Y+52	; 0x34
    3240:	20 e0       	ldi	r18, 0x00	; 0
    3242:	30 e0       	ldi	r19, 0x00	; 0
    3244:	40 e8       	ldi	r20, 0x80	; 128
    3246:	5f e3       	ldi	r21, 0x3F	; 63
    3248:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    324c:	88 23       	and	r24, r24
    324e:	2c f4       	brge	.+10     	; 0x325a <Stepper_voidRotateCW+0x8e>
		__ticks = 1;
    3250:	81 e0       	ldi	r24, 0x01	; 1
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	98 ab       	std	Y+48, r25	; 0x30
    3256:	8f a7       	std	Y+47, r24	; 0x2f
    3258:	3f c0       	rjmp	.+126    	; 0x32d8 <Stepper_voidRotateCW+0x10c>
	else if (__tmp > 65535)
    325a:	69 a9       	ldd	r22, Y+49	; 0x31
    325c:	7a a9       	ldd	r23, Y+50	; 0x32
    325e:	8b a9       	ldd	r24, Y+51	; 0x33
    3260:	9c a9       	ldd	r25, Y+52	; 0x34
    3262:	20 e0       	ldi	r18, 0x00	; 0
    3264:	3f ef       	ldi	r19, 0xFF	; 255
    3266:	4f e7       	ldi	r20, 0x7F	; 127
    3268:	57 e4       	ldi	r21, 0x47	; 71
    326a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    326e:	18 16       	cp	r1, r24
    3270:	4c f5       	brge	.+82     	; 0x32c4 <Stepper_voidRotateCW+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3272:	6d a9       	ldd	r22, Y+53	; 0x35
    3274:	7e a9       	ldd	r23, Y+54	; 0x36
    3276:	8f a9       	ldd	r24, Y+55	; 0x37
    3278:	98 ad       	ldd	r25, Y+56	; 0x38
    327a:	20 e0       	ldi	r18, 0x00	; 0
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	40 e2       	ldi	r20, 0x20	; 32
    3280:	51 e4       	ldi	r21, 0x41	; 65
    3282:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3286:	dc 01       	movw	r26, r24
    3288:	cb 01       	movw	r24, r22
    328a:	bc 01       	movw	r22, r24
    328c:	cd 01       	movw	r24, r26
    328e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3292:	dc 01       	movw	r26, r24
    3294:	cb 01       	movw	r24, r22
    3296:	98 ab       	std	Y+48, r25	; 0x30
    3298:	8f a7       	std	Y+47, r24	; 0x2f
    329a:	0f c0       	rjmp	.+30     	; 0x32ba <Stepper_voidRotateCW+0xee>
    329c:	88 ec       	ldi	r24, 0xC8	; 200
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	9e a7       	std	Y+46, r25	; 0x2e
    32a2:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    32a4:	8d a5       	ldd	r24, Y+45	; 0x2d
    32a6:	9e a5       	ldd	r25, Y+46	; 0x2e
    32a8:	01 97       	sbiw	r24, 0x01	; 1
    32aa:	f1 f7       	brne	.-4      	; 0x32a8 <Stepper_voidRotateCW+0xdc>
    32ac:	9e a7       	std	Y+46, r25	; 0x2e
    32ae:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    32b2:	98 a9       	ldd	r25, Y+48	; 0x30
    32b4:	01 97       	sbiw	r24, 0x01	; 1
    32b6:	98 ab       	std	Y+48, r25	; 0x30
    32b8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    32bc:	98 a9       	ldd	r25, Y+48	; 0x30
    32be:	00 97       	sbiw	r24, 0x00	; 0
    32c0:	69 f7       	brne	.-38     	; 0x329c <Stepper_voidRotateCW+0xd0>
    32c2:	14 c0       	rjmp	.+40     	; 0x32ec <Stepper_voidRotateCW+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32c4:	69 a9       	ldd	r22, Y+49	; 0x31
    32c6:	7a a9       	ldd	r23, Y+50	; 0x32
    32c8:	8b a9       	ldd	r24, Y+51	; 0x33
    32ca:	9c a9       	ldd	r25, Y+52	; 0x34
    32cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32d0:	dc 01       	movw	r26, r24
    32d2:	cb 01       	movw	r24, r22
    32d4:	98 ab       	std	Y+48, r25	; 0x30
    32d6:	8f a7       	std	Y+47, r24	; 0x2f
    32d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    32da:	98 a9       	ldd	r25, Y+48	; 0x30
    32dc:	9c a7       	std	Y+44, r25	; 0x2c
    32de:	8b a7       	std	Y+43, r24	; 0x2b
    32e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    32e2:	9c a5       	ldd	r25, Y+44	; 0x2c
    32e4:	01 97       	sbiw	r24, 0x01	; 1
    32e6:	f1 f7       	brne	.-4      	; 0x32e4 <Stepper_voidRotateCW+0x118>
    32e8:	9c a7       	std	Y+44, r25	; 0x2c
    32ea:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(100);

	DIO_voidSetPinValue(STEPPER_PORT, COIL_BLUE  , DIO_LOW );
    32ec:	82 e0       	ldi	r24, 0x02	; 2
    32ee:	60 e0       	ldi	r22, 0x00	; 0
    32f0:	40 e0       	ldi	r20, 0x00	; 0
    32f2:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT, COIL_PINK  , DIO_HIGH);
    32f6:	82 e0       	ldi	r24, 0x02	; 2
    32f8:	61 e0       	ldi	r22, 0x01	; 1
    32fa:	41 e0       	ldi	r20, 0x01	; 1
    32fc:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT, COIL_YELLOW, DIO_LOW );
    3300:	82 e0       	ldi	r24, 0x02	; 2
    3302:	62 e0       	ldi	r22, 0x02	; 2
    3304:	40 e0       	ldi	r20, 0x00	; 0
    3306:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT, COIL_ORANGE, DIO_LOW );
    330a:	82 e0       	ldi	r24, 0x02	; 2
    330c:	63 e0       	ldi	r22, 0x03	; 3
    330e:	40 e0       	ldi	r20, 0x00	; 0
    3310:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
    3314:	80 e0       	ldi	r24, 0x00	; 0
    3316:	90 e0       	ldi	r25, 0x00	; 0
    3318:	a8 ec       	ldi	r26, 0xC8	; 200
    331a:	b2 e4       	ldi	r27, 0x42	; 66
    331c:	8f a3       	std	Y+39, r24	; 0x27
    331e:	98 a7       	std	Y+40, r25	; 0x28
    3320:	a9 a7       	std	Y+41, r26	; 0x29
    3322:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3324:	6f a1       	ldd	r22, Y+39	; 0x27
    3326:	78 a5       	ldd	r23, Y+40	; 0x28
    3328:	89 a5       	ldd	r24, Y+41	; 0x29
    332a:	9a a5       	ldd	r25, Y+42	; 0x2a
    332c:	20 e0       	ldi	r18, 0x00	; 0
    332e:	30 e0       	ldi	r19, 0x00	; 0
    3330:	4a ef       	ldi	r20, 0xFA	; 250
    3332:	54 e4       	ldi	r21, 0x44	; 68
    3334:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3338:	dc 01       	movw	r26, r24
    333a:	cb 01       	movw	r24, r22
    333c:	8b a3       	std	Y+35, r24	; 0x23
    333e:	9c a3       	std	Y+36, r25	; 0x24
    3340:	ad a3       	std	Y+37, r26	; 0x25
    3342:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3344:	6b a1       	ldd	r22, Y+35	; 0x23
    3346:	7c a1       	ldd	r23, Y+36	; 0x24
    3348:	8d a1       	ldd	r24, Y+37	; 0x25
    334a:	9e a1       	ldd	r25, Y+38	; 0x26
    334c:	20 e0       	ldi	r18, 0x00	; 0
    334e:	30 e0       	ldi	r19, 0x00	; 0
    3350:	40 e8       	ldi	r20, 0x80	; 128
    3352:	5f e3       	ldi	r21, 0x3F	; 63
    3354:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3358:	88 23       	and	r24, r24
    335a:	2c f4       	brge	.+10     	; 0x3366 <Stepper_voidRotateCW+0x19a>
		__ticks = 1;
    335c:	81 e0       	ldi	r24, 0x01	; 1
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	9a a3       	std	Y+34, r25	; 0x22
    3362:	89 a3       	std	Y+33, r24	; 0x21
    3364:	3f c0       	rjmp	.+126    	; 0x33e4 <Stepper_voidRotateCW+0x218>
	else if (__tmp > 65535)
    3366:	6b a1       	ldd	r22, Y+35	; 0x23
    3368:	7c a1       	ldd	r23, Y+36	; 0x24
    336a:	8d a1       	ldd	r24, Y+37	; 0x25
    336c:	9e a1       	ldd	r25, Y+38	; 0x26
    336e:	20 e0       	ldi	r18, 0x00	; 0
    3370:	3f ef       	ldi	r19, 0xFF	; 255
    3372:	4f e7       	ldi	r20, 0x7F	; 127
    3374:	57 e4       	ldi	r21, 0x47	; 71
    3376:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    337a:	18 16       	cp	r1, r24
    337c:	4c f5       	brge	.+82     	; 0x33d0 <Stepper_voidRotateCW+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    337e:	6f a1       	ldd	r22, Y+39	; 0x27
    3380:	78 a5       	ldd	r23, Y+40	; 0x28
    3382:	89 a5       	ldd	r24, Y+41	; 0x29
    3384:	9a a5       	ldd	r25, Y+42	; 0x2a
    3386:	20 e0       	ldi	r18, 0x00	; 0
    3388:	30 e0       	ldi	r19, 0x00	; 0
    338a:	40 e2       	ldi	r20, 0x20	; 32
    338c:	51 e4       	ldi	r21, 0x41	; 65
    338e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3392:	dc 01       	movw	r26, r24
    3394:	cb 01       	movw	r24, r22
    3396:	bc 01       	movw	r22, r24
    3398:	cd 01       	movw	r24, r26
    339a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    339e:	dc 01       	movw	r26, r24
    33a0:	cb 01       	movw	r24, r22
    33a2:	9a a3       	std	Y+34, r25	; 0x22
    33a4:	89 a3       	std	Y+33, r24	; 0x21
    33a6:	0f c0       	rjmp	.+30     	; 0x33c6 <Stepper_voidRotateCW+0x1fa>
    33a8:	88 ec       	ldi	r24, 0xC8	; 200
    33aa:	90 e0       	ldi	r25, 0x00	; 0
    33ac:	98 a3       	std	Y+32, r25	; 0x20
    33ae:	8f 8f       	std	Y+31, r24	; 0x1f
    33b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    33b2:	98 a1       	ldd	r25, Y+32	; 0x20
    33b4:	01 97       	sbiw	r24, 0x01	; 1
    33b6:	f1 f7       	brne	.-4      	; 0x33b4 <Stepper_voidRotateCW+0x1e8>
    33b8:	98 a3       	std	Y+32, r25	; 0x20
    33ba:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33bc:	89 a1       	ldd	r24, Y+33	; 0x21
    33be:	9a a1       	ldd	r25, Y+34	; 0x22
    33c0:	01 97       	sbiw	r24, 0x01	; 1
    33c2:	9a a3       	std	Y+34, r25	; 0x22
    33c4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33c6:	89 a1       	ldd	r24, Y+33	; 0x21
    33c8:	9a a1       	ldd	r25, Y+34	; 0x22
    33ca:	00 97       	sbiw	r24, 0x00	; 0
    33cc:	69 f7       	brne	.-38     	; 0x33a8 <Stepper_voidRotateCW+0x1dc>
    33ce:	14 c0       	rjmp	.+40     	; 0x33f8 <Stepper_voidRotateCW+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33d0:	6b a1       	ldd	r22, Y+35	; 0x23
    33d2:	7c a1       	ldd	r23, Y+36	; 0x24
    33d4:	8d a1       	ldd	r24, Y+37	; 0x25
    33d6:	9e a1       	ldd	r25, Y+38	; 0x26
    33d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33dc:	dc 01       	movw	r26, r24
    33de:	cb 01       	movw	r24, r22
    33e0:	9a a3       	std	Y+34, r25	; 0x22
    33e2:	89 a3       	std	Y+33, r24	; 0x21
    33e4:	89 a1       	ldd	r24, Y+33	; 0x21
    33e6:	9a a1       	ldd	r25, Y+34	; 0x22
    33e8:	9e 8f       	std	Y+30, r25	; 0x1e
    33ea:	8d 8f       	std	Y+29, r24	; 0x1d
    33ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33ee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    33f0:	01 97       	sbiw	r24, 0x01	; 1
    33f2:	f1 f7       	brne	.-4      	; 0x33f0 <Stepper_voidRotateCW+0x224>
    33f4:	9e 8f       	std	Y+30, r25	; 0x1e
    33f6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(100);

	DIO_voidSetPinValue(STEPPER_PORT, COIL_BLUE  , DIO_LOW );
    33f8:	82 e0       	ldi	r24, 0x02	; 2
    33fa:	60 e0       	ldi	r22, 0x00	; 0
    33fc:	40 e0       	ldi	r20, 0x00	; 0
    33fe:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT, COIL_PINK  , DIO_LOW );
    3402:	82 e0       	ldi	r24, 0x02	; 2
    3404:	61 e0       	ldi	r22, 0x01	; 1
    3406:	40 e0       	ldi	r20, 0x00	; 0
    3408:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT, COIL_YELLOW, DIO_HIGH);
    340c:	82 e0       	ldi	r24, 0x02	; 2
    340e:	62 e0       	ldi	r22, 0x02	; 2
    3410:	41 e0       	ldi	r20, 0x01	; 1
    3412:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT, COIL_ORANGE, DIO_LOW );
    3416:	82 e0       	ldi	r24, 0x02	; 2
    3418:	63 e0       	ldi	r22, 0x03	; 3
    341a:	40 e0       	ldi	r20, 0x00	; 0
    341c:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
    3420:	80 e0       	ldi	r24, 0x00	; 0
    3422:	90 e0       	ldi	r25, 0x00	; 0
    3424:	a8 ec       	ldi	r26, 0xC8	; 200
    3426:	b2 e4       	ldi	r27, 0x42	; 66
    3428:	89 8f       	std	Y+25, r24	; 0x19
    342a:	9a 8f       	std	Y+26, r25	; 0x1a
    342c:	ab 8f       	std	Y+27, r26	; 0x1b
    342e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3430:	69 8d       	ldd	r22, Y+25	; 0x19
    3432:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3434:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3436:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3438:	20 e0       	ldi	r18, 0x00	; 0
    343a:	30 e0       	ldi	r19, 0x00	; 0
    343c:	4a ef       	ldi	r20, 0xFA	; 250
    343e:	54 e4       	ldi	r21, 0x44	; 68
    3440:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3444:	dc 01       	movw	r26, r24
    3446:	cb 01       	movw	r24, r22
    3448:	8d 8b       	std	Y+21, r24	; 0x15
    344a:	9e 8b       	std	Y+22, r25	; 0x16
    344c:	af 8b       	std	Y+23, r26	; 0x17
    344e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3450:	6d 89       	ldd	r22, Y+21	; 0x15
    3452:	7e 89       	ldd	r23, Y+22	; 0x16
    3454:	8f 89       	ldd	r24, Y+23	; 0x17
    3456:	98 8d       	ldd	r25, Y+24	; 0x18
    3458:	20 e0       	ldi	r18, 0x00	; 0
    345a:	30 e0       	ldi	r19, 0x00	; 0
    345c:	40 e8       	ldi	r20, 0x80	; 128
    345e:	5f e3       	ldi	r21, 0x3F	; 63
    3460:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3464:	88 23       	and	r24, r24
    3466:	2c f4       	brge	.+10     	; 0x3472 <Stepper_voidRotateCW+0x2a6>
		__ticks = 1;
    3468:	81 e0       	ldi	r24, 0x01	; 1
    346a:	90 e0       	ldi	r25, 0x00	; 0
    346c:	9c 8b       	std	Y+20, r25	; 0x14
    346e:	8b 8b       	std	Y+19, r24	; 0x13
    3470:	3f c0       	rjmp	.+126    	; 0x34f0 <Stepper_voidRotateCW+0x324>
	else if (__tmp > 65535)
    3472:	6d 89       	ldd	r22, Y+21	; 0x15
    3474:	7e 89       	ldd	r23, Y+22	; 0x16
    3476:	8f 89       	ldd	r24, Y+23	; 0x17
    3478:	98 8d       	ldd	r25, Y+24	; 0x18
    347a:	20 e0       	ldi	r18, 0x00	; 0
    347c:	3f ef       	ldi	r19, 0xFF	; 255
    347e:	4f e7       	ldi	r20, 0x7F	; 127
    3480:	57 e4       	ldi	r21, 0x47	; 71
    3482:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3486:	18 16       	cp	r1, r24
    3488:	4c f5       	brge	.+82     	; 0x34dc <Stepper_voidRotateCW+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    348a:	69 8d       	ldd	r22, Y+25	; 0x19
    348c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    348e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3490:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3492:	20 e0       	ldi	r18, 0x00	; 0
    3494:	30 e0       	ldi	r19, 0x00	; 0
    3496:	40 e2       	ldi	r20, 0x20	; 32
    3498:	51 e4       	ldi	r21, 0x41	; 65
    349a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    349e:	dc 01       	movw	r26, r24
    34a0:	cb 01       	movw	r24, r22
    34a2:	bc 01       	movw	r22, r24
    34a4:	cd 01       	movw	r24, r26
    34a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34aa:	dc 01       	movw	r26, r24
    34ac:	cb 01       	movw	r24, r22
    34ae:	9c 8b       	std	Y+20, r25	; 0x14
    34b0:	8b 8b       	std	Y+19, r24	; 0x13
    34b2:	0f c0       	rjmp	.+30     	; 0x34d2 <Stepper_voidRotateCW+0x306>
    34b4:	88 ec       	ldi	r24, 0xC8	; 200
    34b6:	90 e0       	ldi	r25, 0x00	; 0
    34b8:	9a 8b       	std	Y+18, r25	; 0x12
    34ba:	89 8b       	std	Y+17, r24	; 0x11
    34bc:	89 89       	ldd	r24, Y+17	; 0x11
    34be:	9a 89       	ldd	r25, Y+18	; 0x12
    34c0:	01 97       	sbiw	r24, 0x01	; 1
    34c2:	f1 f7       	brne	.-4      	; 0x34c0 <Stepper_voidRotateCW+0x2f4>
    34c4:	9a 8b       	std	Y+18, r25	; 0x12
    34c6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34c8:	8b 89       	ldd	r24, Y+19	; 0x13
    34ca:	9c 89       	ldd	r25, Y+20	; 0x14
    34cc:	01 97       	sbiw	r24, 0x01	; 1
    34ce:	9c 8b       	std	Y+20, r25	; 0x14
    34d0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34d2:	8b 89       	ldd	r24, Y+19	; 0x13
    34d4:	9c 89       	ldd	r25, Y+20	; 0x14
    34d6:	00 97       	sbiw	r24, 0x00	; 0
    34d8:	69 f7       	brne	.-38     	; 0x34b4 <Stepper_voidRotateCW+0x2e8>
    34da:	14 c0       	rjmp	.+40     	; 0x3504 <Stepper_voidRotateCW+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34dc:	6d 89       	ldd	r22, Y+21	; 0x15
    34de:	7e 89       	ldd	r23, Y+22	; 0x16
    34e0:	8f 89       	ldd	r24, Y+23	; 0x17
    34e2:	98 8d       	ldd	r25, Y+24	; 0x18
    34e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34e8:	dc 01       	movw	r26, r24
    34ea:	cb 01       	movw	r24, r22
    34ec:	9c 8b       	std	Y+20, r25	; 0x14
    34ee:	8b 8b       	std	Y+19, r24	; 0x13
    34f0:	8b 89       	ldd	r24, Y+19	; 0x13
    34f2:	9c 89       	ldd	r25, Y+20	; 0x14
    34f4:	98 8b       	std	Y+16, r25	; 0x10
    34f6:	8f 87       	std	Y+15, r24	; 0x0f
    34f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    34fa:	98 89       	ldd	r25, Y+16	; 0x10
    34fc:	01 97       	sbiw	r24, 0x01	; 1
    34fe:	f1 f7       	brne	.-4      	; 0x34fc <Stepper_voidRotateCW+0x330>
    3500:	98 8b       	std	Y+16, r25	; 0x10
    3502:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);

	DIO_voidSetPinValue(STEPPER_PORT, COIL_BLUE  , DIO_LOW );
    3504:	82 e0       	ldi	r24, 0x02	; 2
    3506:	60 e0       	ldi	r22, 0x00	; 0
    3508:	40 e0       	ldi	r20, 0x00	; 0
    350a:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT, COIL_PINK  , DIO_LOW );
    350e:	82 e0       	ldi	r24, 0x02	; 2
    3510:	61 e0       	ldi	r22, 0x01	; 1
    3512:	40 e0       	ldi	r20, 0x00	; 0
    3514:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT, COIL_YELLOW, DIO_LOW );
    3518:	82 e0       	ldi	r24, 0x02	; 2
    351a:	62 e0       	ldi	r22, 0x02	; 2
    351c:	40 e0       	ldi	r20, 0x00	; 0
    351e:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT, COIL_ORANGE, DIO_HIGH);
    3522:	82 e0       	ldi	r24, 0x02	; 2
    3524:	63 e0       	ldi	r22, 0x03	; 3
    3526:	41 e0       	ldi	r20, 0x01	; 1
    3528:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
    352c:	80 e0       	ldi	r24, 0x00	; 0
    352e:	90 e0       	ldi	r25, 0x00	; 0
    3530:	a8 ec       	ldi	r26, 0xC8	; 200
    3532:	b2 e4       	ldi	r27, 0x42	; 66
    3534:	8b 87       	std	Y+11, r24	; 0x0b
    3536:	9c 87       	std	Y+12, r25	; 0x0c
    3538:	ad 87       	std	Y+13, r26	; 0x0d
    353a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    353c:	6b 85       	ldd	r22, Y+11	; 0x0b
    353e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3540:	8d 85       	ldd	r24, Y+13	; 0x0d
    3542:	9e 85       	ldd	r25, Y+14	; 0x0e
    3544:	20 e0       	ldi	r18, 0x00	; 0
    3546:	30 e0       	ldi	r19, 0x00	; 0
    3548:	4a ef       	ldi	r20, 0xFA	; 250
    354a:	54 e4       	ldi	r21, 0x44	; 68
    354c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3550:	dc 01       	movw	r26, r24
    3552:	cb 01       	movw	r24, r22
    3554:	8f 83       	std	Y+7, r24	; 0x07
    3556:	98 87       	std	Y+8, r25	; 0x08
    3558:	a9 87       	std	Y+9, r26	; 0x09
    355a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    355c:	6f 81       	ldd	r22, Y+7	; 0x07
    355e:	78 85       	ldd	r23, Y+8	; 0x08
    3560:	89 85       	ldd	r24, Y+9	; 0x09
    3562:	9a 85       	ldd	r25, Y+10	; 0x0a
    3564:	20 e0       	ldi	r18, 0x00	; 0
    3566:	30 e0       	ldi	r19, 0x00	; 0
    3568:	40 e8       	ldi	r20, 0x80	; 128
    356a:	5f e3       	ldi	r21, 0x3F	; 63
    356c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3570:	88 23       	and	r24, r24
    3572:	2c f4       	brge	.+10     	; 0x357e <Stepper_voidRotateCW+0x3b2>
		__ticks = 1;
    3574:	81 e0       	ldi	r24, 0x01	; 1
    3576:	90 e0       	ldi	r25, 0x00	; 0
    3578:	9e 83       	std	Y+6, r25	; 0x06
    357a:	8d 83       	std	Y+5, r24	; 0x05
    357c:	3f c0       	rjmp	.+126    	; 0x35fc <Stepper_voidRotateCW+0x430>
	else if (__tmp > 65535)
    357e:	6f 81       	ldd	r22, Y+7	; 0x07
    3580:	78 85       	ldd	r23, Y+8	; 0x08
    3582:	89 85       	ldd	r24, Y+9	; 0x09
    3584:	9a 85       	ldd	r25, Y+10	; 0x0a
    3586:	20 e0       	ldi	r18, 0x00	; 0
    3588:	3f ef       	ldi	r19, 0xFF	; 255
    358a:	4f e7       	ldi	r20, 0x7F	; 127
    358c:	57 e4       	ldi	r21, 0x47	; 71
    358e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3592:	18 16       	cp	r1, r24
    3594:	4c f5       	brge	.+82     	; 0x35e8 <Stepper_voidRotateCW+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3596:	6b 85       	ldd	r22, Y+11	; 0x0b
    3598:	7c 85       	ldd	r23, Y+12	; 0x0c
    359a:	8d 85       	ldd	r24, Y+13	; 0x0d
    359c:	9e 85       	ldd	r25, Y+14	; 0x0e
    359e:	20 e0       	ldi	r18, 0x00	; 0
    35a0:	30 e0       	ldi	r19, 0x00	; 0
    35a2:	40 e2       	ldi	r20, 0x20	; 32
    35a4:	51 e4       	ldi	r21, 0x41	; 65
    35a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35aa:	dc 01       	movw	r26, r24
    35ac:	cb 01       	movw	r24, r22
    35ae:	bc 01       	movw	r22, r24
    35b0:	cd 01       	movw	r24, r26
    35b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35b6:	dc 01       	movw	r26, r24
    35b8:	cb 01       	movw	r24, r22
    35ba:	9e 83       	std	Y+6, r25	; 0x06
    35bc:	8d 83       	std	Y+5, r24	; 0x05
    35be:	0f c0       	rjmp	.+30     	; 0x35de <Stepper_voidRotateCW+0x412>
    35c0:	88 ec       	ldi	r24, 0xC8	; 200
    35c2:	90 e0       	ldi	r25, 0x00	; 0
    35c4:	9c 83       	std	Y+4, r25	; 0x04
    35c6:	8b 83       	std	Y+3, r24	; 0x03
    35c8:	8b 81       	ldd	r24, Y+3	; 0x03
    35ca:	9c 81       	ldd	r25, Y+4	; 0x04
    35cc:	01 97       	sbiw	r24, 0x01	; 1
    35ce:	f1 f7       	brne	.-4      	; 0x35cc <Stepper_voidRotateCW+0x400>
    35d0:	9c 83       	std	Y+4, r25	; 0x04
    35d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35d4:	8d 81       	ldd	r24, Y+5	; 0x05
    35d6:	9e 81       	ldd	r25, Y+6	; 0x06
    35d8:	01 97       	sbiw	r24, 0x01	; 1
    35da:	9e 83       	std	Y+6, r25	; 0x06
    35dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35de:	8d 81       	ldd	r24, Y+5	; 0x05
    35e0:	9e 81       	ldd	r25, Y+6	; 0x06
    35e2:	00 97       	sbiw	r24, 0x00	; 0
    35e4:	69 f7       	brne	.-38     	; 0x35c0 <Stepper_voidRotateCW+0x3f4>
    35e6:	14 c0       	rjmp	.+40     	; 0x3610 <Stepper_voidRotateCW+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35e8:	6f 81       	ldd	r22, Y+7	; 0x07
    35ea:	78 85       	ldd	r23, Y+8	; 0x08
    35ec:	89 85       	ldd	r24, Y+9	; 0x09
    35ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    35f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f4:	dc 01       	movw	r26, r24
    35f6:	cb 01       	movw	r24, r22
    35f8:	9e 83       	std	Y+6, r25	; 0x06
    35fa:	8d 83       	std	Y+5, r24	; 0x05
    35fc:	8d 81       	ldd	r24, Y+5	; 0x05
    35fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3600:	9a 83       	std	Y+2, r25	; 0x02
    3602:	89 83       	std	Y+1, r24	; 0x01
    3604:	89 81       	ldd	r24, Y+1	; 0x01
    3606:	9a 81       	ldd	r25, Y+2	; 0x02
    3608:	01 97       	sbiw	r24, 0x01	; 1
    360a:	f1 f7       	brne	.-4      	; 0x3608 <Stepper_voidRotateCW+0x43c>
    360c:	9a 83       	std	Y+2, r25	; 0x02
    360e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);

}
    3610:	e8 96       	adiw	r28, 0x38	; 56
    3612:	0f b6       	in	r0, 0x3f	; 63
    3614:	f8 94       	cli
    3616:	de bf       	out	0x3e, r29	; 62
    3618:	0f be       	out	0x3f, r0	; 63
    361a:	cd bf       	out	0x3d, r28	; 61
    361c:	cf 91       	pop	r28
    361e:	df 91       	pop	r29
    3620:	08 95       	ret

00003622 <Stepper_voidRotateACW>:
void Stepper_voidRotateACW(void)
{
    3622:	df 93       	push	r29
    3624:	cf 93       	push	r28
    3626:	cd b7       	in	r28, 0x3d	; 61
    3628:	de b7       	in	r29, 0x3e	; 62
    362a:	e8 97       	sbiw	r28, 0x38	; 56
    362c:	0f b6       	in	r0, 0x3f	; 63
    362e:	f8 94       	cli
    3630:	de bf       	out	0x3e, r29	; 62
    3632:	0f be       	out	0x3f, r0	; 63
    3634:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinValue(STEPPER_PORT, COIL_BLUE  , DIO_LOW );
    3636:	82 e0       	ldi	r24, 0x02	; 2
    3638:	60 e0       	ldi	r22, 0x00	; 0
    363a:	40 e0       	ldi	r20, 0x00	; 0
    363c:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT, COIL_PINK  , DIO_LOW );
    3640:	82 e0       	ldi	r24, 0x02	; 2
    3642:	61 e0       	ldi	r22, 0x01	; 1
    3644:	40 e0       	ldi	r20, 0x00	; 0
    3646:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT, COIL_YELLOW, DIO_LOW );
    364a:	82 e0       	ldi	r24, 0x02	; 2
    364c:	62 e0       	ldi	r22, 0x02	; 2
    364e:	40 e0       	ldi	r20, 0x00	; 0
    3650:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT, COIL_ORANGE, DIO_HIGH);
    3654:	82 e0       	ldi	r24, 0x02	; 2
    3656:	63 e0       	ldi	r22, 0x03	; 3
    3658:	41 e0       	ldi	r20, 0x01	; 1
    365a:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
    365e:	80 e0       	ldi	r24, 0x00	; 0
    3660:	90 e0       	ldi	r25, 0x00	; 0
    3662:	a8 ec       	ldi	r26, 0xC8	; 200
    3664:	b2 e4       	ldi	r27, 0x42	; 66
    3666:	8d ab       	std	Y+53, r24	; 0x35
    3668:	9e ab       	std	Y+54, r25	; 0x36
    366a:	af ab       	std	Y+55, r26	; 0x37
    366c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    366e:	6d a9       	ldd	r22, Y+53	; 0x35
    3670:	7e a9       	ldd	r23, Y+54	; 0x36
    3672:	8f a9       	ldd	r24, Y+55	; 0x37
    3674:	98 ad       	ldd	r25, Y+56	; 0x38
    3676:	20 e0       	ldi	r18, 0x00	; 0
    3678:	30 e0       	ldi	r19, 0x00	; 0
    367a:	4a ef       	ldi	r20, 0xFA	; 250
    367c:	54 e4       	ldi	r21, 0x44	; 68
    367e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3682:	dc 01       	movw	r26, r24
    3684:	cb 01       	movw	r24, r22
    3686:	89 ab       	std	Y+49, r24	; 0x31
    3688:	9a ab       	std	Y+50, r25	; 0x32
    368a:	ab ab       	std	Y+51, r26	; 0x33
    368c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    368e:	69 a9       	ldd	r22, Y+49	; 0x31
    3690:	7a a9       	ldd	r23, Y+50	; 0x32
    3692:	8b a9       	ldd	r24, Y+51	; 0x33
    3694:	9c a9       	ldd	r25, Y+52	; 0x34
    3696:	20 e0       	ldi	r18, 0x00	; 0
    3698:	30 e0       	ldi	r19, 0x00	; 0
    369a:	40 e8       	ldi	r20, 0x80	; 128
    369c:	5f e3       	ldi	r21, 0x3F	; 63
    369e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    36a2:	88 23       	and	r24, r24
    36a4:	2c f4       	brge	.+10     	; 0x36b0 <Stepper_voidRotateACW+0x8e>
		__ticks = 1;
    36a6:	81 e0       	ldi	r24, 0x01	; 1
    36a8:	90 e0       	ldi	r25, 0x00	; 0
    36aa:	98 ab       	std	Y+48, r25	; 0x30
    36ac:	8f a7       	std	Y+47, r24	; 0x2f
    36ae:	3f c0       	rjmp	.+126    	; 0x372e <Stepper_voidRotateACW+0x10c>
	else if (__tmp > 65535)
    36b0:	69 a9       	ldd	r22, Y+49	; 0x31
    36b2:	7a a9       	ldd	r23, Y+50	; 0x32
    36b4:	8b a9       	ldd	r24, Y+51	; 0x33
    36b6:	9c a9       	ldd	r25, Y+52	; 0x34
    36b8:	20 e0       	ldi	r18, 0x00	; 0
    36ba:	3f ef       	ldi	r19, 0xFF	; 255
    36bc:	4f e7       	ldi	r20, 0x7F	; 127
    36be:	57 e4       	ldi	r21, 0x47	; 71
    36c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36c4:	18 16       	cp	r1, r24
    36c6:	4c f5       	brge	.+82     	; 0x371a <Stepper_voidRotateACW+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36c8:	6d a9       	ldd	r22, Y+53	; 0x35
    36ca:	7e a9       	ldd	r23, Y+54	; 0x36
    36cc:	8f a9       	ldd	r24, Y+55	; 0x37
    36ce:	98 ad       	ldd	r25, Y+56	; 0x38
    36d0:	20 e0       	ldi	r18, 0x00	; 0
    36d2:	30 e0       	ldi	r19, 0x00	; 0
    36d4:	40 e2       	ldi	r20, 0x20	; 32
    36d6:	51 e4       	ldi	r21, 0x41	; 65
    36d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36dc:	dc 01       	movw	r26, r24
    36de:	cb 01       	movw	r24, r22
    36e0:	bc 01       	movw	r22, r24
    36e2:	cd 01       	movw	r24, r26
    36e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36e8:	dc 01       	movw	r26, r24
    36ea:	cb 01       	movw	r24, r22
    36ec:	98 ab       	std	Y+48, r25	; 0x30
    36ee:	8f a7       	std	Y+47, r24	; 0x2f
    36f0:	0f c0       	rjmp	.+30     	; 0x3710 <Stepper_voidRotateACW+0xee>
    36f2:	88 ec       	ldi	r24, 0xC8	; 200
    36f4:	90 e0       	ldi	r25, 0x00	; 0
    36f6:	9e a7       	std	Y+46, r25	; 0x2e
    36f8:	8d a7       	std	Y+45, r24	; 0x2d
    36fa:	8d a5       	ldd	r24, Y+45	; 0x2d
    36fc:	9e a5       	ldd	r25, Y+46	; 0x2e
    36fe:	01 97       	sbiw	r24, 0x01	; 1
    3700:	f1 f7       	brne	.-4      	; 0x36fe <Stepper_voidRotateACW+0xdc>
    3702:	9e a7       	std	Y+46, r25	; 0x2e
    3704:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3706:	8f a5       	ldd	r24, Y+47	; 0x2f
    3708:	98 a9       	ldd	r25, Y+48	; 0x30
    370a:	01 97       	sbiw	r24, 0x01	; 1
    370c:	98 ab       	std	Y+48, r25	; 0x30
    370e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3710:	8f a5       	ldd	r24, Y+47	; 0x2f
    3712:	98 a9       	ldd	r25, Y+48	; 0x30
    3714:	00 97       	sbiw	r24, 0x00	; 0
    3716:	69 f7       	brne	.-38     	; 0x36f2 <Stepper_voidRotateACW+0xd0>
    3718:	14 c0       	rjmp	.+40     	; 0x3742 <Stepper_voidRotateACW+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    371a:	69 a9       	ldd	r22, Y+49	; 0x31
    371c:	7a a9       	ldd	r23, Y+50	; 0x32
    371e:	8b a9       	ldd	r24, Y+51	; 0x33
    3720:	9c a9       	ldd	r25, Y+52	; 0x34
    3722:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3726:	dc 01       	movw	r26, r24
    3728:	cb 01       	movw	r24, r22
    372a:	98 ab       	std	Y+48, r25	; 0x30
    372c:	8f a7       	std	Y+47, r24	; 0x2f
    372e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3730:	98 a9       	ldd	r25, Y+48	; 0x30
    3732:	9c a7       	std	Y+44, r25	; 0x2c
    3734:	8b a7       	std	Y+43, r24	; 0x2b
    3736:	8b a5       	ldd	r24, Y+43	; 0x2b
    3738:	9c a5       	ldd	r25, Y+44	; 0x2c
    373a:	01 97       	sbiw	r24, 0x01	; 1
    373c:	f1 f7       	brne	.-4      	; 0x373a <Stepper_voidRotateACW+0x118>
    373e:	9c a7       	std	Y+44, r25	; 0x2c
    3740:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(100);

	DIO_voidSetPinValue(STEPPER_PORT, COIL_BLUE  , DIO_LOW );
    3742:	82 e0       	ldi	r24, 0x02	; 2
    3744:	60 e0       	ldi	r22, 0x00	; 0
    3746:	40 e0       	ldi	r20, 0x00	; 0
    3748:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT, COIL_PINK  , DIO_LOW );
    374c:	82 e0       	ldi	r24, 0x02	; 2
    374e:	61 e0       	ldi	r22, 0x01	; 1
    3750:	40 e0       	ldi	r20, 0x00	; 0
    3752:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT, COIL_YELLOW, DIO_HIGH);
    3756:	82 e0       	ldi	r24, 0x02	; 2
    3758:	62 e0       	ldi	r22, 0x02	; 2
    375a:	41 e0       	ldi	r20, 0x01	; 1
    375c:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT, COIL_ORANGE, DIO_LOW );
    3760:	82 e0       	ldi	r24, 0x02	; 2
    3762:	63 e0       	ldi	r22, 0x03	; 3
    3764:	40 e0       	ldi	r20, 0x00	; 0
    3766:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
    376a:	80 e0       	ldi	r24, 0x00	; 0
    376c:	90 e0       	ldi	r25, 0x00	; 0
    376e:	a8 ec       	ldi	r26, 0xC8	; 200
    3770:	b2 e4       	ldi	r27, 0x42	; 66
    3772:	8f a3       	std	Y+39, r24	; 0x27
    3774:	98 a7       	std	Y+40, r25	; 0x28
    3776:	a9 a7       	std	Y+41, r26	; 0x29
    3778:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    377a:	6f a1       	ldd	r22, Y+39	; 0x27
    377c:	78 a5       	ldd	r23, Y+40	; 0x28
    377e:	89 a5       	ldd	r24, Y+41	; 0x29
    3780:	9a a5       	ldd	r25, Y+42	; 0x2a
    3782:	20 e0       	ldi	r18, 0x00	; 0
    3784:	30 e0       	ldi	r19, 0x00	; 0
    3786:	4a ef       	ldi	r20, 0xFA	; 250
    3788:	54 e4       	ldi	r21, 0x44	; 68
    378a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    378e:	dc 01       	movw	r26, r24
    3790:	cb 01       	movw	r24, r22
    3792:	8b a3       	std	Y+35, r24	; 0x23
    3794:	9c a3       	std	Y+36, r25	; 0x24
    3796:	ad a3       	std	Y+37, r26	; 0x25
    3798:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    379a:	6b a1       	ldd	r22, Y+35	; 0x23
    379c:	7c a1       	ldd	r23, Y+36	; 0x24
    379e:	8d a1       	ldd	r24, Y+37	; 0x25
    37a0:	9e a1       	ldd	r25, Y+38	; 0x26
    37a2:	20 e0       	ldi	r18, 0x00	; 0
    37a4:	30 e0       	ldi	r19, 0x00	; 0
    37a6:	40 e8       	ldi	r20, 0x80	; 128
    37a8:	5f e3       	ldi	r21, 0x3F	; 63
    37aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37ae:	88 23       	and	r24, r24
    37b0:	2c f4       	brge	.+10     	; 0x37bc <Stepper_voidRotateACW+0x19a>
		__ticks = 1;
    37b2:	81 e0       	ldi	r24, 0x01	; 1
    37b4:	90 e0       	ldi	r25, 0x00	; 0
    37b6:	9a a3       	std	Y+34, r25	; 0x22
    37b8:	89 a3       	std	Y+33, r24	; 0x21
    37ba:	3f c0       	rjmp	.+126    	; 0x383a <Stepper_voidRotateACW+0x218>
	else if (__tmp > 65535)
    37bc:	6b a1       	ldd	r22, Y+35	; 0x23
    37be:	7c a1       	ldd	r23, Y+36	; 0x24
    37c0:	8d a1       	ldd	r24, Y+37	; 0x25
    37c2:	9e a1       	ldd	r25, Y+38	; 0x26
    37c4:	20 e0       	ldi	r18, 0x00	; 0
    37c6:	3f ef       	ldi	r19, 0xFF	; 255
    37c8:	4f e7       	ldi	r20, 0x7F	; 127
    37ca:	57 e4       	ldi	r21, 0x47	; 71
    37cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37d0:	18 16       	cp	r1, r24
    37d2:	4c f5       	brge	.+82     	; 0x3826 <Stepper_voidRotateACW+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37d4:	6f a1       	ldd	r22, Y+39	; 0x27
    37d6:	78 a5       	ldd	r23, Y+40	; 0x28
    37d8:	89 a5       	ldd	r24, Y+41	; 0x29
    37da:	9a a5       	ldd	r25, Y+42	; 0x2a
    37dc:	20 e0       	ldi	r18, 0x00	; 0
    37de:	30 e0       	ldi	r19, 0x00	; 0
    37e0:	40 e2       	ldi	r20, 0x20	; 32
    37e2:	51 e4       	ldi	r21, 0x41	; 65
    37e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37e8:	dc 01       	movw	r26, r24
    37ea:	cb 01       	movw	r24, r22
    37ec:	bc 01       	movw	r22, r24
    37ee:	cd 01       	movw	r24, r26
    37f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37f4:	dc 01       	movw	r26, r24
    37f6:	cb 01       	movw	r24, r22
    37f8:	9a a3       	std	Y+34, r25	; 0x22
    37fa:	89 a3       	std	Y+33, r24	; 0x21
    37fc:	0f c0       	rjmp	.+30     	; 0x381c <Stepper_voidRotateACW+0x1fa>
    37fe:	88 ec       	ldi	r24, 0xC8	; 200
    3800:	90 e0       	ldi	r25, 0x00	; 0
    3802:	98 a3       	std	Y+32, r25	; 0x20
    3804:	8f 8f       	std	Y+31, r24	; 0x1f
    3806:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3808:	98 a1       	ldd	r25, Y+32	; 0x20
    380a:	01 97       	sbiw	r24, 0x01	; 1
    380c:	f1 f7       	brne	.-4      	; 0x380a <Stepper_voidRotateACW+0x1e8>
    380e:	98 a3       	std	Y+32, r25	; 0x20
    3810:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3812:	89 a1       	ldd	r24, Y+33	; 0x21
    3814:	9a a1       	ldd	r25, Y+34	; 0x22
    3816:	01 97       	sbiw	r24, 0x01	; 1
    3818:	9a a3       	std	Y+34, r25	; 0x22
    381a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    381c:	89 a1       	ldd	r24, Y+33	; 0x21
    381e:	9a a1       	ldd	r25, Y+34	; 0x22
    3820:	00 97       	sbiw	r24, 0x00	; 0
    3822:	69 f7       	brne	.-38     	; 0x37fe <Stepper_voidRotateACW+0x1dc>
    3824:	14 c0       	rjmp	.+40     	; 0x384e <Stepper_voidRotateACW+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3826:	6b a1       	ldd	r22, Y+35	; 0x23
    3828:	7c a1       	ldd	r23, Y+36	; 0x24
    382a:	8d a1       	ldd	r24, Y+37	; 0x25
    382c:	9e a1       	ldd	r25, Y+38	; 0x26
    382e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3832:	dc 01       	movw	r26, r24
    3834:	cb 01       	movw	r24, r22
    3836:	9a a3       	std	Y+34, r25	; 0x22
    3838:	89 a3       	std	Y+33, r24	; 0x21
    383a:	89 a1       	ldd	r24, Y+33	; 0x21
    383c:	9a a1       	ldd	r25, Y+34	; 0x22
    383e:	9e 8f       	std	Y+30, r25	; 0x1e
    3840:	8d 8f       	std	Y+29, r24	; 0x1d
    3842:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3844:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3846:	01 97       	sbiw	r24, 0x01	; 1
    3848:	f1 f7       	brne	.-4      	; 0x3846 <Stepper_voidRotateACW+0x224>
    384a:	9e 8f       	std	Y+30, r25	; 0x1e
    384c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(100);

	DIO_voidSetPinValue(STEPPER_PORT, COIL_BLUE  , DIO_LOW );
    384e:	82 e0       	ldi	r24, 0x02	; 2
    3850:	60 e0       	ldi	r22, 0x00	; 0
    3852:	40 e0       	ldi	r20, 0x00	; 0
    3854:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT, COIL_PINK  , DIO_HIGH);
    3858:	82 e0       	ldi	r24, 0x02	; 2
    385a:	61 e0       	ldi	r22, 0x01	; 1
    385c:	41 e0       	ldi	r20, 0x01	; 1
    385e:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT, COIL_YELLOW, DIO_LOW );
    3862:	82 e0       	ldi	r24, 0x02	; 2
    3864:	62 e0       	ldi	r22, 0x02	; 2
    3866:	40 e0       	ldi	r20, 0x00	; 0
    3868:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT, COIL_ORANGE, DIO_LOW );
    386c:	82 e0       	ldi	r24, 0x02	; 2
    386e:	63 e0       	ldi	r22, 0x03	; 3
    3870:	40 e0       	ldi	r20, 0x00	; 0
    3872:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
    3876:	80 e0       	ldi	r24, 0x00	; 0
    3878:	90 e0       	ldi	r25, 0x00	; 0
    387a:	a8 ec       	ldi	r26, 0xC8	; 200
    387c:	b2 e4       	ldi	r27, 0x42	; 66
    387e:	89 8f       	std	Y+25, r24	; 0x19
    3880:	9a 8f       	std	Y+26, r25	; 0x1a
    3882:	ab 8f       	std	Y+27, r26	; 0x1b
    3884:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3886:	69 8d       	ldd	r22, Y+25	; 0x19
    3888:	7a 8d       	ldd	r23, Y+26	; 0x1a
    388a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    388c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    388e:	20 e0       	ldi	r18, 0x00	; 0
    3890:	30 e0       	ldi	r19, 0x00	; 0
    3892:	4a ef       	ldi	r20, 0xFA	; 250
    3894:	54 e4       	ldi	r21, 0x44	; 68
    3896:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    389a:	dc 01       	movw	r26, r24
    389c:	cb 01       	movw	r24, r22
    389e:	8d 8b       	std	Y+21, r24	; 0x15
    38a0:	9e 8b       	std	Y+22, r25	; 0x16
    38a2:	af 8b       	std	Y+23, r26	; 0x17
    38a4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    38a6:	6d 89       	ldd	r22, Y+21	; 0x15
    38a8:	7e 89       	ldd	r23, Y+22	; 0x16
    38aa:	8f 89       	ldd	r24, Y+23	; 0x17
    38ac:	98 8d       	ldd	r25, Y+24	; 0x18
    38ae:	20 e0       	ldi	r18, 0x00	; 0
    38b0:	30 e0       	ldi	r19, 0x00	; 0
    38b2:	40 e8       	ldi	r20, 0x80	; 128
    38b4:	5f e3       	ldi	r21, 0x3F	; 63
    38b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38ba:	88 23       	and	r24, r24
    38bc:	2c f4       	brge	.+10     	; 0x38c8 <Stepper_voidRotateACW+0x2a6>
		__ticks = 1;
    38be:	81 e0       	ldi	r24, 0x01	; 1
    38c0:	90 e0       	ldi	r25, 0x00	; 0
    38c2:	9c 8b       	std	Y+20, r25	; 0x14
    38c4:	8b 8b       	std	Y+19, r24	; 0x13
    38c6:	3f c0       	rjmp	.+126    	; 0x3946 <Stepper_voidRotateACW+0x324>
	else if (__tmp > 65535)
    38c8:	6d 89       	ldd	r22, Y+21	; 0x15
    38ca:	7e 89       	ldd	r23, Y+22	; 0x16
    38cc:	8f 89       	ldd	r24, Y+23	; 0x17
    38ce:	98 8d       	ldd	r25, Y+24	; 0x18
    38d0:	20 e0       	ldi	r18, 0x00	; 0
    38d2:	3f ef       	ldi	r19, 0xFF	; 255
    38d4:	4f e7       	ldi	r20, 0x7F	; 127
    38d6:	57 e4       	ldi	r21, 0x47	; 71
    38d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38dc:	18 16       	cp	r1, r24
    38de:	4c f5       	brge	.+82     	; 0x3932 <Stepper_voidRotateACW+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38e0:	69 8d       	ldd	r22, Y+25	; 0x19
    38e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38e8:	20 e0       	ldi	r18, 0x00	; 0
    38ea:	30 e0       	ldi	r19, 0x00	; 0
    38ec:	40 e2       	ldi	r20, 0x20	; 32
    38ee:	51 e4       	ldi	r21, 0x41	; 65
    38f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38f4:	dc 01       	movw	r26, r24
    38f6:	cb 01       	movw	r24, r22
    38f8:	bc 01       	movw	r22, r24
    38fa:	cd 01       	movw	r24, r26
    38fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3900:	dc 01       	movw	r26, r24
    3902:	cb 01       	movw	r24, r22
    3904:	9c 8b       	std	Y+20, r25	; 0x14
    3906:	8b 8b       	std	Y+19, r24	; 0x13
    3908:	0f c0       	rjmp	.+30     	; 0x3928 <Stepper_voidRotateACW+0x306>
    390a:	88 ec       	ldi	r24, 0xC8	; 200
    390c:	90 e0       	ldi	r25, 0x00	; 0
    390e:	9a 8b       	std	Y+18, r25	; 0x12
    3910:	89 8b       	std	Y+17, r24	; 0x11
    3912:	89 89       	ldd	r24, Y+17	; 0x11
    3914:	9a 89       	ldd	r25, Y+18	; 0x12
    3916:	01 97       	sbiw	r24, 0x01	; 1
    3918:	f1 f7       	brne	.-4      	; 0x3916 <Stepper_voidRotateACW+0x2f4>
    391a:	9a 8b       	std	Y+18, r25	; 0x12
    391c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    391e:	8b 89       	ldd	r24, Y+19	; 0x13
    3920:	9c 89       	ldd	r25, Y+20	; 0x14
    3922:	01 97       	sbiw	r24, 0x01	; 1
    3924:	9c 8b       	std	Y+20, r25	; 0x14
    3926:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3928:	8b 89       	ldd	r24, Y+19	; 0x13
    392a:	9c 89       	ldd	r25, Y+20	; 0x14
    392c:	00 97       	sbiw	r24, 0x00	; 0
    392e:	69 f7       	brne	.-38     	; 0x390a <Stepper_voidRotateACW+0x2e8>
    3930:	14 c0       	rjmp	.+40     	; 0x395a <Stepper_voidRotateACW+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3932:	6d 89       	ldd	r22, Y+21	; 0x15
    3934:	7e 89       	ldd	r23, Y+22	; 0x16
    3936:	8f 89       	ldd	r24, Y+23	; 0x17
    3938:	98 8d       	ldd	r25, Y+24	; 0x18
    393a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    393e:	dc 01       	movw	r26, r24
    3940:	cb 01       	movw	r24, r22
    3942:	9c 8b       	std	Y+20, r25	; 0x14
    3944:	8b 8b       	std	Y+19, r24	; 0x13
    3946:	8b 89       	ldd	r24, Y+19	; 0x13
    3948:	9c 89       	ldd	r25, Y+20	; 0x14
    394a:	98 8b       	std	Y+16, r25	; 0x10
    394c:	8f 87       	std	Y+15, r24	; 0x0f
    394e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3950:	98 89       	ldd	r25, Y+16	; 0x10
    3952:	01 97       	sbiw	r24, 0x01	; 1
    3954:	f1 f7       	brne	.-4      	; 0x3952 <Stepper_voidRotateACW+0x330>
    3956:	98 8b       	std	Y+16, r25	; 0x10
    3958:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);

	DIO_voidSetPinValue(STEPPER_PORT, COIL_BLUE  , DIO_HIGH);
    395a:	82 e0       	ldi	r24, 0x02	; 2
    395c:	60 e0       	ldi	r22, 0x00	; 0
    395e:	41 e0       	ldi	r20, 0x01	; 1
    3960:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT, COIL_PINK  , DIO_LOW );
    3964:	82 e0       	ldi	r24, 0x02	; 2
    3966:	61 e0       	ldi	r22, 0x01	; 1
    3968:	40 e0       	ldi	r20, 0x00	; 0
    396a:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT, COIL_YELLOW, DIO_LOW );
    396e:	82 e0       	ldi	r24, 0x02	; 2
    3970:	62 e0       	ldi	r22, 0x02	; 2
    3972:	40 e0       	ldi	r20, 0x00	; 0
    3974:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT, COIL_ORANGE, DIO_LOW );
    3978:	82 e0       	ldi	r24, 0x02	; 2
    397a:	63 e0       	ldi	r22, 0x03	; 3
    397c:	40 e0       	ldi	r20, 0x00	; 0
    397e:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
    3982:	80 e0       	ldi	r24, 0x00	; 0
    3984:	90 e0       	ldi	r25, 0x00	; 0
    3986:	a8 ec       	ldi	r26, 0xC8	; 200
    3988:	b2 e4       	ldi	r27, 0x42	; 66
    398a:	8b 87       	std	Y+11, r24	; 0x0b
    398c:	9c 87       	std	Y+12, r25	; 0x0c
    398e:	ad 87       	std	Y+13, r26	; 0x0d
    3990:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3992:	6b 85       	ldd	r22, Y+11	; 0x0b
    3994:	7c 85       	ldd	r23, Y+12	; 0x0c
    3996:	8d 85       	ldd	r24, Y+13	; 0x0d
    3998:	9e 85       	ldd	r25, Y+14	; 0x0e
    399a:	20 e0       	ldi	r18, 0x00	; 0
    399c:	30 e0       	ldi	r19, 0x00	; 0
    399e:	4a ef       	ldi	r20, 0xFA	; 250
    39a0:	54 e4       	ldi	r21, 0x44	; 68
    39a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39a6:	dc 01       	movw	r26, r24
    39a8:	cb 01       	movw	r24, r22
    39aa:	8f 83       	std	Y+7, r24	; 0x07
    39ac:	98 87       	std	Y+8, r25	; 0x08
    39ae:	a9 87       	std	Y+9, r26	; 0x09
    39b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39b2:	6f 81       	ldd	r22, Y+7	; 0x07
    39b4:	78 85       	ldd	r23, Y+8	; 0x08
    39b6:	89 85       	ldd	r24, Y+9	; 0x09
    39b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    39ba:	20 e0       	ldi	r18, 0x00	; 0
    39bc:	30 e0       	ldi	r19, 0x00	; 0
    39be:	40 e8       	ldi	r20, 0x80	; 128
    39c0:	5f e3       	ldi	r21, 0x3F	; 63
    39c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    39c6:	88 23       	and	r24, r24
    39c8:	2c f4       	brge	.+10     	; 0x39d4 <Stepper_voidRotateACW+0x3b2>
		__ticks = 1;
    39ca:	81 e0       	ldi	r24, 0x01	; 1
    39cc:	90 e0       	ldi	r25, 0x00	; 0
    39ce:	9e 83       	std	Y+6, r25	; 0x06
    39d0:	8d 83       	std	Y+5, r24	; 0x05
    39d2:	3f c0       	rjmp	.+126    	; 0x3a52 <Stepper_voidRotateACW+0x430>
	else if (__tmp > 65535)
    39d4:	6f 81       	ldd	r22, Y+7	; 0x07
    39d6:	78 85       	ldd	r23, Y+8	; 0x08
    39d8:	89 85       	ldd	r24, Y+9	; 0x09
    39da:	9a 85       	ldd	r25, Y+10	; 0x0a
    39dc:	20 e0       	ldi	r18, 0x00	; 0
    39de:	3f ef       	ldi	r19, 0xFF	; 255
    39e0:	4f e7       	ldi	r20, 0x7F	; 127
    39e2:	57 e4       	ldi	r21, 0x47	; 71
    39e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    39e8:	18 16       	cp	r1, r24
    39ea:	4c f5       	brge	.+82     	; 0x3a3e <Stepper_voidRotateACW+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    39ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    39f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    39f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    39f4:	20 e0       	ldi	r18, 0x00	; 0
    39f6:	30 e0       	ldi	r19, 0x00	; 0
    39f8:	40 e2       	ldi	r20, 0x20	; 32
    39fa:	51 e4       	ldi	r21, 0x41	; 65
    39fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a00:	dc 01       	movw	r26, r24
    3a02:	cb 01       	movw	r24, r22
    3a04:	bc 01       	movw	r22, r24
    3a06:	cd 01       	movw	r24, r26
    3a08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a0c:	dc 01       	movw	r26, r24
    3a0e:	cb 01       	movw	r24, r22
    3a10:	9e 83       	std	Y+6, r25	; 0x06
    3a12:	8d 83       	std	Y+5, r24	; 0x05
    3a14:	0f c0       	rjmp	.+30     	; 0x3a34 <Stepper_voidRotateACW+0x412>
    3a16:	88 ec       	ldi	r24, 0xC8	; 200
    3a18:	90 e0       	ldi	r25, 0x00	; 0
    3a1a:	9c 83       	std	Y+4, r25	; 0x04
    3a1c:	8b 83       	std	Y+3, r24	; 0x03
    3a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a20:	9c 81       	ldd	r25, Y+4	; 0x04
    3a22:	01 97       	sbiw	r24, 0x01	; 1
    3a24:	f1 f7       	brne	.-4      	; 0x3a22 <Stepper_voidRotateACW+0x400>
    3a26:	9c 83       	std	Y+4, r25	; 0x04
    3a28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a2a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a2c:	9e 81       	ldd	r25, Y+6	; 0x06
    3a2e:	01 97       	sbiw	r24, 0x01	; 1
    3a30:	9e 83       	std	Y+6, r25	; 0x06
    3a32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a34:	8d 81       	ldd	r24, Y+5	; 0x05
    3a36:	9e 81       	ldd	r25, Y+6	; 0x06
    3a38:	00 97       	sbiw	r24, 0x00	; 0
    3a3a:	69 f7       	brne	.-38     	; 0x3a16 <Stepper_voidRotateACW+0x3f4>
    3a3c:	14 c0       	rjmp	.+40     	; 0x3a66 <Stepper_voidRotateACW+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a3e:	6f 81       	ldd	r22, Y+7	; 0x07
    3a40:	78 85       	ldd	r23, Y+8	; 0x08
    3a42:	89 85       	ldd	r24, Y+9	; 0x09
    3a44:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a4a:	dc 01       	movw	r26, r24
    3a4c:	cb 01       	movw	r24, r22
    3a4e:	9e 83       	std	Y+6, r25	; 0x06
    3a50:	8d 83       	std	Y+5, r24	; 0x05
    3a52:	8d 81       	ldd	r24, Y+5	; 0x05
    3a54:	9e 81       	ldd	r25, Y+6	; 0x06
    3a56:	9a 83       	std	Y+2, r25	; 0x02
    3a58:	89 83       	std	Y+1, r24	; 0x01
    3a5a:	89 81       	ldd	r24, Y+1	; 0x01
    3a5c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a5e:	01 97       	sbiw	r24, 0x01	; 1
    3a60:	f1 f7       	brne	.-4      	; 0x3a5e <Stepper_voidRotateACW+0x43c>
    3a62:	9a 83       	std	Y+2, r25	; 0x02
    3a64:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);

}
    3a66:	e8 96       	adiw	r28, 0x38	; 56
    3a68:	0f b6       	in	r0, 0x3f	; 63
    3a6a:	f8 94       	cli
    3a6c:	de bf       	out	0x3e, r29	; 62
    3a6e:	0f be       	out	0x3f, r0	; 63
    3a70:	cd bf       	out	0x3d, r28	; 61
    3a72:	cf 91       	pop	r28
    3a74:	df 91       	pop	r29
    3a76:	08 95       	ret

00003a78 <SERVO_voidRotateSpecificAngle_OC1A>:
#include "../../MCAL/DIO/DIO_Interface.h"
#include "../../MCAL/TIMERS/TIMER1/TIMER1_Interface.h"


void SERVO_voidRotateSpecificAngle_OC1A ( u16 Copy_u16Angle )
{
    3a78:	df 93       	push	r29
    3a7a:	cf 93       	push	r28
    3a7c:	00 d0       	rcall	.+0      	; 0x3a7e <SERVO_voidRotateSpecificAngle_OC1A+0x6>
    3a7e:	00 d0       	rcall	.+0      	; 0x3a80 <SERVO_voidRotateSpecificAngle_OC1A+0x8>
    3a80:	00 d0       	rcall	.+0      	; 0x3a82 <SERVO_voidRotateSpecificAngle_OC1A+0xa>
    3a82:	cd b7       	in	r28, 0x3d	; 61
    3a84:	de b7       	in	r29, 0x3e	; 62
    3a86:	9e 83       	std	Y+6, r25	; 0x06
    3a88:	8d 83       	std	Y+5, r24	; 0x05
    DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN5,DIO_OUTPUT);
    3a8a:	83 e0       	ldi	r24, 0x03	; 3
    3a8c:	65 e0       	ldi	r22, 0x05	; 5
    3a8e:	41 e0       	ldi	r20, 0x01	; 1
    3a90:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <DIO_voidSetPinDirection>
    u32 Local_u32Variable ;
    Local_u32Variable = ((Copy_u16Angle*1000UL)+179820) / (180) ;
    3a94:	8d 81       	ldd	r24, Y+5	; 0x05
    3a96:	9e 81       	ldd	r25, Y+6	; 0x06
    3a98:	cc 01       	movw	r24, r24
    3a9a:	a0 e0       	ldi	r26, 0x00	; 0
    3a9c:	b0 e0       	ldi	r27, 0x00	; 0
    3a9e:	28 ee       	ldi	r18, 0xE8	; 232
    3aa0:	33 e0       	ldi	r19, 0x03	; 3
    3aa2:	40 e0       	ldi	r20, 0x00	; 0
    3aa4:	50 e0       	ldi	r21, 0x00	; 0
    3aa6:	bc 01       	movw	r22, r24
    3aa8:	cd 01       	movw	r24, r26
    3aaa:	0e 94 cd 2b 	call	0x579a	; 0x579a <__mulsi3>
    3aae:	dc 01       	movw	r26, r24
    3ab0:	cb 01       	movw	r24, r22
    3ab2:	84 59       	subi	r24, 0x94	; 148
    3ab4:	91 44       	sbci	r25, 0x41	; 65
    3ab6:	ad 4f       	sbci	r26, 0xFD	; 253
    3ab8:	bf 4f       	sbci	r27, 0xFF	; 255
    3aba:	24 eb       	ldi	r18, 0xB4	; 180
    3abc:	30 e0       	ldi	r19, 0x00	; 0
    3abe:	40 e0       	ldi	r20, 0x00	; 0
    3ac0:	50 e0       	ldi	r21, 0x00	; 0
    3ac2:	bc 01       	movw	r22, r24
    3ac4:	cd 01       	movw	r24, r26
    3ac6:	0e 94 ec 2b 	call	0x57d8	; 0x57d8 <__udivmodsi4>
    3aca:	da 01       	movw	r26, r20
    3acc:	c9 01       	movw	r24, r18
    3ace:	89 83       	std	Y+1, r24	; 0x01
    3ad0:	9a 83       	std	Y+2, r25	; 0x02
    3ad2:	ab 83       	std	Y+3, r26	; 0x03
    3ad4:	bc 83       	std	Y+4, r27	; 0x04
    TIMER1_void_u16PWM_T1A ( Local_u32Variable ,19999);
    3ad6:	89 81       	ldd	r24, Y+1	; 0x01
    3ad8:	9a 81       	ldd	r25, Y+2	; 0x02
    3ada:	6f e1       	ldi	r22, 0x1F	; 31
    3adc:	7e e4       	ldi	r23, 0x4E	; 78
    3ade:	0e 94 a4 07 	call	0xf48	; 0xf48 <TIMER1_void_u16PWM_T1A>
}
    3ae2:	26 96       	adiw	r28, 0x06	; 6
    3ae4:	0f b6       	in	r0, 0x3f	; 63
    3ae6:	f8 94       	cli
    3ae8:	de bf       	out	0x3e, r29	; 62
    3aea:	0f be       	out	0x3f, r0	; 63
    3aec:	cd bf       	out	0x3d, r28	; 61
    3aee:	cf 91       	pop	r28
    3af0:	df 91       	pop	r29
    3af2:	08 95       	ret

00003af4 <SERVO_voidRotateSpecificAngle_OC1B>:



void SERVO_voidRotateSpecificAngle_OC1B ( u16 Copy_u16Angle )
{
    3af4:	df 93       	push	r29
    3af6:	cf 93       	push	r28
    3af8:	00 d0       	rcall	.+0      	; 0x3afa <SERVO_voidRotateSpecificAngle_OC1B+0x6>
    3afa:	00 d0       	rcall	.+0      	; 0x3afc <SERVO_voidRotateSpecificAngle_OC1B+0x8>
    3afc:	00 d0       	rcall	.+0      	; 0x3afe <SERVO_voidRotateSpecificAngle_OC1B+0xa>
    3afe:	cd b7       	in	r28, 0x3d	; 61
    3b00:	de b7       	in	r29, 0x3e	; 62
    3b02:	9e 83       	std	Y+6, r25	; 0x06
    3b04:	8d 83       	std	Y+5, r24	; 0x05
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN4,DIO_OUTPUT);
    3b06:	83 e0       	ldi	r24, 0x03	; 3
    3b08:	64 e0       	ldi	r22, 0x04	; 4
    3b0a:	41 e0       	ldi	r20, 0x01	; 1
    3b0c:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <DIO_voidSetPinDirection>
    u32 Local_u32Variable ;
    Local_u32Variable = ((Copy_u16Angle*1000UL)+179820) / (180) ;
    3b10:	8d 81       	ldd	r24, Y+5	; 0x05
    3b12:	9e 81       	ldd	r25, Y+6	; 0x06
    3b14:	cc 01       	movw	r24, r24
    3b16:	a0 e0       	ldi	r26, 0x00	; 0
    3b18:	b0 e0       	ldi	r27, 0x00	; 0
    3b1a:	28 ee       	ldi	r18, 0xE8	; 232
    3b1c:	33 e0       	ldi	r19, 0x03	; 3
    3b1e:	40 e0       	ldi	r20, 0x00	; 0
    3b20:	50 e0       	ldi	r21, 0x00	; 0
    3b22:	bc 01       	movw	r22, r24
    3b24:	cd 01       	movw	r24, r26
    3b26:	0e 94 cd 2b 	call	0x579a	; 0x579a <__mulsi3>
    3b2a:	dc 01       	movw	r26, r24
    3b2c:	cb 01       	movw	r24, r22
    3b2e:	84 59       	subi	r24, 0x94	; 148
    3b30:	91 44       	sbci	r25, 0x41	; 65
    3b32:	ad 4f       	sbci	r26, 0xFD	; 253
    3b34:	bf 4f       	sbci	r27, 0xFF	; 255
    3b36:	24 eb       	ldi	r18, 0xB4	; 180
    3b38:	30 e0       	ldi	r19, 0x00	; 0
    3b3a:	40 e0       	ldi	r20, 0x00	; 0
    3b3c:	50 e0       	ldi	r21, 0x00	; 0
    3b3e:	bc 01       	movw	r22, r24
    3b40:	cd 01       	movw	r24, r26
    3b42:	0e 94 ec 2b 	call	0x57d8	; 0x57d8 <__udivmodsi4>
    3b46:	da 01       	movw	r26, r20
    3b48:	c9 01       	movw	r24, r18
    3b4a:	89 83       	std	Y+1, r24	; 0x01
    3b4c:	9a 83       	std	Y+2, r25	; 0x02
    3b4e:	ab 83       	std	Y+3, r26	; 0x03
    3b50:	bc 83       	std	Y+4, r27	; 0x04
    TIMER1_void_u16PWM_T1B ( Local_u32Variable ,19999);
    3b52:	89 81       	ldd	r24, Y+1	; 0x01
    3b54:	9a 81       	ldd	r25, Y+2	; 0x02
    3b56:	6f e1       	ldi	r22, 0x1F	; 31
    3b58:	7e e4       	ldi	r23, 0x4E	; 78
    3b5a:	0e 94 bf 07 	call	0xf7e	; 0xf7e <TIMER1_void_u16PWM_T1B>
}
    3b5e:	26 96       	adiw	r28, 0x06	; 6
    3b60:	0f b6       	in	r0, 0x3f	; 63
    3b62:	f8 94       	cli
    3b64:	de bf       	out	0x3e, r29	; 62
    3b66:	0f be       	out	0x3f, r0	; 63
    3b68:	cd bf       	out	0x3d, r28	; 61
    3b6a:	cf 91       	pop	r28
    3b6c:	df 91       	pop	r29
    3b6e:	08 95       	ret

00003b70 <LCD_voidInit>:
#include "LCD_Interface.h"
#include "LCD_Private.h"
#include "LCD_Config.h"

void LCD_voidInit (void)
{
    3b70:	0f 93       	push	r16
    3b72:	1f 93       	push	r17
    3b74:	df 93       	push	r29
    3b76:	cf 93       	push	r28
    3b78:	cd b7       	in	r28, 0x3d	; 61
    3b7a:	de b7       	in	r29, 0x3e	; 62
    3b7c:	c6 54       	subi	r28, 0x46	; 70
    3b7e:	d0 40       	sbci	r29, 0x00	; 0
    3b80:	0f b6       	in	r0, 0x3f	; 63
    3b82:	f8 94       	cli
    3b84:	de bf       	out	0x3e, r29	; 62
    3b86:	0f be       	out	0x3f, r0	; 63
    3b88:	cd bf       	out	0x3d, r28	; 61
    /* Control Pins Directions */
    DIO_voidSetPortDirection(LCD_DATA_PORT , DIO_OUTPUT);
    3b8a:	81 e0       	ldi	r24, 0x01	; 1
    3b8c:	61 e0       	ldi	r22, 0x01	; 1
    3b8e:	0e 94 01 13 	call	0x2602	; 0x2602 <DIO_voidSetPortDirection>
    DIO_voidSetPinDirection(LCD_CONTROL_PORT,RS_PIN,DIO_OUTPUT);
    3b92:	83 e0       	ldi	r24, 0x03	; 3
    3b94:	62 e0       	ldi	r22, 0x02	; 2
    3b96:	41 e0       	ldi	r20, 0x01	; 1
    3b98:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(LCD_CONTROL_PORT,RW_PIN,DIO_OUTPUT);
    3b9c:	83 e0       	ldi	r24, 0x03	; 3
    3b9e:	63 e0       	ldi	r22, 0x03	; 3
    3ba0:	41 e0       	ldi	r20, 0x01	; 1
    3ba2:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(LCD_CONTROL_PORT,E_PIN,DIO_OUTPUT);
    3ba6:	83 e0       	ldi	r24, 0x03	; 3
    3ba8:	64 e0       	ldi	r22, 0x04	; 4
    3baa:	41 e0       	ldi	r20, 0x01	; 1
    3bac:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <DIO_voidSetPinDirection>
    3bb0:	fe 01       	movw	r30, r28
    3bb2:	ed 5b       	subi	r30, 0xBD	; 189
    3bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb6:	80 e0       	ldi	r24, 0x00	; 0
    3bb8:	90 e0       	ldi	r25, 0x00	; 0
    3bba:	ac e0       	ldi	r26, 0x0C	; 12
    3bbc:	b2 e4       	ldi	r27, 0x42	; 66
    3bbe:	80 83       	st	Z, r24
    3bc0:	91 83       	std	Z+1, r25	; 0x01
    3bc2:	a2 83       	std	Z+2, r26	; 0x02
    3bc4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bc6:	8e 01       	movw	r16, r28
    3bc8:	01 5c       	subi	r16, 0xC1	; 193
    3bca:	1f 4f       	sbci	r17, 0xFF	; 255
    3bcc:	fe 01       	movw	r30, r28
    3bce:	ed 5b       	subi	r30, 0xBD	; 189
    3bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd2:	60 81       	ld	r22, Z
    3bd4:	71 81       	ldd	r23, Z+1	; 0x01
    3bd6:	82 81       	ldd	r24, Z+2	; 0x02
    3bd8:	93 81       	ldd	r25, Z+3	; 0x03
    3bda:	20 e0       	ldi	r18, 0x00	; 0
    3bdc:	30 e0       	ldi	r19, 0x00	; 0
    3bde:	4a ef       	ldi	r20, 0xFA	; 250
    3be0:	54 e4       	ldi	r21, 0x44	; 68
    3be2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3be6:	dc 01       	movw	r26, r24
    3be8:	cb 01       	movw	r24, r22
    3bea:	f8 01       	movw	r30, r16
    3bec:	80 83       	st	Z, r24
    3bee:	91 83       	std	Z+1, r25	; 0x01
    3bf0:	a2 83       	std	Z+2, r26	; 0x02
    3bf2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3bf4:	fe 01       	movw	r30, r28
    3bf6:	ff 96       	adiw	r30, 0x3f	; 63
    3bf8:	60 81       	ld	r22, Z
    3bfa:	71 81       	ldd	r23, Z+1	; 0x01
    3bfc:	82 81       	ldd	r24, Z+2	; 0x02
    3bfe:	93 81       	ldd	r25, Z+3	; 0x03
    3c00:	20 e0       	ldi	r18, 0x00	; 0
    3c02:	30 e0       	ldi	r19, 0x00	; 0
    3c04:	40 e8       	ldi	r20, 0x80	; 128
    3c06:	5f e3       	ldi	r21, 0x3F	; 63
    3c08:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c0c:	88 23       	and	r24, r24
    3c0e:	2c f4       	brge	.+10     	; 0x3c1a <LCD_voidInit+0xaa>
		__ticks = 1;
    3c10:	81 e0       	ldi	r24, 0x01	; 1
    3c12:	90 e0       	ldi	r25, 0x00	; 0
    3c14:	9e af       	std	Y+62, r25	; 0x3e
    3c16:	8d af       	std	Y+61, r24	; 0x3d
    3c18:	46 c0       	rjmp	.+140    	; 0x3ca6 <LCD_voidInit+0x136>
	else if (__tmp > 65535)
    3c1a:	fe 01       	movw	r30, r28
    3c1c:	ff 96       	adiw	r30, 0x3f	; 63
    3c1e:	60 81       	ld	r22, Z
    3c20:	71 81       	ldd	r23, Z+1	; 0x01
    3c22:	82 81       	ldd	r24, Z+2	; 0x02
    3c24:	93 81       	ldd	r25, Z+3	; 0x03
    3c26:	20 e0       	ldi	r18, 0x00	; 0
    3c28:	3f ef       	ldi	r19, 0xFF	; 255
    3c2a:	4f e7       	ldi	r20, 0x7F	; 127
    3c2c:	57 e4       	ldi	r21, 0x47	; 71
    3c2e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c32:	18 16       	cp	r1, r24
    3c34:	64 f5       	brge	.+88     	; 0x3c8e <LCD_voidInit+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c36:	fe 01       	movw	r30, r28
    3c38:	ed 5b       	subi	r30, 0xBD	; 189
    3c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c3c:	60 81       	ld	r22, Z
    3c3e:	71 81       	ldd	r23, Z+1	; 0x01
    3c40:	82 81       	ldd	r24, Z+2	; 0x02
    3c42:	93 81       	ldd	r25, Z+3	; 0x03
    3c44:	20 e0       	ldi	r18, 0x00	; 0
    3c46:	30 e0       	ldi	r19, 0x00	; 0
    3c48:	40 e2       	ldi	r20, 0x20	; 32
    3c4a:	51 e4       	ldi	r21, 0x41	; 65
    3c4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c50:	dc 01       	movw	r26, r24
    3c52:	cb 01       	movw	r24, r22
    3c54:	bc 01       	movw	r22, r24
    3c56:	cd 01       	movw	r24, r26
    3c58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c5c:	dc 01       	movw	r26, r24
    3c5e:	cb 01       	movw	r24, r22
    3c60:	9e af       	std	Y+62, r25	; 0x3e
    3c62:	8d af       	std	Y+61, r24	; 0x3d
    3c64:	0f c0       	rjmp	.+30     	; 0x3c84 <LCD_voidInit+0x114>
    3c66:	88 ec       	ldi	r24, 0xC8	; 200
    3c68:	90 e0       	ldi	r25, 0x00	; 0
    3c6a:	9c af       	std	Y+60, r25	; 0x3c
    3c6c:	8b af       	std	Y+59, r24	; 0x3b
    3c6e:	8b ad       	ldd	r24, Y+59	; 0x3b
    3c70:	9c ad       	ldd	r25, Y+60	; 0x3c
    3c72:	01 97       	sbiw	r24, 0x01	; 1
    3c74:	f1 f7       	brne	.-4      	; 0x3c72 <LCD_voidInit+0x102>
    3c76:	9c af       	std	Y+60, r25	; 0x3c
    3c78:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c7a:	8d ad       	ldd	r24, Y+61	; 0x3d
    3c7c:	9e ad       	ldd	r25, Y+62	; 0x3e
    3c7e:	01 97       	sbiw	r24, 0x01	; 1
    3c80:	9e af       	std	Y+62, r25	; 0x3e
    3c82:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c84:	8d ad       	ldd	r24, Y+61	; 0x3d
    3c86:	9e ad       	ldd	r25, Y+62	; 0x3e
    3c88:	00 97       	sbiw	r24, 0x00	; 0
    3c8a:	69 f7       	brne	.-38     	; 0x3c66 <LCD_voidInit+0xf6>
    3c8c:	16 c0       	rjmp	.+44     	; 0x3cba <LCD_voidInit+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c8e:	fe 01       	movw	r30, r28
    3c90:	ff 96       	adiw	r30, 0x3f	; 63
    3c92:	60 81       	ld	r22, Z
    3c94:	71 81       	ldd	r23, Z+1	; 0x01
    3c96:	82 81       	ldd	r24, Z+2	; 0x02
    3c98:	93 81       	ldd	r25, Z+3	; 0x03
    3c9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c9e:	dc 01       	movw	r26, r24
    3ca0:	cb 01       	movw	r24, r22
    3ca2:	9e af       	std	Y+62, r25	; 0x3e
    3ca4:	8d af       	std	Y+61, r24	; 0x3d
    3ca6:	8d ad       	ldd	r24, Y+61	; 0x3d
    3ca8:	9e ad       	ldd	r25, Y+62	; 0x3e
    3caa:	9a af       	std	Y+58, r25	; 0x3a
    3cac:	89 af       	std	Y+57, r24	; 0x39
    3cae:	89 ad       	ldd	r24, Y+57	; 0x39
    3cb0:	9a ad       	ldd	r25, Y+58	; 0x3a
    3cb2:	01 97       	sbiw	r24, 0x01	; 1
    3cb4:	f1 f7       	brne	.-4      	; 0x3cb2 <LCD_voidInit+0x142>
    3cb6:	9a af       	std	Y+58, r25	; 0x3a
    3cb8:	89 af       	std	Y+57, r24	; 0x39

    _delay_ms(35);    //TIMER0_voidSetBusyWait_ms(35);

    /* Send Command Function Set */
    LCD_voidWriteCommand ( FS_8BIT_2LINES_5x7 );
    3cba:	88 e3       	ldi	r24, 0x38	; 56
    3cbc:	0e 94 3d 20 	call	0x407a	; 0x407a <LCD_voidWriteCommand>
    3cc0:	80 e0       	ldi	r24, 0x00	; 0
    3cc2:	90 e0       	ldi	r25, 0x00	; 0
    3cc4:	a0 e8       	ldi	r26, 0x80	; 128
    3cc6:	bf e3       	ldi	r27, 0x3F	; 63
    3cc8:	8d ab       	std	Y+53, r24	; 0x35
    3cca:	9e ab       	std	Y+54, r25	; 0x36
    3ccc:	af ab       	std	Y+55, r26	; 0x37
    3cce:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cd0:	6d a9       	ldd	r22, Y+53	; 0x35
    3cd2:	7e a9       	ldd	r23, Y+54	; 0x36
    3cd4:	8f a9       	ldd	r24, Y+55	; 0x37
    3cd6:	98 ad       	ldd	r25, Y+56	; 0x38
    3cd8:	20 e0       	ldi	r18, 0x00	; 0
    3cda:	30 e0       	ldi	r19, 0x00	; 0
    3cdc:	4a ef       	ldi	r20, 0xFA	; 250
    3cde:	54 e4       	ldi	r21, 0x44	; 68
    3ce0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ce4:	dc 01       	movw	r26, r24
    3ce6:	cb 01       	movw	r24, r22
    3ce8:	89 ab       	std	Y+49, r24	; 0x31
    3cea:	9a ab       	std	Y+50, r25	; 0x32
    3cec:	ab ab       	std	Y+51, r26	; 0x33
    3cee:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3cf0:	69 a9       	ldd	r22, Y+49	; 0x31
    3cf2:	7a a9       	ldd	r23, Y+50	; 0x32
    3cf4:	8b a9       	ldd	r24, Y+51	; 0x33
    3cf6:	9c a9       	ldd	r25, Y+52	; 0x34
    3cf8:	20 e0       	ldi	r18, 0x00	; 0
    3cfa:	30 e0       	ldi	r19, 0x00	; 0
    3cfc:	40 e8       	ldi	r20, 0x80	; 128
    3cfe:	5f e3       	ldi	r21, 0x3F	; 63
    3d00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d04:	88 23       	and	r24, r24
    3d06:	2c f4       	brge	.+10     	; 0x3d12 <LCD_voidInit+0x1a2>
		__ticks = 1;
    3d08:	81 e0       	ldi	r24, 0x01	; 1
    3d0a:	90 e0       	ldi	r25, 0x00	; 0
    3d0c:	98 ab       	std	Y+48, r25	; 0x30
    3d0e:	8f a7       	std	Y+47, r24	; 0x2f
    3d10:	3f c0       	rjmp	.+126    	; 0x3d90 <LCD_voidInit+0x220>
	else if (__tmp > 65535)
    3d12:	69 a9       	ldd	r22, Y+49	; 0x31
    3d14:	7a a9       	ldd	r23, Y+50	; 0x32
    3d16:	8b a9       	ldd	r24, Y+51	; 0x33
    3d18:	9c a9       	ldd	r25, Y+52	; 0x34
    3d1a:	20 e0       	ldi	r18, 0x00	; 0
    3d1c:	3f ef       	ldi	r19, 0xFF	; 255
    3d1e:	4f e7       	ldi	r20, 0x7F	; 127
    3d20:	57 e4       	ldi	r21, 0x47	; 71
    3d22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d26:	18 16       	cp	r1, r24
    3d28:	4c f5       	brge	.+82     	; 0x3d7c <LCD_voidInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d2a:	6d a9       	ldd	r22, Y+53	; 0x35
    3d2c:	7e a9       	ldd	r23, Y+54	; 0x36
    3d2e:	8f a9       	ldd	r24, Y+55	; 0x37
    3d30:	98 ad       	ldd	r25, Y+56	; 0x38
    3d32:	20 e0       	ldi	r18, 0x00	; 0
    3d34:	30 e0       	ldi	r19, 0x00	; 0
    3d36:	40 e2       	ldi	r20, 0x20	; 32
    3d38:	51 e4       	ldi	r21, 0x41	; 65
    3d3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d3e:	dc 01       	movw	r26, r24
    3d40:	cb 01       	movw	r24, r22
    3d42:	bc 01       	movw	r22, r24
    3d44:	cd 01       	movw	r24, r26
    3d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d4a:	dc 01       	movw	r26, r24
    3d4c:	cb 01       	movw	r24, r22
    3d4e:	98 ab       	std	Y+48, r25	; 0x30
    3d50:	8f a7       	std	Y+47, r24	; 0x2f
    3d52:	0f c0       	rjmp	.+30     	; 0x3d72 <LCD_voidInit+0x202>
    3d54:	88 ec       	ldi	r24, 0xC8	; 200
    3d56:	90 e0       	ldi	r25, 0x00	; 0
    3d58:	9e a7       	std	Y+46, r25	; 0x2e
    3d5a:	8d a7       	std	Y+45, r24	; 0x2d
    3d5c:	8d a5       	ldd	r24, Y+45	; 0x2d
    3d5e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3d60:	01 97       	sbiw	r24, 0x01	; 1
    3d62:	f1 f7       	brne	.-4      	; 0x3d60 <LCD_voidInit+0x1f0>
    3d64:	9e a7       	std	Y+46, r25	; 0x2e
    3d66:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d68:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d6a:	98 a9       	ldd	r25, Y+48	; 0x30
    3d6c:	01 97       	sbiw	r24, 0x01	; 1
    3d6e:	98 ab       	std	Y+48, r25	; 0x30
    3d70:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d72:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d74:	98 a9       	ldd	r25, Y+48	; 0x30
    3d76:	00 97       	sbiw	r24, 0x00	; 0
    3d78:	69 f7       	brne	.-38     	; 0x3d54 <LCD_voidInit+0x1e4>
    3d7a:	14 c0       	rjmp	.+40     	; 0x3da4 <LCD_voidInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d7c:	69 a9       	ldd	r22, Y+49	; 0x31
    3d7e:	7a a9       	ldd	r23, Y+50	; 0x32
    3d80:	8b a9       	ldd	r24, Y+51	; 0x33
    3d82:	9c a9       	ldd	r25, Y+52	; 0x34
    3d84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d88:	dc 01       	movw	r26, r24
    3d8a:	cb 01       	movw	r24, r22
    3d8c:	98 ab       	std	Y+48, r25	; 0x30
    3d8e:	8f a7       	std	Y+47, r24	; 0x2f
    3d90:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d92:	98 a9       	ldd	r25, Y+48	; 0x30
    3d94:	9c a7       	std	Y+44, r25	; 0x2c
    3d96:	8b a7       	std	Y+43, r24	; 0x2b
    3d98:	8b a5       	ldd	r24, Y+43	; 0x2b
    3d9a:	9c a5       	ldd	r25, Y+44	; 0x2c
    3d9c:	01 97       	sbiw	r24, 0x01	; 1
    3d9e:	f1 f7       	brne	.-4      	; 0x3d9c <LCD_voidInit+0x22c>
    3da0:	9c a7       	std	Y+44, r25	; 0x2c
    3da2:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(1);     // TIMER0_voidSetBusyWait_ms(1);

    /* Send Command Display ON-OFF Control */
    LCD_voidWriteCommand ( DIS_ON_NO_CURSER );
    3da4:	8c e0       	ldi	r24, 0x0C	; 12
    3da6:	0e 94 3d 20 	call	0x407a	; 0x407a <LCD_voidWriteCommand>
    3daa:	80 e0       	ldi	r24, 0x00	; 0
    3dac:	90 e0       	ldi	r25, 0x00	; 0
    3dae:	a0 e8       	ldi	r26, 0x80	; 128
    3db0:	bf e3       	ldi	r27, 0x3F	; 63
    3db2:	8f a3       	std	Y+39, r24	; 0x27
    3db4:	98 a7       	std	Y+40, r25	; 0x28
    3db6:	a9 a7       	std	Y+41, r26	; 0x29
    3db8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dba:	6f a1       	ldd	r22, Y+39	; 0x27
    3dbc:	78 a5       	ldd	r23, Y+40	; 0x28
    3dbe:	89 a5       	ldd	r24, Y+41	; 0x29
    3dc0:	9a a5       	ldd	r25, Y+42	; 0x2a
    3dc2:	20 e0       	ldi	r18, 0x00	; 0
    3dc4:	30 e0       	ldi	r19, 0x00	; 0
    3dc6:	4a ef       	ldi	r20, 0xFA	; 250
    3dc8:	54 e4       	ldi	r21, 0x44	; 68
    3dca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dce:	dc 01       	movw	r26, r24
    3dd0:	cb 01       	movw	r24, r22
    3dd2:	8b a3       	std	Y+35, r24	; 0x23
    3dd4:	9c a3       	std	Y+36, r25	; 0x24
    3dd6:	ad a3       	std	Y+37, r26	; 0x25
    3dd8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3dda:	6b a1       	ldd	r22, Y+35	; 0x23
    3ddc:	7c a1       	ldd	r23, Y+36	; 0x24
    3dde:	8d a1       	ldd	r24, Y+37	; 0x25
    3de0:	9e a1       	ldd	r25, Y+38	; 0x26
    3de2:	20 e0       	ldi	r18, 0x00	; 0
    3de4:	30 e0       	ldi	r19, 0x00	; 0
    3de6:	40 e8       	ldi	r20, 0x80	; 128
    3de8:	5f e3       	ldi	r21, 0x3F	; 63
    3dea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3dee:	88 23       	and	r24, r24
    3df0:	2c f4       	brge	.+10     	; 0x3dfc <LCD_voidInit+0x28c>
		__ticks = 1;
    3df2:	81 e0       	ldi	r24, 0x01	; 1
    3df4:	90 e0       	ldi	r25, 0x00	; 0
    3df6:	9a a3       	std	Y+34, r25	; 0x22
    3df8:	89 a3       	std	Y+33, r24	; 0x21
    3dfa:	3f c0       	rjmp	.+126    	; 0x3e7a <LCD_voidInit+0x30a>
	else if (__tmp > 65535)
    3dfc:	6b a1       	ldd	r22, Y+35	; 0x23
    3dfe:	7c a1       	ldd	r23, Y+36	; 0x24
    3e00:	8d a1       	ldd	r24, Y+37	; 0x25
    3e02:	9e a1       	ldd	r25, Y+38	; 0x26
    3e04:	20 e0       	ldi	r18, 0x00	; 0
    3e06:	3f ef       	ldi	r19, 0xFF	; 255
    3e08:	4f e7       	ldi	r20, 0x7F	; 127
    3e0a:	57 e4       	ldi	r21, 0x47	; 71
    3e0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e10:	18 16       	cp	r1, r24
    3e12:	4c f5       	brge	.+82     	; 0x3e66 <LCD_voidInit+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e14:	6f a1       	ldd	r22, Y+39	; 0x27
    3e16:	78 a5       	ldd	r23, Y+40	; 0x28
    3e18:	89 a5       	ldd	r24, Y+41	; 0x29
    3e1a:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e1c:	20 e0       	ldi	r18, 0x00	; 0
    3e1e:	30 e0       	ldi	r19, 0x00	; 0
    3e20:	40 e2       	ldi	r20, 0x20	; 32
    3e22:	51 e4       	ldi	r21, 0x41	; 65
    3e24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e28:	dc 01       	movw	r26, r24
    3e2a:	cb 01       	movw	r24, r22
    3e2c:	bc 01       	movw	r22, r24
    3e2e:	cd 01       	movw	r24, r26
    3e30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e34:	dc 01       	movw	r26, r24
    3e36:	cb 01       	movw	r24, r22
    3e38:	9a a3       	std	Y+34, r25	; 0x22
    3e3a:	89 a3       	std	Y+33, r24	; 0x21
    3e3c:	0f c0       	rjmp	.+30     	; 0x3e5c <LCD_voidInit+0x2ec>
    3e3e:	88 ec       	ldi	r24, 0xC8	; 200
    3e40:	90 e0       	ldi	r25, 0x00	; 0
    3e42:	98 a3       	std	Y+32, r25	; 0x20
    3e44:	8f 8f       	std	Y+31, r24	; 0x1f
    3e46:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3e48:	98 a1       	ldd	r25, Y+32	; 0x20
    3e4a:	01 97       	sbiw	r24, 0x01	; 1
    3e4c:	f1 f7       	brne	.-4      	; 0x3e4a <LCD_voidInit+0x2da>
    3e4e:	98 a3       	std	Y+32, r25	; 0x20
    3e50:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e52:	89 a1       	ldd	r24, Y+33	; 0x21
    3e54:	9a a1       	ldd	r25, Y+34	; 0x22
    3e56:	01 97       	sbiw	r24, 0x01	; 1
    3e58:	9a a3       	std	Y+34, r25	; 0x22
    3e5a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e5c:	89 a1       	ldd	r24, Y+33	; 0x21
    3e5e:	9a a1       	ldd	r25, Y+34	; 0x22
    3e60:	00 97       	sbiw	r24, 0x00	; 0
    3e62:	69 f7       	brne	.-38     	; 0x3e3e <LCD_voidInit+0x2ce>
    3e64:	14 c0       	rjmp	.+40     	; 0x3e8e <LCD_voidInit+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e66:	6b a1       	ldd	r22, Y+35	; 0x23
    3e68:	7c a1       	ldd	r23, Y+36	; 0x24
    3e6a:	8d a1       	ldd	r24, Y+37	; 0x25
    3e6c:	9e a1       	ldd	r25, Y+38	; 0x26
    3e6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e72:	dc 01       	movw	r26, r24
    3e74:	cb 01       	movw	r24, r22
    3e76:	9a a3       	std	Y+34, r25	; 0x22
    3e78:	89 a3       	std	Y+33, r24	; 0x21
    3e7a:	89 a1       	ldd	r24, Y+33	; 0x21
    3e7c:	9a a1       	ldd	r25, Y+34	; 0x22
    3e7e:	9e 8f       	std	Y+30, r25	; 0x1e
    3e80:	8d 8f       	std	Y+29, r24	; 0x1d
    3e82:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3e84:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3e86:	01 97       	sbiw	r24, 0x01	; 1
    3e88:	f1 f7       	brne	.-4      	; 0x3e86 <LCD_voidInit+0x316>
    3e8a:	9e 8f       	std	Y+30, r25	; 0x1e
    3e8c:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);     //TIMER0_voidSetBusyWait_ms(1);

    /* Send Command Display Clear */
    LCD_voidWriteCommand ( DIS_CLEAR );
    3e8e:	81 e0       	ldi	r24, 0x01	; 1
    3e90:	0e 94 3d 20 	call	0x407a	; 0x407a <LCD_voidWriteCommand>
    3e94:	80 e0       	ldi	r24, 0x00	; 0
    3e96:	90 e0       	ldi	r25, 0x00	; 0
    3e98:	a0 e0       	ldi	r26, 0x00	; 0
    3e9a:	b0 e4       	ldi	r27, 0x40	; 64
    3e9c:	89 8f       	std	Y+25, r24	; 0x19
    3e9e:	9a 8f       	std	Y+26, r25	; 0x1a
    3ea0:	ab 8f       	std	Y+27, r26	; 0x1b
    3ea2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ea4:	69 8d       	ldd	r22, Y+25	; 0x19
    3ea6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ea8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3eaa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3eac:	20 e0       	ldi	r18, 0x00	; 0
    3eae:	30 e0       	ldi	r19, 0x00	; 0
    3eb0:	4a ef       	ldi	r20, 0xFA	; 250
    3eb2:	54 e4       	ldi	r21, 0x44	; 68
    3eb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eb8:	dc 01       	movw	r26, r24
    3eba:	cb 01       	movw	r24, r22
    3ebc:	8d 8b       	std	Y+21, r24	; 0x15
    3ebe:	9e 8b       	std	Y+22, r25	; 0x16
    3ec0:	af 8b       	std	Y+23, r26	; 0x17
    3ec2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3ec4:	6d 89       	ldd	r22, Y+21	; 0x15
    3ec6:	7e 89       	ldd	r23, Y+22	; 0x16
    3ec8:	8f 89       	ldd	r24, Y+23	; 0x17
    3eca:	98 8d       	ldd	r25, Y+24	; 0x18
    3ecc:	20 e0       	ldi	r18, 0x00	; 0
    3ece:	30 e0       	ldi	r19, 0x00	; 0
    3ed0:	40 e8       	ldi	r20, 0x80	; 128
    3ed2:	5f e3       	ldi	r21, 0x3F	; 63
    3ed4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ed8:	88 23       	and	r24, r24
    3eda:	2c f4       	brge	.+10     	; 0x3ee6 <LCD_voidInit+0x376>
		__ticks = 1;
    3edc:	81 e0       	ldi	r24, 0x01	; 1
    3ede:	90 e0       	ldi	r25, 0x00	; 0
    3ee0:	9c 8b       	std	Y+20, r25	; 0x14
    3ee2:	8b 8b       	std	Y+19, r24	; 0x13
    3ee4:	3f c0       	rjmp	.+126    	; 0x3f64 <LCD_voidInit+0x3f4>
	else if (__tmp > 65535)
    3ee6:	6d 89       	ldd	r22, Y+21	; 0x15
    3ee8:	7e 89       	ldd	r23, Y+22	; 0x16
    3eea:	8f 89       	ldd	r24, Y+23	; 0x17
    3eec:	98 8d       	ldd	r25, Y+24	; 0x18
    3eee:	20 e0       	ldi	r18, 0x00	; 0
    3ef0:	3f ef       	ldi	r19, 0xFF	; 255
    3ef2:	4f e7       	ldi	r20, 0x7F	; 127
    3ef4:	57 e4       	ldi	r21, 0x47	; 71
    3ef6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3efa:	18 16       	cp	r1, r24
    3efc:	4c f5       	brge	.+82     	; 0x3f50 <LCD_voidInit+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3efe:	69 8d       	ldd	r22, Y+25	; 0x19
    3f00:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f04:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f06:	20 e0       	ldi	r18, 0x00	; 0
    3f08:	30 e0       	ldi	r19, 0x00	; 0
    3f0a:	40 e2       	ldi	r20, 0x20	; 32
    3f0c:	51 e4       	ldi	r21, 0x41	; 65
    3f0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f12:	dc 01       	movw	r26, r24
    3f14:	cb 01       	movw	r24, r22
    3f16:	bc 01       	movw	r22, r24
    3f18:	cd 01       	movw	r24, r26
    3f1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f1e:	dc 01       	movw	r26, r24
    3f20:	cb 01       	movw	r24, r22
    3f22:	9c 8b       	std	Y+20, r25	; 0x14
    3f24:	8b 8b       	std	Y+19, r24	; 0x13
    3f26:	0f c0       	rjmp	.+30     	; 0x3f46 <LCD_voidInit+0x3d6>
    3f28:	88 ec       	ldi	r24, 0xC8	; 200
    3f2a:	90 e0       	ldi	r25, 0x00	; 0
    3f2c:	9a 8b       	std	Y+18, r25	; 0x12
    3f2e:	89 8b       	std	Y+17, r24	; 0x11
    3f30:	89 89       	ldd	r24, Y+17	; 0x11
    3f32:	9a 89       	ldd	r25, Y+18	; 0x12
    3f34:	01 97       	sbiw	r24, 0x01	; 1
    3f36:	f1 f7       	brne	.-4      	; 0x3f34 <LCD_voidInit+0x3c4>
    3f38:	9a 8b       	std	Y+18, r25	; 0x12
    3f3a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f3c:	8b 89       	ldd	r24, Y+19	; 0x13
    3f3e:	9c 89       	ldd	r25, Y+20	; 0x14
    3f40:	01 97       	sbiw	r24, 0x01	; 1
    3f42:	9c 8b       	std	Y+20, r25	; 0x14
    3f44:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f46:	8b 89       	ldd	r24, Y+19	; 0x13
    3f48:	9c 89       	ldd	r25, Y+20	; 0x14
    3f4a:	00 97       	sbiw	r24, 0x00	; 0
    3f4c:	69 f7       	brne	.-38     	; 0x3f28 <LCD_voidInit+0x3b8>
    3f4e:	14 c0       	rjmp	.+40     	; 0x3f78 <LCD_voidInit+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f50:	6d 89       	ldd	r22, Y+21	; 0x15
    3f52:	7e 89       	ldd	r23, Y+22	; 0x16
    3f54:	8f 89       	ldd	r24, Y+23	; 0x17
    3f56:	98 8d       	ldd	r25, Y+24	; 0x18
    3f58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f5c:	dc 01       	movw	r26, r24
    3f5e:	cb 01       	movw	r24, r22
    3f60:	9c 8b       	std	Y+20, r25	; 0x14
    3f62:	8b 8b       	std	Y+19, r24	; 0x13
    3f64:	8b 89       	ldd	r24, Y+19	; 0x13
    3f66:	9c 89       	ldd	r25, Y+20	; 0x14
    3f68:	98 8b       	std	Y+16, r25	; 0x10
    3f6a:	8f 87       	std	Y+15, r24	; 0x0f
    3f6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f6e:	98 89       	ldd	r25, Y+16	; 0x10
    3f70:	01 97       	sbiw	r24, 0x01	; 1
    3f72:	f1 f7       	brne	.-4      	; 0x3f70 <LCD_voidInit+0x400>
    3f74:	98 8b       	std	Y+16, r25	; 0x10
    3f76:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2);     //TIMER0_voidSetBusyWait_ms(2);

    /* Send Command Entry Mode */
    LCD_voidWriteCommand ( ENTRY_MODE_INCREASE_NO_SHIFT );
    3f78:	86 e0       	ldi	r24, 0x06	; 6
    3f7a:	0e 94 3d 20 	call	0x407a	; 0x407a <LCD_voidWriteCommand>
    3f7e:	80 e0       	ldi	r24, 0x00	; 0
    3f80:	90 e0       	ldi	r25, 0x00	; 0
    3f82:	a0 e8       	ldi	r26, 0x80	; 128
    3f84:	bf e3       	ldi	r27, 0x3F	; 63
    3f86:	8b 87       	std	Y+11, r24	; 0x0b
    3f88:	9c 87       	std	Y+12, r25	; 0x0c
    3f8a:	ad 87       	std	Y+13, r26	; 0x0d
    3f8c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f90:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f92:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f94:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f96:	20 e0       	ldi	r18, 0x00	; 0
    3f98:	30 e0       	ldi	r19, 0x00	; 0
    3f9a:	4a ef       	ldi	r20, 0xFA	; 250
    3f9c:	54 e4       	ldi	r21, 0x44	; 68
    3f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fa2:	dc 01       	movw	r26, r24
    3fa4:	cb 01       	movw	r24, r22
    3fa6:	8f 83       	std	Y+7, r24	; 0x07
    3fa8:	98 87       	std	Y+8, r25	; 0x08
    3faa:	a9 87       	std	Y+9, r26	; 0x09
    3fac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3fae:	6f 81       	ldd	r22, Y+7	; 0x07
    3fb0:	78 85       	ldd	r23, Y+8	; 0x08
    3fb2:	89 85       	ldd	r24, Y+9	; 0x09
    3fb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fb6:	20 e0       	ldi	r18, 0x00	; 0
    3fb8:	30 e0       	ldi	r19, 0x00	; 0
    3fba:	40 e8       	ldi	r20, 0x80	; 128
    3fbc:	5f e3       	ldi	r21, 0x3F	; 63
    3fbe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3fc2:	88 23       	and	r24, r24
    3fc4:	2c f4       	brge	.+10     	; 0x3fd0 <LCD_voidInit+0x460>
		__ticks = 1;
    3fc6:	81 e0       	ldi	r24, 0x01	; 1
    3fc8:	90 e0       	ldi	r25, 0x00	; 0
    3fca:	9e 83       	std	Y+6, r25	; 0x06
    3fcc:	8d 83       	std	Y+5, r24	; 0x05
    3fce:	3f c0       	rjmp	.+126    	; 0x404e <LCD_voidInit+0x4de>
	else if (__tmp > 65535)
    3fd0:	6f 81       	ldd	r22, Y+7	; 0x07
    3fd2:	78 85       	ldd	r23, Y+8	; 0x08
    3fd4:	89 85       	ldd	r24, Y+9	; 0x09
    3fd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fd8:	20 e0       	ldi	r18, 0x00	; 0
    3fda:	3f ef       	ldi	r19, 0xFF	; 255
    3fdc:	4f e7       	ldi	r20, 0x7F	; 127
    3fde:	57 e4       	ldi	r21, 0x47	; 71
    3fe0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3fe4:	18 16       	cp	r1, r24
    3fe6:	4c f5       	brge	.+82     	; 0x403a <LCD_voidInit+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fe8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fea:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fec:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fee:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ff0:	20 e0       	ldi	r18, 0x00	; 0
    3ff2:	30 e0       	ldi	r19, 0x00	; 0
    3ff4:	40 e2       	ldi	r20, 0x20	; 32
    3ff6:	51 e4       	ldi	r21, 0x41	; 65
    3ff8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ffc:	dc 01       	movw	r26, r24
    3ffe:	cb 01       	movw	r24, r22
    4000:	bc 01       	movw	r22, r24
    4002:	cd 01       	movw	r24, r26
    4004:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4008:	dc 01       	movw	r26, r24
    400a:	cb 01       	movw	r24, r22
    400c:	9e 83       	std	Y+6, r25	; 0x06
    400e:	8d 83       	std	Y+5, r24	; 0x05
    4010:	0f c0       	rjmp	.+30     	; 0x4030 <LCD_voidInit+0x4c0>
    4012:	88 ec       	ldi	r24, 0xC8	; 200
    4014:	90 e0       	ldi	r25, 0x00	; 0
    4016:	9c 83       	std	Y+4, r25	; 0x04
    4018:	8b 83       	std	Y+3, r24	; 0x03
    401a:	8b 81       	ldd	r24, Y+3	; 0x03
    401c:	9c 81       	ldd	r25, Y+4	; 0x04
    401e:	01 97       	sbiw	r24, 0x01	; 1
    4020:	f1 f7       	brne	.-4      	; 0x401e <LCD_voidInit+0x4ae>
    4022:	9c 83       	std	Y+4, r25	; 0x04
    4024:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4026:	8d 81       	ldd	r24, Y+5	; 0x05
    4028:	9e 81       	ldd	r25, Y+6	; 0x06
    402a:	01 97       	sbiw	r24, 0x01	; 1
    402c:	9e 83       	std	Y+6, r25	; 0x06
    402e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4030:	8d 81       	ldd	r24, Y+5	; 0x05
    4032:	9e 81       	ldd	r25, Y+6	; 0x06
    4034:	00 97       	sbiw	r24, 0x00	; 0
    4036:	69 f7       	brne	.-38     	; 0x4012 <LCD_voidInit+0x4a2>
    4038:	14 c0       	rjmp	.+40     	; 0x4062 <LCD_voidInit+0x4f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    403a:	6f 81       	ldd	r22, Y+7	; 0x07
    403c:	78 85       	ldd	r23, Y+8	; 0x08
    403e:	89 85       	ldd	r24, Y+9	; 0x09
    4040:	9a 85       	ldd	r25, Y+10	; 0x0a
    4042:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4046:	dc 01       	movw	r26, r24
    4048:	cb 01       	movw	r24, r22
    404a:	9e 83       	std	Y+6, r25	; 0x06
    404c:	8d 83       	std	Y+5, r24	; 0x05
    404e:	8d 81       	ldd	r24, Y+5	; 0x05
    4050:	9e 81       	ldd	r25, Y+6	; 0x06
    4052:	9a 83       	std	Y+2, r25	; 0x02
    4054:	89 83       	std	Y+1, r24	; 0x01
    4056:	89 81       	ldd	r24, Y+1	; 0x01
    4058:	9a 81       	ldd	r25, Y+2	; 0x02
    405a:	01 97       	sbiw	r24, 0x01	; 1
    405c:	f1 f7       	brne	.-4      	; 0x405a <LCD_voidInit+0x4ea>
    405e:	9a 83       	std	Y+2, r25	; 0x02
    4060:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);     //TIMER0_voidSetBusyWait_ms(1);


}
    4062:	ca 5b       	subi	r28, 0xBA	; 186
    4064:	df 4f       	sbci	r29, 0xFF	; 255
    4066:	0f b6       	in	r0, 0x3f	; 63
    4068:	f8 94       	cli
    406a:	de bf       	out	0x3e, r29	; 62
    406c:	0f be       	out	0x3f, r0	; 63
    406e:	cd bf       	out	0x3d, r28	; 61
    4070:	cf 91       	pop	r28
    4072:	df 91       	pop	r29
    4074:	1f 91       	pop	r17
    4076:	0f 91       	pop	r16
    4078:	08 95       	ret

0000407a <LCD_voidWriteCommand>:


void LCD_voidWriteCommand ( u8 Copy_u8Command )
{
    407a:	df 93       	push	r29
    407c:	cf 93       	push	r28
    407e:	0f 92       	push	r0
    4080:	cd b7       	in	r28, 0x3d	; 61
    4082:	de b7       	in	r29, 0x3e	; 62
    4084:	89 83       	std	Y+1, r24	; 0x01
    /* RS=0 because we send a Command not Data */
    DIO_voidSetPinValue (LCD_CONTROL_PORT,RS_PIN,DIO_LOW);
    4086:	83 e0       	ldi	r24, 0x03	; 3
    4088:	62 e0       	ldi	r22, 0x02	; 2
    408a:	40 e0       	ldi	r20, 0x00	; 0
    408c:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>

    /* RW=0 because we Write a Command not Read */
    DIO_voidSetPinValue (LCD_CONTROL_PORT,RW_PIN,DIO_LOW);
    4090:	83 e0       	ldi	r24, 0x03	; 3
    4092:	63 e0       	ldi	r22, 0x03	; 3
    4094:	40 e0       	ldi	r20, 0x00	; 0
    4096:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>

    /* Send Data bits from MC PINS to LCD Data PINS */
    DIO_voidSetPortValue(LCD_DATA_PORT,Copy_u8Command);
    409a:	81 e0       	ldi	r24, 0x01	; 1
    409c:	69 81       	ldd	r22, Y+1	; 0x01
    409e:	0e 94 9a 14 	call	0x2934	; 0x2934 <DIO_voidSetPortValue>

    /* Falling Edge on E PIN to make LCD Read This Command */
    DIO_voidSetPinValue (LCD_CONTROL_PORT,E_PIN,DIO_HIGH);
    40a2:	83 e0       	ldi	r24, 0x03	; 3
    40a4:	64 e0       	ldi	r22, 0x04	; 4
    40a6:	41 e0       	ldi	r20, 0x01	; 1
    40a8:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
    //_delay_ms(1);
    DIO_voidSetPinValue (LCD_CONTROL_PORT,E_PIN,DIO_LOW);
    40ac:	83 e0       	ldi	r24, 0x03	; 3
    40ae:	64 e0       	ldi	r22, 0x04	; 4
    40b0:	40 e0       	ldi	r20, 0x00	; 0
    40b2:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
}
    40b6:	0f 90       	pop	r0
    40b8:	cf 91       	pop	r28
    40ba:	df 91       	pop	r29
    40bc:	08 95       	ret

000040be <LCD_voidWriteChar>:


void LCD_voidWriteChar ( u8 Copy_u8Char )
{
    40be:	df 93       	push	r29
    40c0:	cf 93       	push	r28
    40c2:	0f 92       	push	r0
    40c4:	cd b7       	in	r28, 0x3d	; 61
    40c6:	de b7       	in	r29, 0x3e	; 62
    40c8:	89 83       	std	Y+1, r24	; 0x01
    /* RS=1 because we send a Data not Command */
    DIO_voidSetPinValue (LCD_CONTROL_PORT,RS_PIN,DIO_HIGH);
    40ca:	83 e0       	ldi	r24, 0x03	; 3
    40cc:	62 e0       	ldi	r22, 0x02	; 2
    40ce:	41 e0       	ldi	r20, 0x01	; 1
    40d0:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>

    /* RW=0 because we Write a Data not Read */
    DIO_voidSetPinValue (LCD_CONTROL_PORT,RW_PIN,DIO_LOW);
    40d4:	83 e0       	ldi	r24, 0x03	; 3
    40d6:	63 e0       	ldi	r22, 0x03	; 3
    40d8:	40 e0       	ldi	r20, 0x00	; 0
    40da:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>

    /* Send Data bits from MC PINS to LCD Data PINS */
    DIO_voidSetPortValue(LCD_DATA_PORT,Copy_u8Char);
    40de:	81 e0       	ldi	r24, 0x01	; 1
    40e0:	69 81       	ldd	r22, Y+1	; 0x01
    40e2:	0e 94 9a 14 	call	0x2934	; 0x2934 <DIO_voidSetPortValue>

    /* Falling Edge on E PIN to make LCD Read This Command */
    DIO_voidSetPinValue (LCD_CONTROL_PORT,E_PIN,DIO_HIGH);
    40e6:	83 e0       	ldi	r24, 0x03	; 3
    40e8:	64 e0       	ldi	r22, 0x04	; 4
    40ea:	41 e0       	ldi	r20, 0x01	; 1
    40ec:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
    //_delay_ms(1);
    DIO_voidSetPinValue (LCD_CONTROL_PORT,E_PIN,DIO_LOW);
    40f0:	83 e0       	ldi	r24, 0x03	; 3
    40f2:	64 e0       	ldi	r22, 0x04	; 4
    40f4:	40 e0       	ldi	r20, 0x00	; 0
    40f6:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
}
    40fa:	0f 90       	pop	r0
    40fc:	cf 91       	pop	r28
    40fe:	df 91       	pop	r29
    4100:	08 95       	ret

00004102 <LCD_voidWriteString>:



void LCD_voidWriteString (u8 *Copy_u8Arr )
{
    4102:	df 93       	push	r29
    4104:	cf 93       	push	r28
    4106:	00 d0       	rcall	.+0      	; 0x4108 <LCD_voidWriteString+0x6>
    4108:	0f 92       	push	r0
    410a:	cd b7       	in	r28, 0x3d	; 61
    410c:	de b7       	in	r29, 0x3e	; 62
    410e:	9b 83       	std	Y+3, r25	; 0x03
    4110:	8a 83       	std	Y+2, r24	; 0x02
    u8 i = 0 ;
    4112:	19 82       	std	Y+1, r1	; 0x01
    4114:	0e c0       	rjmp	.+28     	; 0x4132 <LCD_voidWriteString+0x30>
    while (Copy_u8Arr[i] != '\0' )
    {
        LCD_voidWriteChar ( Copy_u8Arr[i] );
    4116:	89 81       	ldd	r24, Y+1	; 0x01
    4118:	28 2f       	mov	r18, r24
    411a:	30 e0       	ldi	r19, 0x00	; 0
    411c:	8a 81       	ldd	r24, Y+2	; 0x02
    411e:	9b 81       	ldd	r25, Y+3	; 0x03
    4120:	fc 01       	movw	r30, r24
    4122:	e2 0f       	add	r30, r18
    4124:	f3 1f       	adc	r31, r19
    4126:	80 81       	ld	r24, Z
    4128:	0e 94 5f 20 	call	0x40be	; 0x40be <LCD_voidWriteChar>
        i++;
    412c:	89 81       	ldd	r24, Y+1	; 0x01
    412e:	8f 5f       	subi	r24, 0xFF	; 255
    4130:	89 83       	std	Y+1, r24	; 0x01


void LCD_voidWriteString (u8 *Copy_u8Arr )
{
    u8 i = 0 ;
    while (Copy_u8Arr[i] != '\0' )
    4132:	89 81       	ldd	r24, Y+1	; 0x01
    4134:	28 2f       	mov	r18, r24
    4136:	30 e0       	ldi	r19, 0x00	; 0
    4138:	8a 81       	ldd	r24, Y+2	; 0x02
    413a:	9b 81       	ldd	r25, Y+3	; 0x03
    413c:	fc 01       	movw	r30, r24
    413e:	e2 0f       	add	r30, r18
    4140:	f3 1f       	adc	r31, r19
    4142:	80 81       	ld	r24, Z
    4144:	88 23       	and	r24, r24
    4146:	39 f7       	brne	.-50     	; 0x4116 <LCD_voidWriteString+0x14>
    {
        LCD_voidWriteChar ( Copy_u8Arr[i] );
        i++;
    }
}
    4148:	0f 90       	pop	r0
    414a:	0f 90       	pop	r0
    414c:	0f 90       	pop	r0
    414e:	cf 91       	pop	r28
    4150:	df 91       	pop	r29
    4152:	08 95       	ret

00004154 <LCD_voidWrite_u32Number>:


void LCD_voidWrite_u32Number ( u32 Copy_u32Number)
{
    4154:	0f 93       	push	r16
    4156:	1f 93       	push	r17
    4158:	df 93       	push	r29
    415a:	cf 93       	push	r28
    415c:	cd b7       	in	r28, 0x3d	; 61
    415e:	de b7       	in	r29, 0x3e	; 62
    4160:	6b 97       	sbiw	r28, 0x1b	; 27
    4162:	0f b6       	in	r0, 0x3f	; 63
    4164:	f8 94       	cli
    4166:	de bf       	out	0x3e, r29	; 62
    4168:	0f be       	out	0x3f, r0	; 63
    416a:	cd bf       	out	0x3d, r28	; 61
    416c:	68 8f       	std	Y+24, r22	; 0x18
    416e:	79 8f       	std	Y+25, r23	; 0x19
    4170:	8a 8f       	std	Y+26, r24	; 0x1a
    4172:	9b 8f       	std	Y+27, r25	; 0x1b
    u8 Arr[20] ;
    u8 i=0 ;
    4174:	1b 82       	std	Y+3, r1	; 0x03
    4176:	2d c0       	rjmp	.+90     	; 0x41d2 <LCD_voidWrite_u32Number+0x7e>
    while ( Copy_u32Number > 0 )
    {
        Arr[i] = Copy_u32Number % 10 ;
    4178:	8b 81       	ldd	r24, Y+3	; 0x03
    417a:	08 2f       	mov	r16, r24
    417c:	10 e0       	ldi	r17, 0x00	; 0
    417e:	88 8d       	ldd	r24, Y+24	; 0x18
    4180:	99 8d       	ldd	r25, Y+25	; 0x19
    4182:	aa 8d       	ldd	r26, Y+26	; 0x1a
    4184:	bb 8d       	ldd	r27, Y+27	; 0x1b
    4186:	2a e0       	ldi	r18, 0x0A	; 10
    4188:	30 e0       	ldi	r19, 0x00	; 0
    418a:	40 e0       	ldi	r20, 0x00	; 0
    418c:	50 e0       	ldi	r21, 0x00	; 0
    418e:	bc 01       	movw	r22, r24
    4190:	cd 01       	movw	r24, r26
    4192:	0e 94 ec 2b 	call	0x57d8	; 0x57d8 <__udivmodsi4>
    4196:	dc 01       	movw	r26, r24
    4198:	cb 01       	movw	r24, r22
    419a:	28 2f       	mov	r18, r24
    419c:	ce 01       	movw	r24, r28
    419e:	04 96       	adiw	r24, 0x04	; 4
    41a0:	fc 01       	movw	r30, r24
    41a2:	e0 0f       	add	r30, r16
    41a4:	f1 1f       	adc	r31, r17
    41a6:	20 83       	st	Z, r18
        Copy_u32Number /= 10 ;
    41a8:	88 8d       	ldd	r24, Y+24	; 0x18
    41aa:	99 8d       	ldd	r25, Y+25	; 0x19
    41ac:	aa 8d       	ldd	r26, Y+26	; 0x1a
    41ae:	bb 8d       	ldd	r27, Y+27	; 0x1b
    41b0:	2a e0       	ldi	r18, 0x0A	; 10
    41b2:	30 e0       	ldi	r19, 0x00	; 0
    41b4:	40 e0       	ldi	r20, 0x00	; 0
    41b6:	50 e0       	ldi	r21, 0x00	; 0
    41b8:	bc 01       	movw	r22, r24
    41ba:	cd 01       	movw	r24, r26
    41bc:	0e 94 ec 2b 	call	0x57d8	; 0x57d8 <__udivmodsi4>
    41c0:	da 01       	movw	r26, r20
    41c2:	c9 01       	movw	r24, r18
    41c4:	88 8f       	std	Y+24, r24	; 0x18
    41c6:	99 8f       	std	Y+25, r25	; 0x19
    41c8:	aa 8f       	std	Y+26, r26	; 0x1a
    41ca:	bb 8f       	std	Y+27, r27	; 0x1b
        i++;
    41cc:	8b 81       	ldd	r24, Y+3	; 0x03
    41ce:	8f 5f       	subi	r24, 0xFF	; 255
    41d0:	8b 83       	std	Y+3, r24	; 0x03

void LCD_voidWrite_u32Number ( u32 Copy_u32Number)
{
    u8 Arr[20] ;
    u8 i=0 ;
    while ( Copy_u32Number > 0 )
    41d2:	88 8d       	ldd	r24, Y+24	; 0x18
    41d4:	99 8d       	ldd	r25, Y+25	; 0x19
    41d6:	aa 8d       	ldd	r26, Y+26	; 0x1a
    41d8:	bb 8d       	ldd	r27, Y+27	; 0x1b
    41da:	00 97       	sbiw	r24, 0x00	; 0
    41dc:	a1 05       	cpc	r26, r1
    41de:	b1 05       	cpc	r27, r1
    41e0:	59 f6       	brne	.-106    	; 0x4178 <LCD_voidWrite_u32Number+0x24>
    {
        Arr[i] = Copy_u32Number % 10 ;
        Copy_u32Number /= 10 ;
        i++;
    }
    i--;
    41e2:	8b 81       	ldd	r24, Y+3	; 0x03
    41e4:	81 50       	subi	r24, 0x01	; 1
    41e6:	8b 83       	std	Y+3, r24	; 0x03
    for( s16 j=i ; j>=0 ; j--)
    41e8:	8b 81       	ldd	r24, Y+3	; 0x03
    41ea:	88 2f       	mov	r24, r24
    41ec:	90 e0       	ldi	r25, 0x00	; 0
    41ee:	9a 83       	std	Y+2, r25	; 0x02
    41f0:	89 83       	std	Y+1, r24	; 0x01
    41f2:	10 c0       	rjmp	.+32     	; 0x4214 <LCD_voidWrite_u32Number+0xc0>
    {
        LCD_voidWriteChar ( Arr[j] + '0' );
    41f4:	29 81       	ldd	r18, Y+1	; 0x01
    41f6:	3a 81       	ldd	r19, Y+2	; 0x02
    41f8:	ce 01       	movw	r24, r28
    41fa:	04 96       	adiw	r24, 0x04	; 4
    41fc:	fc 01       	movw	r30, r24
    41fe:	e2 0f       	add	r30, r18
    4200:	f3 1f       	adc	r31, r19
    4202:	80 81       	ld	r24, Z
    4204:	80 5d       	subi	r24, 0xD0	; 208
    4206:	0e 94 5f 20 	call	0x40be	; 0x40be <LCD_voidWriteChar>
        Arr[i] = Copy_u32Number % 10 ;
        Copy_u32Number /= 10 ;
        i++;
    }
    i--;
    for( s16 j=i ; j>=0 ; j--)
    420a:	89 81       	ldd	r24, Y+1	; 0x01
    420c:	9a 81       	ldd	r25, Y+2	; 0x02
    420e:	01 97       	sbiw	r24, 0x01	; 1
    4210:	9a 83       	std	Y+2, r25	; 0x02
    4212:	89 83       	std	Y+1, r24	; 0x01
    4214:	89 81       	ldd	r24, Y+1	; 0x01
    4216:	9a 81       	ldd	r25, Y+2	; 0x02
    4218:	99 23       	and	r25, r25
    421a:	64 f7       	brge	.-40     	; 0x41f4 <LCD_voidWrite_u32Number+0xa0>
    {
        LCD_voidWriteChar ( Arr[j] + '0' );
    }
}
    421c:	6b 96       	adiw	r28, 0x1b	; 27
    421e:	0f b6       	in	r0, 0x3f	; 63
    4220:	f8 94       	cli
    4222:	de bf       	out	0x3e, r29	; 62
    4224:	0f be       	out	0x3f, r0	; 63
    4226:	cd bf       	out	0x3d, r28	; 61
    4228:	cf 91       	pop	r28
    422a:	df 91       	pop	r29
    422c:	1f 91       	pop	r17
    422e:	0f 91       	pop	r16
    4230:	08 95       	ret

00004232 <LCD_voidGoTo_XY>:


void LCD_voidGoTo_XY ( u8 Copy_u8Line , u8 Copy_u8Position )
{
    4232:	df 93       	push	r29
    4234:	cf 93       	push	r28
    4236:	00 d0       	rcall	.+0      	; 0x4238 <LCD_voidGoTo_XY+0x6>
    4238:	00 d0       	rcall	.+0      	; 0x423a <LCD_voidGoTo_XY+0x8>
    423a:	cd b7       	in	r28, 0x3d	; 61
    423c:	de b7       	in	r29, 0x3e	; 62
    423e:	89 83       	std	Y+1, r24	; 0x01
    4240:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8Line > LINE_2 || Copy_u8Position > 15 )
    4242:	89 81       	ldd	r24, Y+1	; 0x01
    4244:	82 30       	cpi	r24, 0x02	; 2
    4246:	d8 f4       	brcc	.+54     	; 0x427e <LCD_voidGoTo_XY+0x4c>
    4248:	8a 81       	ldd	r24, Y+2	; 0x02
    424a:	80 31       	cpi	r24, 0x10	; 16
    424c:	c0 f4       	brcc	.+48     	; 0x427e <LCD_voidGoTo_XY+0x4c>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8Line)
    424e:	89 81       	ldd	r24, Y+1	; 0x01
    4250:	28 2f       	mov	r18, r24
    4252:	30 e0       	ldi	r19, 0x00	; 0
    4254:	3c 83       	std	Y+4, r19	; 0x04
    4256:	2b 83       	std	Y+3, r18	; 0x03
    4258:	8b 81       	ldd	r24, Y+3	; 0x03
    425a:	9c 81       	ldd	r25, Y+4	; 0x04
    425c:	00 97       	sbiw	r24, 0x00	; 0
    425e:	31 f0       	breq	.+12     	; 0x426c <LCD_voidGoTo_XY+0x3a>
    4260:	2b 81       	ldd	r18, Y+3	; 0x03
    4262:	3c 81       	ldd	r19, Y+4	; 0x04
    4264:	21 30       	cpi	r18, 0x01	; 1
    4266:	31 05       	cpc	r19, r1
    4268:	31 f0       	breq	.+12     	; 0x4276 <LCD_voidGoTo_XY+0x44>
    426a:	09 c0       	rjmp	.+18     	; 0x427e <LCD_voidGoTo_XY+0x4c>
        {
            case LINE_1 :    LCD_voidWriteCommand ( 0x80 + Copy_u8Position );      break;  //First position at Line_1 is 0x80 Address at DDRAM
    426c:	8a 81       	ldd	r24, Y+2	; 0x02
    426e:	80 58       	subi	r24, 0x80	; 128
    4270:	0e 94 3d 20 	call	0x407a	; 0x407a <LCD_voidWriteCommand>
    4274:	04 c0       	rjmp	.+8      	; 0x427e <LCD_voidGoTo_XY+0x4c>
            case LINE_2 :    LCD_voidWriteCommand ( 0xC0 + Copy_u8Position );      break;  //First position at Line_2 is 0xC0 Address at DDRAM
    4276:	8a 81       	ldd	r24, Y+2	; 0x02
    4278:	80 54       	subi	r24, 0x40	; 64
    427a:	0e 94 3d 20 	call	0x407a	; 0x407a <LCD_voidWriteCommand>
            default     :                                                          break;
        }        
    }
}
    427e:	0f 90       	pop	r0
    4280:	0f 90       	pop	r0
    4282:	0f 90       	pop	r0
    4284:	0f 90       	pop	r0
    4286:	cf 91       	pop	r28
    4288:	df 91       	pop	r29
    428a:	08 95       	ret

0000428c <LCD_voidDrawPattern>:



void LCD_voidDrawPattern ( u8 Copy_u8Pattern_Number , u8 *Copy_u8Arr_Pattern )
{
    428c:	df 93       	push	r29
    428e:	cf 93       	push	r28
    4290:	00 d0       	rcall	.+0      	; 0x4292 <LCD_voidDrawPattern+0x6>
    4292:	00 d0       	rcall	.+0      	; 0x4294 <LCD_voidDrawPattern+0x8>
    4294:	cd b7       	in	r28, 0x3d	; 61
    4296:	de b7       	in	r29, 0x3e	; 62
    4298:	8a 83       	std	Y+2, r24	; 0x02
    429a:	7c 83       	std	Y+4, r23	; 0x04
    429c:	6b 83       	std	Y+3, r22	; 0x03
    LCD_voidWriteCommand ( Copy_u8Pattern_Number );
    429e:	8a 81       	ldd	r24, Y+2	; 0x02
    42a0:	0e 94 3d 20 	call	0x407a	; 0x407a <LCD_voidWriteCommand>

    for ( u8 i=0 ; i < 8 ; i++ )
    42a4:	19 82       	std	Y+1, r1	; 0x01
    42a6:	0e c0       	rjmp	.+28     	; 0x42c4 <LCD_voidDrawPattern+0x38>
    {
        LCD_voidWriteChar ( Copy_u8Arr_Pattern[i] );
    42a8:	89 81       	ldd	r24, Y+1	; 0x01
    42aa:	28 2f       	mov	r18, r24
    42ac:	30 e0       	ldi	r19, 0x00	; 0
    42ae:	8b 81       	ldd	r24, Y+3	; 0x03
    42b0:	9c 81       	ldd	r25, Y+4	; 0x04
    42b2:	fc 01       	movw	r30, r24
    42b4:	e2 0f       	add	r30, r18
    42b6:	f3 1f       	adc	r31, r19
    42b8:	80 81       	ld	r24, Z
    42ba:	0e 94 5f 20 	call	0x40be	; 0x40be <LCD_voidWriteChar>

void LCD_voidDrawPattern ( u8 Copy_u8Pattern_Number , u8 *Copy_u8Arr_Pattern )
{
    LCD_voidWriteCommand ( Copy_u8Pattern_Number );

    for ( u8 i=0 ; i < 8 ; i++ )
    42be:	89 81       	ldd	r24, Y+1	; 0x01
    42c0:	8f 5f       	subi	r24, 0xFF	; 255
    42c2:	89 83       	std	Y+1, r24	; 0x01
    42c4:	89 81       	ldd	r24, Y+1	; 0x01
    42c6:	88 30       	cpi	r24, 0x08	; 8
    42c8:	78 f3       	brcs	.-34     	; 0x42a8 <LCD_voidDrawPattern+0x1c>
    {
        LCD_voidWriteChar ( Copy_u8Arr_Pattern[i] );
    }
}
    42ca:	0f 90       	pop	r0
    42cc:	0f 90       	pop	r0
    42ce:	0f 90       	pop	r0
    42d0:	0f 90       	pop	r0
    42d2:	cf 91       	pop	r28
    42d4:	df 91       	pop	r29
    42d6:	08 95       	ret

000042d8 <LCD_voidWritePattern>:




void LCD_voidWritePattern ( u8 Copy_u8Pattern , u8 Copy_u8Line , u8 Copy_u8Position )
{
    42d8:	df 93       	push	r29
    42da:	cf 93       	push	r28
    42dc:	00 d0       	rcall	.+0      	; 0x42de <LCD_voidWritePattern+0x6>
    42de:	0f 92       	push	r0
    42e0:	cd b7       	in	r28, 0x3d	; 61
    42e2:	de b7       	in	r29, 0x3e	; 62
    42e4:	89 83       	std	Y+1, r24	; 0x01
    42e6:	6a 83       	std	Y+2, r22	; 0x02
    42e8:	4b 83       	std	Y+3, r20	; 0x03
    LCD_voidGoTo_XY ( Copy_u8Line , Copy_u8Position );
    42ea:	8a 81       	ldd	r24, Y+2	; 0x02
    42ec:	6b 81       	ldd	r22, Y+3	; 0x03
    42ee:	0e 94 19 21 	call	0x4232	; 0x4232 <LCD_voidGoTo_XY>
    LCD_voidWriteChar ( Copy_u8Pattern );
    42f2:	89 81       	ldd	r24, Y+1	; 0x01
    42f4:	0e 94 5f 20 	call	0x40be	; 0x40be <LCD_voidWriteChar>
}
    42f8:	0f 90       	pop	r0
    42fa:	0f 90       	pop	r0
    42fc:	0f 90       	pop	r0
    42fe:	cf 91       	pop	r28
    4300:	df 91       	pop	r29
    4302:	08 95       	ret

00004304 <LCD_voidClearDisplay>:




void LCD_voidClearDisplay (void)
{
    4304:	df 93       	push	r29
    4306:	cf 93       	push	r28
    4308:	cd b7       	in	r28, 0x3d	; 61
    430a:	de b7       	in	r29, 0x3e	; 62
    LCD_voidWriteCommand ( DIS_CLEAR );
    430c:	81 e0       	ldi	r24, 0x01	; 1
    430e:	0e 94 3d 20 	call	0x407a	; 0x407a <LCD_voidWriteCommand>
}
    4312:	cf 91       	pop	r28
    4314:	df 91       	pop	r29
    4316:	08 95       	ret

00004318 <LCD_voidShiftLeft>:




void LCD_voidShiftLeft (void)
{
    4318:	df 93       	push	r29
    431a:	cf 93       	push	r28
    431c:	cd b7       	in	r28, 0x3d	; 61
    431e:	de b7       	in	r29, 0x3e	; 62
    LCD_voidWriteCommand ( ENTRY_MODE_INCREASE_LEFT_SHIFT );
    4320:	87 e0       	ldi	r24, 0x07	; 7
    4322:	0e 94 3d 20 	call	0x407a	; 0x407a <LCD_voidWriteCommand>
}
    4326:	cf 91       	pop	r28
    4328:	df 91       	pop	r29
    432a:	08 95       	ret

0000432c <LCD_voidShiftRight>:




void LCD_voidShiftRight (void)
{
    432c:	df 93       	push	r29
    432e:	cf 93       	push	r28
    4330:	cd b7       	in	r28, 0x3d	; 61
    4332:	de b7       	in	r29, 0x3e	; 62
    LCD_voidWriteCommand ( ENTRY_MODE_DECREASE_RIGHT_SHIFT );
    4334:	85 e0       	ldi	r24, 0x05	; 5
    4336:	0e 94 3d 20 	call	0x407a	; 0x407a <LCD_voidWriteCommand>
}
    433a:	cf 91       	pop	r28
    433c:	df 91       	pop	r29
    433e:	08 95       	ret

00004340 <LCD_voidClearGrid>:




void LCD_voidClearGrid ( u8 Copy_u8Line , u8 Copy_u8Position )
{
    4340:	df 93       	push	r29
    4342:	cf 93       	push	r28
    4344:	00 d0       	rcall	.+0      	; 0x4346 <LCD_voidClearGrid+0x6>
    4346:	cd b7       	in	r28, 0x3d	; 61
    4348:	de b7       	in	r29, 0x3e	; 62
    434a:	89 83       	std	Y+1, r24	; 0x01
    434c:	6a 83       	std	Y+2, r22	; 0x02
    LCD_voidGoTo_XY (Copy_u8Line ,Copy_u8Position);
    434e:	89 81       	ldd	r24, Y+1	; 0x01
    4350:	6a 81       	ldd	r22, Y+2	; 0x02
    4352:	0e 94 19 21 	call	0x4232	; 0x4232 <LCD_voidGoTo_XY>
    LCD_voidWriteChar ( ' ' );
    4356:	80 e2       	ldi	r24, 0x20	; 32
    4358:	0e 94 5f 20 	call	0x40be	; 0x40be <LCD_voidWriteChar>
}
    435c:	0f 90       	pop	r0
    435e:	0f 90       	pop	r0
    4360:	cf 91       	pop	r28
    4362:	df 91       	pop	r29
    4364:	08 95       	ret

00004366 <LCD_voidClearLine>:




void LCD_voidClearLine ( u8 Copy_u8Line )
{
    4366:	df 93       	push	r29
    4368:	cf 93       	push	r28
    436a:	00 d0       	rcall	.+0      	; 0x436c <LCD_voidClearLine+0x6>
    436c:	cd b7       	in	r28, 0x3d	; 61
    436e:	de b7       	in	r29, 0x3e	; 62
    4370:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 i=0 ; i<16 ; i++)
    4372:	19 82       	std	Y+1, r1	; 0x01
    4374:	0a c0       	rjmp	.+20     	; 0x438a <LCD_voidClearLine+0x24>
	{
		LCD_voidGoTo_XY (Copy_u8Line ,i);
    4376:	8a 81       	ldd	r24, Y+2	; 0x02
    4378:	69 81       	ldd	r22, Y+1	; 0x01
    437a:	0e 94 19 21 	call	0x4232	; 0x4232 <LCD_voidGoTo_XY>
		LCD_voidWriteChar ( ' ' );
    437e:	80 e2       	ldi	r24, 0x20	; 32
    4380:	0e 94 5f 20 	call	0x40be	; 0x40be <LCD_voidWriteChar>



void LCD_voidClearLine ( u8 Copy_u8Line )
{
	for(u8 i=0 ; i<16 ; i++)
    4384:	89 81       	ldd	r24, Y+1	; 0x01
    4386:	8f 5f       	subi	r24, 0xFF	; 255
    4388:	89 83       	std	Y+1, r24	; 0x01
    438a:	89 81       	ldd	r24, Y+1	; 0x01
    438c:	80 31       	cpi	r24, 0x10	; 16
    438e:	98 f3       	brcs	.-26     	; 0x4376 <LCD_voidClearLine+0x10>
	{
		LCD_voidGoTo_XY (Copy_u8Line ,i);
		LCD_voidWriteChar ( ' ' );
	}
}
    4390:	0f 90       	pop	r0
    4392:	0f 90       	pop	r0
    4394:	cf 91       	pop	r28
    4396:	df 91       	pop	r29
    4398:	08 95       	ret

0000439a <KPAD_voidInit>:




void KPAD_voidInit (void)
{
    439a:	df 93       	push	r29
    439c:	cf 93       	push	r28
    439e:	cd b7       	in	r28, 0x3d	; 61
    43a0:	de b7       	in	r29, 0x3e	; 62
    /* Configer The Direction of Coloums Pins as DIO_OUTPUT */
    DIO_voidSetPinDirection (KPAD_PORT,KPAD_C0_PIN,DIO_OUTPUT);
    43a2:	80 e0       	ldi	r24, 0x00	; 0
    43a4:	64 e0       	ldi	r22, 0x04	; 4
    43a6:	41 e0       	ldi	r20, 0x01	; 1
    43a8:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection (KPAD_PORT,KPAD_C1_PIN,DIO_OUTPUT);
    43ac:	80 e0       	ldi	r24, 0x00	; 0
    43ae:	65 e0       	ldi	r22, 0x05	; 5
    43b0:	41 e0       	ldi	r20, 0x01	; 1
    43b2:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection (KPAD_PORT,KPAD_C2_PIN,DIO_OUTPUT);
    43b6:	80 e0       	ldi	r24, 0x00	; 0
    43b8:	66 e0       	ldi	r22, 0x06	; 6
    43ba:	41 e0       	ldi	r20, 0x01	; 1
    43bc:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection (KPAD_PORT,KPAD_C3_PIN,DIO_OUTPUT);
    43c0:	80 e0       	ldi	r24, 0x00	; 0
    43c2:	67 e0       	ldi	r22, 0x07	; 7
    43c4:	41 e0       	ldi	r20, 0x01	; 1
    43c6:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <DIO_voidSetPinDirection>

    /* Configer The Direction of Rows Pins as DIO_INPUT */
    DIO_voidSetPinDirection (KPAD_PORT,KPAD_R0_PIN,DIO_INPUT);
    43ca:	80 e0       	ldi	r24, 0x00	; 0
    43cc:	60 e0       	ldi	r22, 0x00	; 0
    43ce:	40 e0       	ldi	r20, 0x00	; 0
    43d0:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection (KPAD_PORT,KPAD_R1_PIN,DIO_INPUT);
    43d4:	80 e0       	ldi	r24, 0x00	; 0
    43d6:	61 e0       	ldi	r22, 0x01	; 1
    43d8:	40 e0       	ldi	r20, 0x00	; 0
    43da:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection (KPAD_PORT,KPAD_R2_PIN,DIO_INPUT);
    43de:	80 e0       	ldi	r24, 0x00	; 0
    43e0:	62 e0       	ldi	r22, 0x02	; 2
    43e2:	40 e0       	ldi	r20, 0x00	; 0
    43e4:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection (KPAD_PORT,KPAD_R3_PIN,DIO_INPUT);
    43e8:	80 e0       	ldi	r24, 0x00	; 0
    43ea:	63 e0       	ldi	r22, 0x03	; 3
    43ec:	40 e0       	ldi	r20, 0x00	; 0
    43ee:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <DIO_voidSetPinDirection>

    /* Activate Pull-Up Res in Pins of Rows */
	DIO_voidConfig_Pull_Up_Pin (KPAD_PORT,KPAD_R0_PIN,DIO_ON);
    43f2:	80 e0       	ldi	r24, 0x00	; 0
    43f4:	60 e0       	ldi	r22, 0x00	; 0
    43f6:	41 e0       	ldi	r20, 0x01	; 1
    43f8:	0e 94 76 16 	call	0x2cec	; 0x2cec <DIO_voidConfig_Pull_Up_Pin>
	DIO_voidConfig_Pull_Up_Pin (KPAD_PORT,KPAD_R1_PIN,DIO_ON);
    43fc:	80 e0       	ldi	r24, 0x00	; 0
    43fe:	61 e0       	ldi	r22, 0x01	; 1
    4400:	41 e0       	ldi	r20, 0x01	; 1
    4402:	0e 94 76 16 	call	0x2cec	; 0x2cec <DIO_voidConfig_Pull_Up_Pin>
	DIO_voidConfig_Pull_Up_Pin (KPAD_PORT,KPAD_R2_PIN,DIO_ON);
    4406:	80 e0       	ldi	r24, 0x00	; 0
    4408:	62 e0       	ldi	r22, 0x02	; 2
    440a:	41 e0       	ldi	r20, 0x01	; 1
    440c:	0e 94 76 16 	call	0x2cec	; 0x2cec <DIO_voidConfig_Pull_Up_Pin>
	DIO_voidConfig_Pull_Up_Pin (KPAD_PORT,KPAD_R3_PIN,DIO_ON);
    4410:	80 e0       	ldi	r24, 0x00	; 0
    4412:	63 e0       	ldi	r22, 0x03	; 3
    4414:	41 e0       	ldi	r20, 0x01	; 1
    4416:	0e 94 76 16 	call	0x2cec	; 0x2cec <DIO_voidConfig_Pull_Up_Pin>


    /* Deactivate Coloum Pins  */      
    DIO_voidSetPinValue (KPAD_PORT,KPAD_C0_PIN,DIO_HIGH);
    441a:	80 e0       	ldi	r24, 0x00	; 0
    441c:	64 e0       	ldi	r22, 0x04	; 4
    441e:	41 e0       	ldi	r20, 0x01	; 1
    4420:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
    DIO_voidSetPinValue (KPAD_PORT,KPAD_C1_PIN,DIO_HIGH);
    4424:	80 e0       	ldi	r24, 0x00	; 0
    4426:	65 e0       	ldi	r22, 0x05	; 5
    4428:	41 e0       	ldi	r20, 0x01	; 1
    442a:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
    DIO_voidSetPinValue (KPAD_PORT,KPAD_C2_PIN,DIO_HIGH);
    442e:	80 e0       	ldi	r24, 0x00	; 0
    4430:	66 e0       	ldi	r22, 0x06	; 6
    4432:	41 e0       	ldi	r20, 0x01	; 1
    4434:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
    DIO_voidSetPinValue (KPAD_PORT,KPAD_C3_PIN,DIO_HIGH);
    4438:	80 e0       	ldi	r24, 0x00	; 0
    443a:	67 e0       	ldi	r22, 0x07	; 7
    443c:	41 e0       	ldi	r20, 0x01	; 1
    443e:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
}
    4442:	cf 91       	pop	r28
    4444:	df 91       	pop	r29
    4446:	08 95       	ret

00004448 <KPAD_u8GetPressedKey>:




u8   KPAD_u8GetPressedKey (void)
{
    4448:	df 93       	push	r29
    444a:	cf 93       	push	r28
    444c:	00 d0       	rcall	.+0      	; 0x444e <KPAD_u8GetPressedKey+0x6>
    444e:	00 d0       	rcall	.+0      	; 0x4450 <KPAD_u8GetPressedKey+0x8>
    4450:	0f 92       	push	r0
    4452:	cd b7       	in	r28, 0x3d	; 61
    4454:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8ColumnsIter ;
    u8 Local_u8RowsIter ;
    u8 Local_u8PinValue ;
    u8 Local_u8PressedKey = 0xff ; // return will be 0xff if not pressed any key 
    4456:	8f ef       	ldi	r24, 0xFF	; 255
    4458:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8Flag = 0 ;
    445a:	19 82       	std	Y+1, r1	; 0x01
    for ( Local_u8ColumnsIter = 0 ; Local_u8ColumnsIter < KPAD_COLUMNS_NUM ; Local_u8ColumnsIter ++ )
    445c:	1d 82       	std	Y+5, r1	; 0x05
    445e:	6d c0       	rjmp	.+218    	; 0x453a <KPAD_u8GetPressedKey+0xf2>
    {
        /* Active the current Column */
        DIO_voidSetPinValue ( KPAD_PORT , KPAD_Au8ColumnsArr[Local_u8ColumnsIter] , DIO_LOW );
    4460:	8d 81       	ldd	r24, Y+5	; 0x05
    4462:	88 2f       	mov	r24, r24
    4464:	90 e0       	ldi	r25, 0x00	; 0
    4466:	fc 01       	movw	r30, r24
    4468:	ed 5f       	subi	r30, 0xFD	; 253
    446a:	fd 4f       	sbci	r31, 0xFD	; 253
    446c:	90 81       	ld	r25, Z
    446e:	80 e0       	ldi	r24, 0x00	; 0
    4470:	69 2f       	mov	r22, r25
    4472:	40 e0       	ldi	r20, 0x00	; 0
    4474:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>

        for ( Local_u8RowsIter = 0 ; Local_u8RowsIter < KPAD_ROWS_NUM ; Local_u8RowsIter ++ )
    4478:	1c 82       	std	Y+4, r1	; 0x04
    447a:	49 c0       	rjmp	.+146    	; 0x450e <KPAD_u8GetPressedKey+0xc6>
        {
            /* Delay for Debounsing 
             * _delay_ms(50);
             * Read Row Pin */
            Local_u8PinValue = DIO_u8GetPinValue ( KPAD_PORT , KPAD_Au8RowsArr[Local_u8RowsIter] );
    447c:	8c 81       	ldd	r24, Y+4	; 0x04
    447e:	88 2f       	mov	r24, r24
    4480:	90 e0       	ldi	r25, 0x00	; 0
    4482:	fc 01       	movw	r30, r24
    4484:	e9 5f       	subi	r30, 0xF9	; 249
    4486:	fd 4f       	sbci	r31, 0xFD	; 253
    4488:	90 81       	ld	r25, Z
    448a:	80 e0       	ldi	r24, 0x00	; 0
    448c:	69 2f       	mov	r22, r25
    448e:	0e 94 de 14 	call	0x29bc	; 0x29bc <DIO_u8GetPinValue>
    4492:	8b 83       	std	Y+3, r24	; 0x03

            /* Key Pressed */
            if ( Local_u8PinValue == 0 )
    4494:	8b 81       	ldd	r24, Y+3	; 0x03
    4496:	88 23       	and	r24, r24
    4498:	b9 f5       	brne	.+110    	; 0x4508 <KPAD_u8GetPressedKey+0xc0>
    449a:	20 c0       	rjmp	.+64     	; 0x44dc <KPAD_u8GetPressedKey+0x94>
            {
                /* More Checking again for Debounsing */
                while ( Local_u8PinValue == 0 )
                {
                    /* Get pressed Key Value when i make sure that the DIO_LOW state is stable  */
                    Local_u8PressedKey = KPAD_Au8KeysArr[Local_u8RowsIter][Local_u8ColumnsIter] ;
    449c:	8c 81       	ldd	r24, Y+4	; 0x04
    449e:	48 2f       	mov	r20, r24
    44a0:	50 e0       	ldi	r21, 0x00	; 0
    44a2:	8d 81       	ldd	r24, Y+5	; 0x05
    44a4:	28 2f       	mov	r18, r24
    44a6:	30 e0       	ldi	r19, 0x00	; 0
    44a8:	ca 01       	movw	r24, r20
    44aa:	88 0f       	add	r24, r24
    44ac:	99 1f       	adc	r25, r25
    44ae:	88 0f       	add	r24, r24
    44b0:	99 1f       	adc	r25, r25
    44b2:	82 0f       	add	r24, r18
    44b4:	93 1f       	adc	r25, r19
    44b6:	fc 01       	movw	r30, r24
    44b8:	e5 5f       	subi	r30, 0xF5	; 245
    44ba:	fd 4f       	sbci	r31, 0xFD	; 253
    44bc:	80 81       	ld	r24, Z
    44be:	8a 83       	std	Y+2, r24	; 0x02
                    /* Read Row Pin again for sure for Debounsing and exit while loop when change at pressed button 
                    whithout it the program will not extern about while loop */
                    Local_u8PinValue = DIO_u8GetPinValue ( KPAD_PORT , KPAD_Au8RowsArr[Local_u8RowsIter] );
    44c0:	8c 81       	ldd	r24, Y+4	; 0x04
    44c2:	88 2f       	mov	r24, r24
    44c4:	90 e0       	ldi	r25, 0x00	; 0
    44c6:	fc 01       	movw	r30, r24
    44c8:	e9 5f       	subi	r30, 0xF9	; 249
    44ca:	fd 4f       	sbci	r31, 0xFD	; 253
    44cc:	90 81       	ld	r25, Z
    44ce:	80 e0       	ldi	r24, 0x00	; 0
    44d0:	69 2f       	mov	r22, r25
    44d2:	0e 94 de 14 	call	0x29bc	; 0x29bc <DIO_u8GetPinValue>
    44d6:	8b 83       	std	Y+3, r24	; 0x03
                    Local_u8Flag = 1 ;
    44d8:	81 e0       	ldi	r24, 0x01	; 1
    44da:	89 83       	std	Y+1, r24	; 0x01

            /* Key Pressed */
            if ( Local_u8PinValue == 0 )
            {
                /* More Checking again for Debounsing */
                while ( Local_u8PinValue == 0 )
    44dc:	8b 81       	ldd	r24, Y+3	; 0x03
    44de:	88 23       	and	r24, r24
    44e0:	e9 f2       	breq	.-70     	; 0x449c <KPAD_u8GetPressedKey+0x54>
                    /* Read Row Pin again for sure for Debounsing and exit while loop when change at pressed button 
                    whithout it the program will not extern about while loop */
                    Local_u8PinValue = DIO_u8GetPinValue ( KPAD_PORT , KPAD_Au8RowsArr[Local_u8RowsIter] );
                    Local_u8Flag = 1 ;
                }
                Local_u8PressedKey = KPAD_Au8KeysArr[Local_u8RowsIter][Local_u8ColumnsIter] ;
    44e2:	8c 81       	ldd	r24, Y+4	; 0x04
    44e4:	48 2f       	mov	r20, r24
    44e6:	50 e0       	ldi	r21, 0x00	; 0
    44e8:	8d 81       	ldd	r24, Y+5	; 0x05
    44ea:	28 2f       	mov	r18, r24
    44ec:	30 e0       	ldi	r19, 0x00	; 0
    44ee:	ca 01       	movw	r24, r20
    44f0:	88 0f       	add	r24, r24
    44f2:	99 1f       	adc	r25, r25
    44f4:	88 0f       	add	r24, r24
    44f6:	99 1f       	adc	r25, r25
    44f8:	82 0f       	add	r24, r18
    44fa:	93 1f       	adc	r25, r19
    44fc:	fc 01       	movw	r30, r24
    44fe:	e5 5f       	subi	r30, 0xF5	; 245
    4500:	fd 4f       	sbci	r31, 0xFD	; 253
    4502:	80 81       	ld	r24, Z
    4504:	8a 83       	std	Y+2, r24	; 0x02
    4506:	07 c0       	rjmp	.+14     	; 0x4516 <KPAD_u8GetPressedKey+0xce>
    for ( Local_u8ColumnsIter = 0 ; Local_u8ColumnsIter < KPAD_COLUMNS_NUM ; Local_u8ColumnsIter ++ )
    {
        /* Active the current Column */
        DIO_voidSetPinValue ( KPAD_PORT , KPAD_Au8ColumnsArr[Local_u8ColumnsIter] , DIO_LOW );

        for ( Local_u8RowsIter = 0 ; Local_u8RowsIter < KPAD_ROWS_NUM ; Local_u8RowsIter ++ )
    4508:	8c 81       	ldd	r24, Y+4	; 0x04
    450a:	8f 5f       	subi	r24, 0xFF	; 255
    450c:	8c 83       	std	Y+4, r24	; 0x04
    450e:	8c 81       	ldd	r24, Y+4	; 0x04
    4510:	84 30       	cpi	r24, 0x04	; 4
    4512:	08 f4       	brcc	.+2      	; 0x4516 <KPAD_u8GetPressedKey+0xce>
    4514:	b3 cf       	rjmp	.-154    	; 0x447c <KPAD_u8GetPressedKey+0x34>
                Local_u8PressedKey = KPAD_Au8KeysArr[Local_u8RowsIter][Local_u8ColumnsIter] ;
                break;
            }
        }
        /* Active the current Column */
        DIO_voidSetPinValue ( KPAD_PORT , KPAD_Au8ColumnsArr[Local_u8ColumnsIter] , DIO_HIGH );
    4516:	8d 81       	ldd	r24, Y+5	; 0x05
    4518:	88 2f       	mov	r24, r24
    451a:	90 e0       	ldi	r25, 0x00	; 0
    451c:	fc 01       	movw	r30, r24
    451e:	ed 5f       	subi	r30, 0xFD	; 253
    4520:	fd 4f       	sbci	r31, 0xFD	; 253
    4522:	90 81       	ld	r25, Z
    4524:	80 e0       	ldi	r24, 0x00	; 0
    4526:	69 2f       	mov	r22, r25
    4528:	41 e0       	ldi	r20, 0x01	; 1
    452a:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
        if ( Local_u8Flag == 1 )
    452e:	89 81       	ldd	r24, Y+1	; 0x01
    4530:	81 30       	cpi	r24, 0x01	; 1
    4532:	39 f0       	breq	.+14     	; 0x4542 <KPAD_u8GetPressedKey+0xfa>
    u8 Local_u8ColumnsIter ;
    u8 Local_u8RowsIter ;
    u8 Local_u8PinValue ;
    u8 Local_u8PressedKey = 0xff ; // return will be 0xff if not pressed any key 
    u8 Local_u8Flag = 0 ;
    for ( Local_u8ColumnsIter = 0 ; Local_u8ColumnsIter < KPAD_COLUMNS_NUM ; Local_u8ColumnsIter ++ )
    4534:	8d 81       	ldd	r24, Y+5	; 0x05
    4536:	8f 5f       	subi	r24, 0xFF	; 255
    4538:	8d 83       	std	Y+5, r24	; 0x05
    453a:	8d 81       	ldd	r24, Y+5	; 0x05
    453c:	84 30       	cpi	r24, 0x04	; 4
    453e:	08 f4       	brcc	.+2      	; 0x4542 <KPAD_u8GetPressedKey+0xfa>
    4540:	8f cf       	rjmp	.-226    	; 0x4460 <KPAD_u8GetPressedKey+0x18>
        if ( Local_u8Flag == 1 )
        {
            break;
        }
    }
    return Local_u8PressedKey ;
    4542:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4544:	0f 90       	pop	r0
    4546:	0f 90       	pop	r0
    4548:	0f 90       	pop	r0
    454a:	0f 90       	pop	r0
    454c:	0f 90       	pop	r0
    454e:	cf 91       	pop	r28
    4550:	df 91       	pop	r29
    4552:	08 95       	ret

00004554 <EEPROM_voidSendDataByte>:
#include "../../MCAL/I2C/I2C_Interface.h"



void EEPROM_voidSendDataByte ( u16 Copy_u16LocationAddress , u8 Copy_u8DataByte )
{
    4554:	df 93       	push	r29
    4556:	cf 93       	push	r28
    4558:	cd b7       	in	r28, 0x3d	; 61
    455a:	de b7       	in	r29, 0x3e	; 62
    455c:	62 97       	sbiw	r28, 0x12	; 18
    455e:	0f b6       	in	r0, 0x3f	; 63
    4560:	f8 94       	cli
    4562:	de bf       	out	0x3e, r29	; 62
    4564:	0f be       	out	0x3f, r0	; 63
    4566:	cd bf       	out	0x3d, r28	; 61
    4568:	99 8b       	std	Y+17, r25	; 0x11
    456a:	88 8b       	std	Y+16, r24	; 0x10
    456c:	6a 8b       	std	Y+18, r22	; 0x12
    u8 Local_Address ;
    Local_Address = EEPROM_FIXED_ADDRESS | (EEPROM_A2<<2) | ((u8)(Copy_u16LocationAddress>>8)) ;
    456e:	88 89       	ldd	r24, Y+16	; 0x10
    4570:	99 89       	ldd	r25, Y+17	; 0x11
    4572:	89 2f       	mov	r24, r25
    4574:	99 27       	eor	r25, r25
    4576:	80 65       	ori	r24, 0x50	; 80
    4578:	8f 87       	std	Y+15, r24	; 0x0f
    // Send Start Condition
    I2C_Master_u8StartCondition ();
    457a:	0e 94 8d 0c 	call	0x191a	; 0x191a <I2C_Master_u8StartCondition>
    // Send the address packet
    I2C_Master_u8SendSLA_Write_ACK (Local_Address);
    457e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4580:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <I2C_Master_u8SendSLA_Write_ACK>
    // send the rest 8 BITS of the location Adress
    I2C_Master_u8WriteDataByte_ACK ( (u8)(Copy_u16LocationAddress));
    4584:	88 89       	ldd	r24, Y+16	; 0x10
    4586:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <I2C_Master_u8WriteDataByte_ACK>
    // Send The Data Byte to the Memory Location
    I2C_Master_u8WriteDataByte_ACK (Copy_u8DataByte);
    458a:	8a 89       	ldd	r24, Y+18	; 0x12
    458c:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <I2C_Master_u8WriteDataByte_ACK>
    // Send Stop Condition
    I2C_Master_voidStopCondition ();
    4590:	0e 94 77 0e 	call	0x1cee	; 0x1cee <I2C_Master_voidStopCondition>
    4594:	80 e0       	ldi	r24, 0x00	; 0
    4596:	90 e0       	ldi	r25, 0x00	; 0
    4598:	a0 e2       	ldi	r26, 0x20	; 32
    459a:	b1 e4       	ldi	r27, 0x41	; 65
    459c:	8b 87       	std	Y+11, r24	; 0x0b
    459e:	9c 87       	std	Y+12, r25	; 0x0c
    45a0:	ad 87       	std	Y+13, r26	; 0x0d
    45a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    45a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    45a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    45aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    45ac:	20 e0       	ldi	r18, 0x00	; 0
    45ae:	30 e0       	ldi	r19, 0x00	; 0
    45b0:	4a ef       	ldi	r20, 0xFA	; 250
    45b2:	54 e4       	ldi	r21, 0x44	; 68
    45b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45b8:	dc 01       	movw	r26, r24
    45ba:	cb 01       	movw	r24, r22
    45bc:	8f 83       	std	Y+7, r24	; 0x07
    45be:	98 87       	std	Y+8, r25	; 0x08
    45c0:	a9 87       	std	Y+9, r26	; 0x09
    45c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    45c4:	6f 81       	ldd	r22, Y+7	; 0x07
    45c6:	78 85       	ldd	r23, Y+8	; 0x08
    45c8:	89 85       	ldd	r24, Y+9	; 0x09
    45ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    45cc:	20 e0       	ldi	r18, 0x00	; 0
    45ce:	30 e0       	ldi	r19, 0x00	; 0
    45d0:	40 e8       	ldi	r20, 0x80	; 128
    45d2:	5f e3       	ldi	r21, 0x3F	; 63
    45d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    45d8:	88 23       	and	r24, r24
    45da:	2c f4       	brge	.+10     	; 0x45e6 <EEPROM_voidSendDataByte+0x92>
		__ticks = 1;
    45dc:	81 e0       	ldi	r24, 0x01	; 1
    45de:	90 e0       	ldi	r25, 0x00	; 0
    45e0:	9e 83       	std	Y+6, r25	; 0x06
    45e2:	8d 83       	std	Y+5, r24	; 0x05
    45e4:	3f c0       	rjmp	.+126    	; 0x4664 <EEPROM_voidSendDataByte+0x110>
	else if (__tmp > 65535)
    45e6:	6f 81       	ldd	r22, Y+7	; 0x07
    45e8:	78 85       	ldd	r23, Y+8	; 0x08
    45ea:	89 85       	ldd	r24, Y+9	; 0x09
    45ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    45ee:	20 e0       	ldi	r18, 0x00	; 0
    45f0:	3f ef       	ldi	r19, 0xFF	; 255
    45f2:	4f e7       	ldi	r20, 0x7F	; 127
    45f4:	57 e4       	ldi	r21, 0x47	; 71
    45f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    45fa:	18 16       	cp	r1, r24
    45fc:	4c f5       	brge	.+82     	; 0x4650 <EEPROM_voidSendDataByte+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    4600:	7c 85       	ldd	r23, Y+12	; 0x0c
    4602:	8d 85       	ldd	r24, Y+13	; 0x0d
    4604:	9e 85       	ldd	r25, Y+14	; 0x0e
    4606:	20 e0       	ldi	r18, 0x00	; 0
    4608:	30 e0       	ldi	r19, 0x00	; 0
    460a:	40 e2       	ldi	r20, 0x20	; 32
    460c:	51 e4       	ldi	r21, 0x41	; 65
    460e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4612:	dc 01       	movw	r26, r24
    4614:	cb 01       	movw	r24, r22
    4616:	bc 01       	movw	r22, r24
    4618:	cd 01       	movw	r24, r26
    461a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    461e:	dc 01       	movw	r26, r24
    4620:	cb 01       	movw	r24, r22
    4622:	9e 83       	std	Y+6, r25	; 0x06
    4624:	8d 83       	std	Y+5, r24	; 0x05
    4626:	0f c0       	rjmp	.+30     	; 0x4646 <EEPROM_voidSendDataByte+0xf2>
    4628:	88 ec       	ldi	r24, 0xC8	; 200
    462a:	90 e0       	ldi	r25, 0x00	; 0
    462c:	9c 83       	std	Y+4, r25	; 0x04
    462e:	8b 83       	std	Y+3, r24	; 0x03
    4630:	8b 81       	ldd	r24, Y+3	; 0x03
    4632:	9c 81       	ldd	r25, Y+4	; 0x04
    4634:	01 97       	sbiw	r24, 0x01	; 1
    4636:	f1 f7       	brne	.-4      	; 0x4634 <EEPROM_voidSendDataByte+0xe0>
    4638:	9c 83       	std	Y+4, r25	; 0x04
    463a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    463c:	8d 81       	ldd	r24, Y+5	; 0x05
    463e:	9e 81       	ldd	r25, Y+6	; 0x06
    4640:	01 97       	sbiw	r24, 0x01	; 1
    4642:	9e 83       	std	Y+6, r25	; 0x06
    4644:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4646:	8d 81       	ldd	r24, Y+5	; 0x05
    4648:	9e 81       	ldd	r25, Y+6	; 0x06
    464a:	00 97       	sbiw	r24, 0x00	; 0
    464c:	69 f7       	brne	.-38     	; 0x4628 <EEPROM_voidSendDataByte+0xd4>
    464e:	14 c0       	rjmp	.+40     	; 0x4678 <EEPROM_voidSendDataByte+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4650:	6f 81       	ldd	r22, Y+7	; 0x07
    4652:	78 85       	ldd	r23, Y+8	; 0x08
    4654:	89 85       	ldd	r24, Y+9	; 0x09
    4656:	9a 85       	ldd	r25, Y+10	; 0x0a
    4658:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    465c:	dc 01       	movw	r26, r24
    465e:	cb 01       	movw	r24, r22
    4660:	9e 83       	std	Y+6, r25	; 0x06
    4662:	8d 83       	std	Y+5, r24	; 0x05
    4664:	8d 81       	ldd	r24, Y+5	; 0x05
    4666:	9e 81       	ldd	r25, Y+6	; 0x06
    4668:	9a 83       	std	Y+2, r25	; 0x02
    466a:	89 83       	std	Y+1, r24	; 0x01
    466c:	89 81       	ldd	r24, Y+1	; 0x01
    466e:	9a 81       	ldd	r25, Y+2	; 0x02
    4670:	01 97       	sbiw	r24, 0x01	; 1
    4672:	f1 f7       	brne	.-4      	; 0x4670 <EEPROM_voidSendDataByte+0x11c>
    4674:	9a 83       	std	Y+2, r25	; 0x02
    4676:	89 83       	std	Y+1, r24	; 0x01
    // Delay Until the Write cycle is finished
    _delay_ms(10);

}
    4678:	62 96       	adiw	r28, 0x12	; 18
    467a:	0f b6       	in	r0, 0x3f	; 63
    467c:	f8 94       	cli
    467e:	de bf       	out	0x3e, r29	; 62
    4680:	0f be       	out	0x3f, r0	; 63
    4682:	cd bf       	out	0x3d, r28	; 61
    4684:	cf 91       	pop	r28
    4686:	df 91       	pop	r29
    4688:	08 95       	ret

0000468a <EEPROM_voidReadDataByte>:



u8 EEPROM_voidReadDataByte ( u16 Copy_u16LocationAddress )
{
    468a:	df 93       	push	r29
    468c:	cf 93       	push	r28
    468e:	cd b7       	in	r28, 0x3d	; 61
    4690:	de b7       	in	r29, 0x3e	; 62
    4692:	62 97       	sbiw	r28, 0x12	; 18
    4694:	0f b6       	in	r0, 0x3f	; 63
    4696:	f8 94       	cli
    4698:	de bf       	out	0x3e, r29	; 62
    469a:	0f be       	out	0x3f, r0	; 63
    469c:	cd bf       	out	0x3d, r28	; 61
    469e:	9a 8b       	std	Y+18, r25	; 0x12
    46a0:	89 8b       	std	Y+17, r24	; 0x11
    u8 Data ;
    u8 Local_Address ;
    Local_Address = EEPROM_FIXED_ADDRESS | (EEPROM_A2<<2) | ((u8)(Copy_u16LocationAddress>>8)) ;
    46a2:	89 89       	ldd	r24, Y+17	; 0x11
    46a4:	9a 89       	ldd	r25, Y+18	; 0x12
    46a6:	89 2f       	mov	r24, r25
    46a8:	99 27       	eor	r25, r25
    46aa:	80 65       	ori	r24, 0x50	; 80
    46ac:	8f 87       	std	Y+15, r24	; 0x0f
    // Send Start Condition 
    I2C_Master_u8StartCondition ();
    46ae:	0e 94 8d 0c 	call	0x191a	; 0x191a <I2C_Master_u8StartCondition>
    // Send the address packet with Write operation
    I2C_Master_u8SendSLA_Write_ACK (Local_Address);
    46b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    46b4:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <I2C_Master_u8SendSLA_Write_ACK>
    // send the rest 8 BITS of the location Adress
    I2C_Master_u8WriteDataByte_ACK ( (u8)(Copy_u16LocationAddress) );
    46b8:	89 89       	ldd	r24, Y+17	; 0x11
    46ba:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <I2C_Master_u8WriteDataByte_ACK>
    // Send Repeated Start to chang write request to Read request
    I2C_Master_u8ReStartCondition ();
    46be:	0e 94 b7 0c 	call	0x196e	; 0x196e <I2C_Master_u8ReStartCondition>
    // Send the address packet with Read operation
    I2C_Master_u8SendSLA_Read_ACK (Local_Address);
    46c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    46c4:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <I2C_Master_u8SendSLA_Read_ACK>
    // Get The Data From Memory
    I2C_Master_u8ReadDataByte_NOTACK (&Data);
    46c8:	ce 01       	movw	r24, r28
    46ca:	40 96       	adiw	r24, 0x10	; 16
    46cc:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <I2C_Master_u8ReadDataByte_NOTACK>
    // Send Stop Condition
    I2C_Master_voidStopCondition();
    46d0:	0e 94 77 0e 	call	0x1cee	; 0x1cee <I2C_Master_voidStopCondition>
    46d4:	80 e0       	ldi	r24, 0x00	; 0
    46d6:	90 e0       	ldi	r25, 0x00	; 0
    46d8:	a0 e2       	ldi	r26, 0x20	; 32
    46da:	b1 e4       	ldi	r27, 0x41	; 65
    46dc:	8b 87       	std	Y+11, r24	; 0x0b
    46de:	9c 87       	std	Y+12, r25	; 0x0c
    46e0:	ad 87       	std	Y+13, r26	; 0x0d
    46e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    46e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    46e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    46ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    46ec:	20 e0       	ldi	r18, 0x00	; 0
    46ee:	30 e0       	ldi	r19, 0x00	; 0
    46f0:	4a ef       	ldi	r20, 0xFA	; 250
    46f2:	54 e4       	ldi	r21, 0x44	; 68
    46f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46f8:	dc 01       	movw	r26, r24
    46fa:	cb 01       	movw	r24, r22
    46fc:	8f 83       	std	Y+7, r24	; 0x07
    46fe:	98 87       	std	Y+8, r25	; 0x08
    4700:	a9 87       	std	Y+9, r26	; 0x09
    4702:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4704:	6f 81       	ldd	r22, Y+7	; 0x07
    4706:	78 85       	ldd	r23, Y+8	; 0x08
    4708:	89 85       	ldd	r24, Y+9	; 0x09
    470a:	9a 85       	ldd	r25, Y+10	; 0x0a
    470c:	20 e0       	ldi	r18, 0x00	; 0
    470e:	30 e0       	ldi	r19, 0x00	; 0
    4710:	40 e8       	ldi	r20, 0x80	; 128
    4712:	5f e3       	ldi	r21, 0x3F	; 63
    4714:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4718:	88 23       	and	r24, r24
    471a:	2c f4       	brge	.+10     	; 0x4726 <EEPROM_voidReadDataByte+0x9c>
		__ticks = 1;
    471c:	81 e0       	ldi	r24, 0x01	; 1
    471e:	90 e0       	ldi	r25, 0x00	; 0
    4720:	9e 83       	std	Y+6, r25	; 0x06
    4722:	8d 83       	std	Y+5, r24	; 0x05
    4724:	3f c0       	rjmp	.+126    	; 0x47a4 <EEPROM_voidReadDataByte+0x11a>
	else if (__tmp > 65535)
    4726:	6f 81       	ldd	r22, Y+7	; 0x07
    4728:	78 85       	ldd	r23, Y+8	; 0x08
    472a:	89 85       	ldd	r24, Y+9	; 0x09
    472c:	9a 85       	ldd	r25, Y+10	; 0x0a
    472e:	20 e0       	ldi	r18, 0x00	; 0
    4730:	3f ef       	ldi	r19, 0xFF	; 255
    4732:	4f e7       	ldi	r20, 0x7F	; 127
    4734:	57 e4       	ldi	r21, 0x47	; 71
    4736:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    473a:	18 16       	cp	r1, r24
    473c:	4c f5       	brge	.+82     	; 0x4790 <EEPROM_voidReadDataByte+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    473e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4740:	7c 85       	ldd	r23, Y+12	; 0x0c
    4742:	8d 85       	ldd	r24, Y+13	; 0x0d
    4744:	9e 85       	ldd	r25, Y+14	; 0x0e
    4746:	20 e0       	ldi	r18, 0x00	; 0
    4748:	30 e0       	ldi	r19, 0x00	; 0
    474a:	40 e2       	ldi	r20, 0x20	; 32
    474c:	51 e4       	ldi	r21, 0x41	; 65
    474e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4752:	dc 01       	movw	r26, r24
    4754:	cb 01       	movw	r24, r22
    4756:	bc 01       	movw	r22, r24
    4758:	cd 01       	movw	r24, r26
    475a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    475e:	dc 01       	movw	r26, r24
    4760:	cb 01       	movw	r24, r22
    4762:	9e 83       	std	Y+6, r25	; 0x06
    4764:	8d 83       	std	Y+5, r24	; 0x05
    4766:	0f c0       	rjmp	.+30     	; 0x4786 <EEPROM_voidReadDataByte+0xfc>
    4768:	88 ec       	ldi	r24, 0xC8	; 200
    476a:	90 e0       	ldi	r25, 0x00	; 0
    476c:	9c 83       	std	Y+4, r25	; 0x04
    476e:	8b 83       	std	Y+3, r24	; 0x03
    4770:	8b 81       	ldd	r24, Y+3	; 0x03
    4772:	9c 81       	ldd	r25, Y+4	; 0x04
    4774:	01 97       	sbiw	r24, 0x01	; 1
    4776:	f1 f7       	brne	.-4      	; 0x4774 <EEPROM_voidReadDataByte+0xea>
    4778:	9c 83       	std	Y+4, r25	; 0x04
    477a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    477c:	8d 81       	ldd	r24, Y+5	; 0x05
    477e:	9e 81       	ldd	r25, Y+6	; 0x06
    4780:	01 97       	sbiw	r24, 0x01	; 1
    4782:	9e 83       	std	Y+6, r25	; 0x06
    4784:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4786:	8d 81       	ldd	r24, Y+5	; 0x05
    4788:	9e 81       	ldd	r25, Y+6	; 0x06
    478a:	00 97       	sbiw	r24, 0x00	; 0
    478c:	69 f7       	brne	.-38     	; 0x4768 <EEPROM_voidReadDataByte+0xde>
    478e:	14 c0       	rjmp	.+40     	; 0x47b8 <EEPROM_voidReadDataByte+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4790:	6f 81       	ldd	r22, Y+7	; 0x07
    4792:	78 85       	ldd	r23, Y+8	; 0x08
    4794:	89 85       	ldd	r24, Y+9	; 0x09
    4796:	9a 85       	ldd	r25, Y+10	; 0x0a
    4798:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    479c:	dc 01       	movw	r26, r24
    479e:	cb 01       	movw	r24, r22
    47a0:	9e 83       	std	Y+6, r25	; 0x06
    47a2:	8d 83       	std	Y+5, r24	; 0x05
    47a4:	8d 81       	ldd	r24, Y+5	; 0x05
    47a6:	9e 81       	ldd	r25, Y+6	; 0x06
    47a8:	9a 83       	std	Y+2, r25	; 0x02
    47aa:	89 83       	std	Y+1, r24	; 0x01
    47ac:	89 81       	ldd	r24, Y+1	; 0x01
    47ae:	9a 81       	ldd	r25, Y+2	; 0x02
    47b0:	01 97       	sbiw	r24, 0x01	; 1
    47b2:	f1 f7       	brne	.-4      	; 0x47b0 <EEPROM_voidReadDataByte+0x126>
    47b4:	9a 83       	std	Y+2, r25	; 0x02
    47b6:	89 83       	std	Y+1, r24	; 0x01
    // Delay Until the Read cycle is finished
    _delay_ms(10);
    // Return Data
    return Data ;
    47b8:	88 89       	ldd	r24, Y+16	; 0x10
    47ba:	62 96       	adiw	r28, 0x12	; 18
    47bc:	0f b6       	in	r0, 0x3f	; 63
    47be:	f8 94       	cli
    47c0:	de bf       	out	0x3e, r29	; 62
    47c2:	0f be       	out	0x3f, r0	; 63
    47c4:	cd bf       	out	0x3d, r28	; 61
    47c6:	cf 91       	pop	r28
    47c8:	df 91       	pop	r29
    47ca:	08 95       	ret

000047cc <DCMOTOR_voidInit>:
#include"DCMOTOR_Interface.h"



void DCMOTOR_voidInit(void)
{
    47cc:	df 93       	push	r29
    47ce:	cf 93       	push	r28
    47d0:	cd b7       	in	r28, 0x3d	; 61
    47d2:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(DCMOTOR_PORT,DCMOTOR_PIN1,DIO_OUTPUT);
    47d4:	82 e0       	ldi	r24, 0x02	; 2
    47d6:	60 e0       	ldi	r22, 0x00	; 0
    47d8:	41 e0       	ldi	r20, 0x01	; 1
    47da:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DCMOTOR_PORT,DCMOTOR_PIN2,DIO_OUTPUT);
    47de:	82 e0       	ldi	r24, 0x02	; 2
    47e0:	61 e0       	ldi	r22, 0x01	; 1
    47e2:	41 e0       	ldi	r20, 0x01	; 1
    47e4:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <DIO_voidSetPinDirection>
}
    47e8:	cf 91       	pop	r28
    47ea:	df 91       	pop	r29
    47ec:	08 95       	ret

000047ee <DCMOTOR_voidRotateCW>:
void DCMOTOR_voidRotateCW(void)
{
    47ee:	df 93       	push	r29
    47f0:	cf 93       	push	r28
    47f2:	cd b7       	in	r28, 0x3d	; 61
    47f4:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DCMOTOR_PORT,DCMOTOR_PIN1,DIO_HIGH);   //A
    47f6:	82 e0       	ldi	r24, 0x02	; 2
    47f8:	60 e0       	ldi	r22, 0x00	; 0
    47fa:	41 e0       	ldi	r20, 0x01	; 1
    47fc:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DCMOTOR_PORT,DCMOTOR_PIN2,DIO_LOW);    //B
    4800:	82 e0       	ldi	r24, 0x02	; 2
    4802:	61 e0       	ldi	r22, 0x01	; 1
    4804:	40 e0       	ldi	r20, 0x00	; 0
    4806:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
}
    480a:	cf 91       	pop	r28
    480c:	df 91       	pop	r29
    480e:	08 95       	ret

00004810 <DCMOTOR_voidRotateCCW>:
void DCMOTOR_voidRotateCCW(void)
{
    4810:	df 93       	push	r29
    4812:	cf 93       	push	r28
    4814:	cd b7       	in	r28, 0x3d	; 61
    4816:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DCMOTOR_PORT,DCMOTOR_PIN1,DIO_LOW);   //A
    4818:	82 e0       	ldi	r24, 0x02	; 2
    481a:	60 e0       	ldi	r22, 0x00	; 0
    481c:	40 e0       	ldi	r20, 0x00	; 0
    481e:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DCMOTOR_PORT,DCMOTOR_PIN2,DIO_HIGH);  //B
    4822:	82 e0       	ldi	r24, 0x02	; 2
    4824:	61 e0       	ldi	r22, 0x01	; 1
    4826:	41 e0       	ldi	r20, 0x01	; 1
    4828:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
}
    482c:	cf 91       	pop	r28
    482e:	df 91       	pop	r29
    4830:	08 95       	ret

00004832 <DCMOTOR_voidStop>:
void DCMOTOR_voidStop(void)
{
    4832:	df 93       	push	r29
    4834:	cf 93       	push	r28
    4836:	cd b7       	in	r28, 0x3d	; 61
    4838:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DCMOTOR_PORT,DCMOTOR_PIN1,DIO_LOW);  //A
    483a:	82 e0       	ldi	r24, 0x02	; 2
    483c:	60 e0       	ldi	r22, 0x00	; 0
    483e:	40 e0       	ldi	r20, 0x00	; 0
    4840:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DCMOTOR_PORT,DCMOTOR_PIN2,DIO_LOW);  //B
    4844:	82 e0       	ldi	r24, 0x02	; 2
    4846:	61 e0       	ldi	r22, 0x01	; 1
    4848:	40 e0       	ldi	r20, 0x00	; 0
    484a:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
}
    484e:	cf 91       	pop	r28
    4850:	df 91       	pop	r29
    4852:	08 95       	ret

00004854 <BUZZER_voidBUZZERInit>:

#include "BUZZER_Interface.h"


void BUZZER_voidBUZZERInit (void)
{
    4854:	df 93       	push	r29
    4856:	cf 93       	push	r28
    4858:	cd b7       	in	r28, 0x3d	; 61
    485a:	de b7       	in	r29, 0x3e	; 62
	/** select direction of buzzer as output */
    DIO_voidSetPinDirection(BUZZER_PORT , BUZZER_PIN , BUZZER_OUTPUT) ; 
    485c:	80 e0       	ldi	r24, 0x00	; 0
    485e:	60 e0       	ldi	r22, 0x00	; 0
    4860:	41 e0       	ldi	r20, 0x01	; 1
    4862:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <DIO_voidSetPinDirection>
}
    4866:	cf 91       	pop	r28
    4868:	df 91       	pop	r29
    486a:	08 95       	ret

0000486c <BUZZER_voidBUZZEROn>:

void BUZZER_voidBUZZEROn (void)
{
    486c:	df 93       	push	r29
    486e:	cf 93       	push	r28
    4870:	cd b7       	in	r28, 0x3d	; 61
    4872:	de b7       	in	r29, 0x3e	; 62
	/**make buzzer on (it's pin is high)*/
	DIO_voidSetPinValue(BUZZER_PORT , BUZZER_PIN,BUZZER_HIGH) ; 
    4874:	80 e0       	ldi	r24, 0x00	; 0
    4876:	60 e0       	ldi	r22, 0x00	; 0
    4878:	41 e0       	ldi	r20, 0x01	; 1
    487a:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
}
    487e:	cf 91       	pop	r28
    4880:	df 91       	pop	r29
    4882:	08 95       	ret

00004884 <BUZZER_voidBUZZEROff>:

void BUZZER_voidBUZZEROff (void)
{
    4884:	df 93       	push	r29
    4886:	cf 93       	push	r28
    4888:	cd b7       	in	r28, 0x3d	; 61
    488a:	de b7       	in	r29, 0x3e	; 62
	/**make buzzer off (it's pin is low)*/
	DIO_voidSetPinValue(BUZZER_PORT , BUZZER_PIN,BUZZER_LOW) ;
    488c:	80 e0       	ldi	r24, 0x00	; 0
    488e:	60 e0       	ldi	r22, 0x00	; 0
    4890:	40 e0       	ldi	r20, 0x00	; 0
    4892:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
}
    4896:	cf 91       	pop	r28
    4898:	df 91       	pop	r29
    489a:	08 95       	ret

0000489c <BUZZER_voidBUZZERToggle>:

void BUZZER_voidBUZZERToggle (void)
{
    489c:	df 93       	push	r29
    489e:	cf 93       	push	r28
    48a0:	cd b7       	in	r28, 0x3d	; 61
    48a2:	de b7       	in	r29, 0x3e	; 62
	/**inverse the status of buzzer*/
	DIO_voidTogglePinValue(BUZZER_PORT , BUZZER_PIN) ; 
    48a4:	80 e0       	ldi	r24, 0x00	; 0
    48a6:	60 e0       	ldi	r22, 0x00	; 0
    48a8:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <DIO_voidTogglePinValue>
}
    48ac:	cf 91       	pop	r28
    48ae:	df 91       	pop	r29
    48b0:	08 95       	ret

000048b2 <SEGMENT_voidInitSegmentPort>:




void SEGMENT_voidInitSegmentPort ( u8 Copy_u8PortNumber )
{
    48b2:	df 93       	push	r29
    48b4:	cf 93       	push	r28
    48b6:	00 d0       	rcall	.+0      	; 0x48b8 <SEGMENT_voidInitSegmentPort+0x6>
    48b8:	0f 92       	push	r0
    48ba:	cd b7       	in	r28, 0x3d	; 61
    48bc:	de b7       	in	r29, 0x3e	; 62
    48be:	89 83       	std	Y+1, r24	; 0x01
    switch(Copy_u8PortNumber)
    48c0:	89 81       	ldd	r24, Y+1	; 0x01
    48c2:	28 2f       	mov	r18, r24
    48c4:	30 e0       	ldi	r19, 0x00	; 0
    48c6:	3b 83       	std	Y+3, r19	; 0x03
    48c8:	2a 83       	std	Y+2, r18	; 0x02
    48ca:	8a 81       	ldd	r24, Y+2	; 0x02
    48cc:	9b 81       	ldd	r25, Y+3	; 0x03
    48ce:	81 30       	cpi	r24, 0x01	; 1
    48d0:	91 05       	cpc	r25, r1
    48d2:	d1 f0       	breq	.+52     	; 0x4908 <SEGMENT_voidInitSegmentPort+0x56>
    48d4:	2a 81       	ldd	r18, Y+2	; 0x02
    48d6:	3b 81       	ldd	r19, Y+3	; 0x03
    48d8:	22 30       	cpi	r18, 0x02	; 2
    48da:	31 05       	cpc	r19, r1
    48dc:	2c f4       	brge	.+10     	; 0x48e8 <SEGMENT_voidInitSegmentPort+0x36>
    48de:	8a 81       	ldd	r24, Y+2	; 0x02
    48e0:	9b 81       	ldd	r25, Y+3	; 0x03
    48e2:	00 97       	sbiw	r24, 0x00	; 0
    48e4:	61 f0       	breq	.+24     	; 0x48fe <SEGMENT_voidInitSegmentPort+0x4c>
    48e6:	1e c0       	rjmp	.+60     	; 0x4924 <SEGMENT_voidInitSegmentPort+0x72>
    48e8:	2a 81       	ldd	r18, Y+2	; 0x02
    48ea:	3b 81       	ldd	r19, Y+3	; 0x03
    48ec:	22 30       	cpi	r18, 0x02	; 2
    48ee:	31 05       	cpc	r19, r1
    48f0:	81 f0       	breq	.+32     	; 0x4912 <SEGMENT_voidInitSegmentPort+0x60>
    48f2:	8a 81       	ldd	r24, Y+2	; 0x02
    48f4:	9b 81       	ldd	r25, Y+3	; 0x03
    48f6:	83 30       	cpi	r24, 0x03	; 3
    48f8:	91 05       	cpc	r25, r1
    48fa:	81 f0       	breq	.+32     	; 0x491c <SEGMENT_voidInitSegmentPort+0x6a>
    48fc:	13 c0       	rjmp	.+38     	; 0x4924 <SEGMENT_voidInitSegmentPort+0x72>
    {
        case DIO_PORTA :   DIO_voidSetPortDirection (DIO_PORTA,DIO_OUTPUT);    break;
    48fe:	80 e0       	ldi	r24, 0x00	; 0
    4900:	61 e0       	ldi	r22, 0x01	; 1
    4902:	0e 94 01 13 	call	0x2602	; 0x2602 <DIO_voidSetPortDirection>
    4906:	0e c0       	rjmp	.+28     	; 0x4924 <SEGMENT_voidInitSegmentPort+0x72>
        case DIO_PORTB :   DIO_voidSetPortDirection (DIO_PORTB,DIO_OUTPUT);    break;
    4908:	81 e0       	ldi	r24, 0x01	; 1
    490a:	61 e0       	ldi	r22, 0x01	; 1
    490c:	0e 94 01 13 	call	0x2602	; 0x2602 <DIO_voidSetPortDirection>
    4910:	09 c0       	rjmp	.+18     	; 0x4924 <SEGMENT_voidInitSegmentPort+0x72>
        case DIO_PORTC :   DIO_voidSetPortDirection (DIO_PORTC,DIO_OUTPUT);    break;
    4912:	82 e0       	ldi	r24, 0x02	; 2
    4914:	61 e0       	ldi	r22, 0x01	; 1
    4916:	0e 94 01 13 	call	0x2602	; 0x2602 <DIO_voidSetPortDirection>
    491a:	04 c0       	rjmp	.+8      	; 0x4924 <SEGMENT_voidInitSegmentPort+0x72>
        case DIO_PORTD :   DIO_voidSetPortDirection (DIO_PORTD,DIO_OUTPUT);    break;
    491c:	83 e0       	ldi	r24, 0x03	; 3
    491e:	61 e0       	ldi	r22, 0x01	; 1
    4920:	0e 94 01 13 	call	0x2602	; 0x2602 <DIO_voidSetPortDirection>
        default    :                                               break;
    }
}
    4924:	0f 90       	pop	r0
    4926:	0f 90       	pop	r0
    4928:	0f 90       	pop	r0
    492a:	cf 91       	pop	r28
    492c:	df 91       	pop	r29
    492e:	08 95       	ret

00004930 <SEGMENT_voidPrintNumber>:



void SEGMENT_voidPrintNumber ( u8 Copy_u8PortNumber , u8 Copy_SegmentPolarity , u8 Copy_u8Number )
{
    4930:	df 93       	push	r29
    4932:	cf 93       	push	r28
    4934:	cd b7       	in	r28, 0x3d	; 61
    4936:	de b7       	in	r29, 0x3e	; 62
    4938:	29 97       	sbiw	r28, 0x09	; 9
    493a:	0f b6       	in	r0, 0x3f	; 63
    493c:	f8 94       	cli
    493e:	de bf       	out	0x3e, r29	; 62
    4940:	0f be       	out	0x3f, r0	; 63
    4942:	cd bf       	out	0x3d, r28	; 61
    4944:	89 83       	std	Y+1, r24	; 0x01
    4946:	6a 83       	std	Y+2, r22	; 0x02
    4948:	4b 83       	std	Y+3, r20	; 0x03
    switch ( Copy_SegmentPolarity )
    494a:	8a 81       	ldd	r24, Y+2	; 0x02
    494c:	28 2f       	mov	r18, r24
    494e:	30 e0       	ldi	r19, 0x00	; 0
    4950:	39 87       	std	Y+9, r19	; 0x09
    4952:	28 87       	std	Y+8, r18	; 0x08
    4954:	88 85       	ldd	r24, Y+8	; 0x08
    4956:	99 85       	ldd	r25, Y+9	; 0x09
    4958:	00 97       	sbiw	r24, 0x00	; 0
    495a:	39 f0       	breq	.+14     	; 0x496a <SEGMENT_voidPrintNumber+0x3a>
    495c:	28 85       	ldd	r18, Y+8	; 0x08
    495e:	39 85       	ldd	r19, Y+9	; 0x09
    4960:	21 30       	cpi	r18, 0x01	; 1
    4962:	31 05       	cpc	r19, r1
    4964:	09 f4       	brne	.+2      	; 0x4968 <SEGMENT_voidPrintNumber+0x38>
    4966:	50 c0       	rjmp	.+160    	; 0x4a08 <SEGMENT_voidPrintNumber+0xd8>
    4968:	a5 c0       	rjmp	.+330    	; 0x4ab4 <SEGMENT_voidPrintNumber+0x184>
    {
        case COMMON_ANODE   :
        						switch(Copy_u8PortNumber)
    496a:	89 81       	ldd	r24, Y+1	; 0x01
    496c:	28 2f       	mov	r18, r24
    496e:	30 e0       	ldi	r19, 0x00	; 0
    4970:	3f 83       	std	Y+7, r19	; 0x07
    4972:	2e 83       	std	Y+6, r18	; 0x06
    4974:	8e 81       	ldd	r24, Y+6	; 0x06
    4976:	9f 81       	ldd	r25, Y+7	; 0x07
    4978:	81 30       	cpi	r24, 0x01	; 1
    497a:	91 05       	cpc	r25, r1
    497c:	09 f1       	breq	.+66     	; 0x49c0 <SEGMENT_voidPrintNumber+0x90>
    497e:	2e 81       	ldd	r18, Y+6	; 0x06
    4980:	3f 81       	ldd	r19, Y+7	; 0x07
    4982:	22 30       	cpi	r18, 0x02	; 2
    4984:	31 05       	cpc	r19, r1
    4986:	2c f4       	brge	.+10     	; 0x4992 <SEGMENT_voidPrintNumber+0x62>
    4988:	8e 81       	ldd	r24, Y+6	; 0x06
    498a:	9f 81       	ldd	r25, Y+7	; 0x07
    498c:	00 97       	sbiw	r24, 0x00	; 0
    498e:	61 f0       	breq	.+24     	; 0x49a8 <SEGMENT_voidPrintNumber+0x78>
    4990:	91 c0       	rjmp	.+290    	; 0x4ab4 <SEGMENT_voidPrintNumber+0x184>
    4992:	2e 81       	ldd	r18, Y+6	; 0x06
    4994:	3f 81       	ldd	r19, Y+7	; 0x07
    4996:	22 30       	cpi	r18, 0x02	; 2
    4998:	31 05       	cpc	r19, r1
    499a:	f1 f0       	breq	.+60     	; 0x49d8 <SEGMENT_voidPrintNumber+0xa8>
    499c:	8e 81       	ldd	r24, Y+6	; 0x06
    499e:	9f 81       	ldd	r25, Y+7	; 0x07
    49a0:	83 30       	cpi	r24, 0x03	; 3
    49a2:	91 05       	cpc	r25, r1
    49a4:	29 f1       	breq	.+74     	; 0x49f0 <SEGMENT_voidPrintNumber+0xc0>
    49a6:	86 c0       	rjmp	.+268    	; 0x4ab4 <SEGMENT_voidPrintNumber+0x184>
                                {
                                    case DIO_PORTA :
                                    	DIO_voidSetPortValue (DIO_PORTA,Common_Anode_Arr[Copy_u8Number]);
    49a8:	8b 81       	ldd	r24, Y+3	; 0x03
    49aa:	88 2f       	mov	r24, r24
    49ac:	90 e0       	ldi	r25, 0x00	; 0
    49ae:	fc 01       	movw	r30, r24
    49b0:	e5 5e       	subi	r30, 0xE5	; 229
    49b2:	fd 4f       	sbci	r31, 0xFD	; 253
    49b4:	90 81       	ld	r25, Z
    49b6:	80 e0       	ldi	r24, 0x00	; 0
    49b8:	69 2f       	mov	r22, r25
    49ba:	0e 94 9a 14 	call	0x2934	; 0x2934 <DIO_voidSetPortValue>
    49be:	7a c0       	rjmp	.+244    	; 0x4ab4 <SEGMENT_voidPrintNumber+0x184>
                                    	break;
                                    case DIO_PORTB :
                                    	DIO_voidSetPortValue (DIO_PORTB,Common_Anode_Arr[Copy_u8Number]);
    49c0:	8b 81       	ldd	r24, Y+3	; 0x03
    49c2:	88 2f       	mov	r24, r24
    49c4:	90 e0       	ldi	r25, 0x00	; 0
    49c6:	fc 01       	movw	r30, r24
    49c8:	e5 5e       	subi	r30, 0xE5	; 229
    49ca:	fd 4f       	sbci	r31, 0xFD	; 253
    49cc:	90 81       	ld	r25, Z
    49ce:	81 e0       	ldi	r24, 0x01	; 1
    49d0:	69 2f       	mov	r22, r25
    49d2:	0e 94 9a 14 	call	0x2934	; 0x2934 <DIO_voidSetPortValue>
    49d6:	6e c0       	rjmp	.+220    	; 0x4ab4 <SEGMENT_voidPrintNumber+0x184>
                                    	break;
                                    case DIO_PORTC :
                                    	DIO_voidSetPortValue (DIO_PORTC,Common_Anode_Arr[Copy_u8Number]);
    49d8:	8b 81       	ldd	r24, Y+3	; 0x03
    49da:	88 2f       	mov	r24, r24
    49dc:	90 e0       	ldi	r25, 0x00	; 0
    49de:	fc 01       	movw	r30, r24
    49e0:	e5 5e       	subi	r30, 0xE5	; 229
    49e2:	fd 4f       	sbci	r31, 0xFD	; 253
    49e4:	90 81       	ld	r25, Z
    49e6:	82 e0       	ldi	r24, 0x02	; 2
    49e8:	69 2f       	mov	r22, r25
    49ea:	0e 94 9a 14 	call	0x2934	; 0x2934 <DIO_voidSetPortValue>
    49ee:	62 c0       	rjmp	.+196    	; 0x4ab4 <SEGMENT_voidPrintNumber+0x184>
                                    	break;
                                    case DIO_PORTD :
                                    	DIO_voidSetPortValue (DIO_PORTD,Common_Anode_Arr[Copy_u8Number]);
    49f0:	8b 81       	ldd	r24, Y+3	; 0x03
    49f2:	88 2f       	mov	r24, r24
    49f4:	90 e0       	ldi	r25, 0x00	; 0
    49f6:	fc 01       	movw	r30, r24
    49f8:	e5 5e       	subi	r30, 0xE5	; 229
    49fa:	fd 4f       	sbci	r31, 0xFD	; 253
    49fc:	90 81       	ld	r25, Z
    49fe:	83 e0       	ldi	r24, 0x03	; 3
    4a00:	69 2f       	mov	r22, r25
    4a02:	0e 94 9a 14 	call	0x2934	; 0x2934 <DIO_voidSetPortValue>
    4a06:	56 c0       	rjmp	.+172    	; 0x4ab4 <SEGMENT_voidPrintNumber+0x184>
                                    	break;
                                    default    :
                                    	break;
                                }
                                break;
        case COMMON_CATHODE :   switch(Copy_u8PortNumber)
    4a08:	89 81       	ldd	r24, Y+1	; 0x01
    4a0a:	28 2f       	mov	r18, r24
    4a0c:	30 e0       	ldi	r19, 0x00	; 0
    4a0e:	3d 83       	std	Y+5, r19	; 0x05
    4a10:	2c 83       	std	Y+4, r18	; 0x04
    4a12:	8c 81       	ldd	r24, Y+4	; 0x04
    4a14:	9d 81       	ldd	r25, Y+5	; 0x05
    4a16:	81 30       	cpi	r24, 0x01	; 1
    4a18:	91 05       	cpc	r25, r1
    4a1a:	19 f1       	breq	.+70     	; 0x4a62 <SEGMENT_voidPrintNumber+0x132>
    4a1c:	2c 81       	ldd	r18, Y+4	; 0x04
    4a1e:	3d 81       	ldd	r19, Y+5	; 0x05
    4a20:	22 30       	cpi	r18, 0x02	; 2
    4a22:	31 05       	cpc	r19, r1
    4a24:	2c f4       	brge	.+10     	; 0x4a30 <SEGMENT_voidPrintNumber+0x100>
    4a26:	8c 81       	ldd	r24, Y+4	; 0x04
    4a28:	9d 81       	ldd	r25, Y+5	; 0x05
    4a2a:	00 97       	sbiw	r24, 0x00	; 0
    4a2c:	61 f0       	breq	.+24     	; 0x4a46 <SEGMENT_voidPrintNumber+0x116>
    4a2e:	42 c0       	rjmp	.+132    	; 0x4ab4 <SEGMENT_voidPrintNumber+0x184>
    4a30:	2c 81       	ldd	r18, Y+4	; 0x04
    4a32:	3d 81       	ldd	r19, Y+5	; 0x05
    4a34:	22 30       	cpi	r18, 0x02	; 2
    4a36:	31 05       	cpc	r19, r1
    4a38:	11 f1       	breq	.+68     	; 0x4a7e <SEGMENT_voidPrintNumber+0x14e>
    4a3a:	8c 81       	ldd	r24, Y+4	; 0x04
    4a3c:	9d 81       	ldd	r25, Y+5	; 0x05
    4a3e:	83 30       	cpi	r24, 0x03	; 3
    4a40:	91 05       	cpc	r25, r1
    4a42:	59 f1       	breq	.+86     	; 0x4a9a <SEGMENT_voidPrintNumber+0x16a>
    4a44:	37 c0       	rjmp	.+110    	; 0x4ab4 <SEGMENT_voidPrintNumber+0x184>
                                {
                                    case DIO_PORTA :
                                    	DIO_voidSetPortValue (DIO_PORTA,~Common_Anode_Arr[Copy_u8Number]);
    4a46:	8b 81       	ldd	r24, Y+3	; 0x03
    4a48:	88 2f       	mov	r24, r24
    4a4a:	90 e0       	ldi	r25, 0x00	; 0
    4a4c:	fc 01       	movw	r30, r24
    4a4e:	e5 5e       	subi	r30, 0xE5	; 229
    4a50:	fd 4f       	sbci	r31, 0xFD	; 253
    4a52:	80 81       	ld	r24, Z
    4a54:	98 2f       	mov	r25, r24
    4a56:	90 95       	com	r25
    4a58:	80 e0       	ldi	r24, 0x00	; 0
    4a5a:	69 2f       	mov	r22, r25
    4a5c:	0e 94 9a 14 	call	0x2934	; 0x2934 <DIO_voidSetPortValue>
    4a60:	29 c0       	rjmp	.+82     	; 0x4ab4 <SEGMENT_voidPrintNumber+0x184>
                                    	break;
                                    case DIO_PORTB :
                                    	DIO_voidSetPortValue (DIO_PORTB,~Common_Anode_Arr[Copy_u8Number]);
    4a62:	8b 81       	ldd	r24, Y+3	; 0x03
    4a64:	88 2f       	mov	r24, r24
    4a66:	90 e0       	ldi	r25, 0x00	; 0
    4a68:	fc 01       	movw	r30, r24
    4a6a:	e5 5e       	subi	r30, 0xE5	; 229
    4a6c:	fd 4f       	sbci	r31, 0xFD	; 253
    4a6e:	80 81       	ld	r24, Z
    4a70:	98 2f       	mov	r25, r24
    4a72:	90 95       	com	r25
    4a74:	81 e0       	ldi	r24, 0x01	; 1
    4a76:	69 2f       	mov	r22, r25
    4a78:	0e 94 9a 14 	call	0x2934	; 0x2934 <DIO_voidSetPortValue>
    4a7c:	1b c0       	rjmp	.+54     	; 0x4ab4 <SEGMENT_voidPrintNumber+0x184>
                                    	break;
                                    case DIO_PORTC :
                                    	DIO_voidSetPortValue (DIO_PORTC,~Common_Anode_Arr[Copy_u8Number]);
    4a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    4a80:	88 2f       	mov	r24, r24
    4a82:	90 e0       	ldi	r25, 0x00	; 0
    4a84:	fc 01       	movw	r30, r24
    4a86:	e5 5e       	subi	r30, 0xE5	; 229
    4a88:	fd 4f       	sbci	r31, 0xFD	; 253
    4a8a:	80 81       	ld	r24, Z
    4a8c:	98 2f       	mov	r25, r24
    4a8e:	90 95       	com	r25
    4a90:	82 e0       	ldi	r24, 0x02	; 2
    4a92:	69 2f       	mov	r22, r25
    4a94:	0e 94 9a 14 	call	0x2934	; 0x2934 <DIO_voidSetPortValue>
    4a98:	0d c0       	rjmp	.+26     	; 0x4ab4 <SEGMENT_voidPrintNumber+0x184>
                                    	break;
                                    case DIO_PORTD :
                                    	DIO_voidSetPortValue (DIO_PORTD,~Common_Anode_Arr[Copy_u8Number]);
    4a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    4a9c:	88 2f       	mov	r24, r24
    4a9e:	90 e0       	ldi	r25, 0x00	; 0
    4aa0:	fc 01       	movw	r30, r24
    4aa2:	e5 5e       	subi	r30, 0xE5	; 229
    4aa4:	fd 4f       	sbci	r31, 0xFD	; 253
    4aa6:	80 81       	ld	r24, Z
    4aa8:	98 2f       	mov	r25, r24
    4aaa:	90 95       	com	r25
    4aac:	83 e0       	ldi	r24, 0x03	; 3
    4aae:	69 2f       	mov	r22, r25
    4ab0:	0e 94 9a 14 	call	0x2934	; 0x2934 <DIO_voidSetPortValue>
                                break;
        default             :
        	break;
    }
    
}
    4ab4:	29 96       	adiw	r28, 0x09	; 9
    4ab6:	0f b6       	in	r0, 0x3f	; 63
    4ab8:	f8 94       	cli
    4aba:	de bf       	out	0x3e, r29	; 62
    4abc:	0f be       	out	0x3f, r0	; 63
    4abe:	cd bf       	out	0x3d, r28	; 61
    4ac0:	cf 91       	pop	r28
    4ac2:	df 91       	pop	r29
    4ac4:	08 95       	ret

00004ac6 <main>:
u8 EEPROM_PASSWORD = 0 ;
u8 ModeKey = 0 ;


void main()
{
    4ac6:	df 93       	push	r29
    4ac8:	cf 93       	push	r28
    4aca:	cd b7       	in	r28, 0x3d	; 61
    4acc:	de b7       	in	r29, 0x3e	; 62
    4ace:	6f 97       	sbiw	r28, 0x1f	; 31
    4ad0:	0f b6       	in	r0, 0x3f	; 63
    4ad2:	f8 94       	cli
    4ad4:	de bf       	out	0x3e, r29	; 62
    4ad6:	0f be       	out	0x3f, r0	; 63
    4ad8:	cd bf       	out	0x3d, r28	; 61

		LCD_voidInit();
    4ada:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <LCD_voidInit>
		KPAD_voidInit();
    4ade:	0e 94 cd 21 	call	0x439a	; 0x439a <KPAD_voidInit>
		USART_voidInit();
    4ae2:	0e 94 a3 05 	call	0xb46	; 0xb46 <USART_voidInit>
		ADC_voidInit();
    4ae6:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <ADC_voidInit>
		TIMER1_voidInit ();
    4aea:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <TIMER1_voidInit>
		I2C_voidMasterInit(0);
    4aee:	80 e0       	ldi	r24, 0x00	; 0
    4af0:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <I2C_voidMasterInit>
		EEPROM_voidSendDataByte(1,123);
    4af4:	81 e0       	ldi	r24, 0x01	; 1
    4af6:	90 e0       	ldi	r25, 0x00	; 0
    4af8:	6b e7       	ldi	r22, 0x7B	; 123
    4afa:	0e 94 aa 22 	call	0x4554	; 0x4554 <EEPROM_voidSendDataByte>
		DIO_voidSetPinDirection(DIO_PORTC,DIO_PIN3,DIO_OUTPUT);
    4afe:	82 e0       	ldi	r24, 0x02	; 2
    4b00:	63 e0       	ldi	r22, 0x03	; 3
    4b02:	41 e0       	ldi	r20, 0x01	; 1
    4b04:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <DIO_voidSetPinDirection>
		u16 PASSWORD = 0 ;
    4b08:	1f 8e       	std	Y+31, r1	; 0x1f
    4b0a:	1e 8e       	std	Y+30, r1	; 0x1e
		EEPROM_PASSWORD=EEPROM_voidReadDataByte(1);
    4b0c:	81 e0       	ldi	r24, 0x01	; 1
    4b0e:	90 e0       	ldi	r25, 0x00	; 0
    4b10:	0e 94 45 23 	call	0x468a	; 0x468a <EEPROM_voidReadDataByte>
    4b14:	80 93 54 02 	sts	0x0254, r24
		StartProgram();
    4b18:	0e 94 43 27 	call	0x4e86	; 0x4e86 <StartProgram>
		LCD_voidClearLine(0);
    4b1c:	80 e0       	ldi	r24, 0x00	; 0
    4b1e:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
		LCD_voidClearLine(1);
    4b22:	81 e0       	ldi	r24, 0x01	; 1
    4b24:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
		LCD_voidGoTo_XY (0,0);
    4b28:	80 e0       	ldi	r24, 0x00	; 0
    4b2a:	60 e0       	ldi	r22, 0x00	; 0
    4b2c:	0e 94 19 21 	call	0x4232	; 0x4232 <LCD_voidGoTo_XY>
		LCD_voidWriteString (" Enter Password:");
    4b30:	80 e6       	ldi	r24, 0x60	; 96
    4b32:	90 e0       	ldi	r25, 0x00	; 0
    4b34:	0e 94 81 20 	call	0x4102	; 0x4102 <LCD_voidWriteString>
		LCD_voidGoTo_XY (1,13);
    4b38:	81 e0       	ldi	r24, 0x01	; 1
    4b3a:	6d e0       	ldi	r22, 0x0D	; 13
    4b3c:	0e 94 19 21 	call	0x4232	; 0x4232 <LCD_voidGoTo_XY>
		LCD_voidWriteString ("[1]");
    4b40:	81 e7       	ldi	r24, 0x71	; 113
    4b42:	90 e0       	ldi	r25, 0x00	; 0
    4b44:	0e 94 81 20 	call	0x4102	; 0x4102 <LCD_voidWriteString>
		while (1)
			{
				for ( u8 i=0 ; i < 3 ; i++ )
    4b48:	1d 8e       	std	Y+29, r1	; 0x1d
    4b4a:	98 c1       	rjmp	.+816    	; 0x4e7c <main+0x3b6>
				{
					PASSWORD = GetPassword();
    4b4c:	0e 94 62 28 	call	0x50c4	; 0x50c4 <GetPassword>
    4b50:	9f 8f       	std	Y+31, r25	; 0x1f
    4b52:	8e 8f       	std	Y+30, r24	; 0x1e
					if( PASSWORD == EEPROM_PASSWORD )
    4b54:	80 91 54 02 	lds	r24, 0x0254
    4b58:	28 2f       	mov	r18, r24
    4b5a:	30 e0       	ldi	r19, 0x00	; 0
    4b5c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4b5e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4b60:	28 17       	cp	r18, r24
    4b62:	39 07       	cpc	r19, r25
    4b64:	09 f0       	breq	.+2      	; 0x4b68 <main+0xa2>
    4b66:	3d c1       	rjmp	.+634    	; 0x4de2 <main+0x31c>
					{
						USART_voidSendData('Z');
    4b68:	8a e5       	ldi	r24, 0x5A	; 90
    4b6a:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
						LCD_voidClearLine(0);
    4b6e:	80 e0       	ldi	r24, 0x00	; 0
    4b70:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
						LCD_voidClearLine(1);
    4b74:	81 e0       	ldi	r24, 0x01	; 1
    4b76:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
						DIO_voidSetPinValue(DIO_PORTC,DIO_PIN3,DIO_HIGH);		// Buzzer ON
    4b7a:	82 e0       	ldi	r24, 0x02	; 2
    4b7c:	63 e0       	ldi	r22, 0x03	; 3
    4b7e:	41 e0       	ldi	r20, 0x01	; 1
    4b80:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
						OpenDoor();
    4b84:	0e 94 b7 2b 	call	0x576e	; 0x576e <OpenDoor>
    4b88:	80 e0       	ldi	r24, 0x00	; 0
    4b8a:	90 e0       	ldi	r25, 0x00	; 0
    4b8c:	aa e7       	ldi	r26, 0x7A	; 122
    4b8e:	b3 e4       	ldi	r27, 0x43	; 67
    4b90:	89 8f       	std	Y+25, r24	; 0x19
    4b92:	9a 8f       	std	Y+26, r25	; 0x1a
    4b94:	ab 8f       	std	Y+27, r26	; 0x1b
    4b96:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b98:	69 8d       	ldd	r22, Y+25	; 0x19
    4b9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4b9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4ba0:	20 e0       	ldi	r18, 0x00	; 0
    4ba2:	30 e0       	ldi	r19, 0x00	; 0
    4ba4:	4a ef       	ldi	r20, 0xFA	; 250
    4ba6:	54 e4       	ldi	r21, 0x44	; 68
    4ba8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bac:	dc 01       	movw	r26, r24
    4bae:	cb 01       	movw	r24, r22
    4bb0:	8d 8b       	std	Y+21, r24	; 0x15
    4bb2:	9e 8b       	std	Y+22, r25	; 0x16
    4bb4:	af 8b       	std	Y+23, r26	; 0x17
    4bb6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4bb8:	6d 89       	ldd	r22, Y+21	; 0x15
    4bba:	7e 89       	ldd	r23, Y+22	; 0x16
    4bbc:	8f 89       	ldd	r24, Y+23	; 0x17
    4bbe:	98 8d       	ldd	r25, Y+24	; 0x18
    4bc0:	20 e0       	ldi	r18, 0x00	; 0
    4bc2:	30 e0       	ldi	r19, 0x00	; 0
    4bc4:	40 e8       	ldi	r20, 0x80	; 128
    4bc6:	5f e3       	ldi	r21, 0x3F	; 63
    4bc8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4bcc:	88 23       	and	r24, r24
    4bce:	2c f4       	brge	.+10     	; 0x4bda <main+0x114>
		__ticks = 1;
    4bd0:	81 e0       	ldi	r24, 0x01	; 1
    4bd2:	90 e0       	ldi	r25, 0x00	; 0
    4bd4:	9c 8b       	std	Y+20, r25	; 0x14
    4bd6:	8b 8b       	std	Y+19, r24	; 0x13
    4bd8:	3f c0       	rjmp	.+126    	; 0x4c58 <main+0x192>
	else if (__tmp > 65535)
    4bda:	6d 89       	ldd	r22, Y+21	; 0x15
    4bdc:	7e 89       	ldd	r23, Y+22	; 0x16
    4bde:	8f 89       	ldd	r24, Y+23	; 0x17
    4be0:	98 8d       	ldd	r25, Y+24	; 0x18
    4be2:	20 e0       	ldi	r18, 0x00	; 0
    4be4:	3f ef       	ldi	r19, 0xFF	; 255
    4be6:	4f e7       	ldi	r20, 0x7F	; 127
    4be8:	57 e4       	ldi	r21, 0x47	; 71
    4bea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4bee:	18 16       	cp	r1, r24
    4bf0:	4c f5       	brge	.+82     	; 0x4c44 <main+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bf2:	69 8d       	ldd	r22, Y+25	; 0x19
    4bf4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4bf6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4bf8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4bfa:	20 e0       	ldi	r18, 0x00	; 0
    4bfc:	30 e0       	ldi	r19, 0x00	; 0
    4bfe:	40 e2       	ldi	r20, 0x20	; 32
    4c00:	51 e4       	ldi	r21, 0x41	; 65
    4c02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c06:	dc 01       	movw	r26, r24
    4c08:	cb 01       	movw	r24, r22
    4c0a:	bc 01       	movw	r22, r24
    4c0c:	cd 01       	movw	r24, r26
    4c0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c12:	dc 01       	movw	r26, r24
    4c14:	cb 01       	movw	r24, r22
    4c16:	9c 8b       	std	Y+20, r25	; 0x14
    4c18:	8b 8b       	std	Y+19, r24	; 0x13
    4c1a:	0f c0       	rjmp	.+30     	; 0x4c3a <main+0x174>
    4c1c:	88 ec       	ldi	r24, 0xC8	; 200
    4c1e:	90 e0       	ldi	r25, 0x00	; 0
    4c20:	9a 8b       	std	Y+18, r25	; 0x12
    4c22:	89 8b       	std	Y+17, r24	; 0x11
    4c24:	89 89       	ldd	r24, Y+17	; 0x11
    4c26:	9a 89       	ldd	r25, Y+18	; 0x12
    4c28:	01 97       	sbiw	r24, 0x01	; 1
    4c2a:	f1 f7       	brne	.-4      	; 0x4c28 <main+0x162>
    4c2c:	9a 8b       	std	Y+18, r25	; 0x12
    4c2e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c30:	8b 89       	ldd	r24, Y+19	; 0x13
    4c32:	9c 89       	ldd	r25, Y+20	; 0x14
    4c34:	01 97       	sbiw	r24, 0x01	; 1
    4c36:	9c 8b       	std	Y+20, r25	; 0x14
    4c38:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c3a:	8b 89       	ldd	r24, Y+19	; 0x13
    4c3c:	9c 89       	ldd	r25, Y+20	; 0x14
    4c3e:	00 97       	sbiw	r24, 0x00	; 0
    4c40:	69 f7       	brne	.-38     	; 0x4c1c <main+0x156>
    4c42:	14 c0       	rjmp	.+40     	; 0x4c6c <main+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c44:	6d 89       	ldd	r22, Y+21	; 0x15
    4c46:	7e 89       	ldd	r23, Y+22	; 0x16
    4c48:	8f 89       	ldd	r24, Y+23	; 0x17
    4c4a:	98 8d       	ldd	r25, Y+24	; 0x18
    4c4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c50:	dc 01       	movw	r26, r24
    4c52:	cb 01       	movw	r24, r22
    4c54:	9c 8b       	std	Y+20, r25	; 0x14
    4c56:	8b 8b       	std	Y+19, r24	; 0x13
    4c58:	8b 89       	ldd	r24, Y+19	; 0x13
    4c5a:	9c 89       	ldd	r25, Y+20	; 0x14
    4c5c:	98 8b       	std	Y+16, r25	; 0x10
    4c5e:	8f 87       	std	Y+15, r24	; 0x0f
    4c60:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c62:	98 89       	ldd	r25, Y+16	; 0x10
    4c64:	01 97       	sbiw	r24, 0x01	; 1
    4c66:	f1 f7       	brne	.-4      	; 0x4c64 <main+0x19e>
    4c68:	98 8b       	std	Y+16, r25	; 0x10
    4c6a:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(250);
						DIO_voidSetPinValue(DIO_PORTC,DIO_PIN3,DIO_LOW);		// Buzzer off
    4c6c:	82 e0       	ldi	r24, 0x02	; 2
    4c6e:	63 e0       	ldi	r22, 0x03	; 3
    4c70:	40 e0       	ldi	r20, 0x00	; 0
    4c72:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
						LCD_voidGoTo_XY (0,1);
    4c76:	80 e0       	ldi	r24, 0x00	; 0
    4c78:	61 e0       	ldi	r22, 0x01	; 1
    4c7a:	0e 94 19 21 	call	0x4232	; 0x4232 <LCD_voidGoTo_XY>
						LCD_voidWriteString ("Door is OPened");
    4c7e:	85 e7       	ldi	r24, 0x75	; 117
    4c80:	90 e0       	ldi	r25, 0x00	; 0
    4c82:	0e 94 81 20 	call	0x4102	; 0x4102 <LCD_voidWriteString>
						LCD_voidGoTo_XY (1,3);
    4c86:	81 e0       	ldi	r24, 0x01	; 1
    4c88:	63 e0       	ldi	r22, 0x03	; 3
    4c8a:	0e 94 19 21 	call	0x4232	; 0x4232 <LCD_voidGoTo_XY>
						LCD_voidWriteString ("Welcome..");
    4c8e:	84 e8       	ldi	r24, 0x84	; 132
    4c90:	90 e0       	ldi	r25, 0x00	; 0
    4c92:	0e 94 81 20 	call	0x4102	; 0x4102 <LCD_voidWriteString>
    4c96:	80 e0       	ldi	r24, 0x00	; 0
    4c98:	90 e0       	ldi	r25, 0x00	; 0
    4c9a:	a6 e9       	ldi	r26, 0x96	; 150
    4c9c:	b3 e4       	ldi	r27, 0x43	; 67
    4c9e:	8b 87       	std	Y+11, r24	; 0x0b
    4ca0:	9c 87       	std	Y+12, r25	; 0x0c
    4ca2:	ad 87       	std	Y+13, r26	; 0x0d
    4ca4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ca6:	6b 85       	ldd	r22, Y+11	; 0x0b
    4ca8:	7c 85       	ldd	r23, Y+12	; 0x0c
    4caa:	8d 85       	ldd	r24, Y+13	; 0x0d
    4cac:	9e 85       	ldd	r25, Y+14	; 0x0e
    4cae:	20 e0       	ldi	r18, 0x00	; 0
    4cb0:	30 e0       	ldi	r19, 0x00	; 0
    4cb2:	4a ef       	ldi	r20, 0xFA	; 250
    4cb4:	54 e4       	ldi	r21, 0x44	; 68
    4cb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cba:	dc 01       	movw	r26, r24
    4cbc:	cb 01       	movw	r24, r22
    4cbe:	8f 83       	std	Y+7, r24	; 0x07
    4cc0:	98 87       	std	Y+8, r25	; 0x08
    4cc2:	a9 87       	std	Y+9, r26	; 0x09
    4cc4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4cc6:	6f 81       	ldd	r22, Y+7	; 0x07
    4cc8:	78 85       	ldd	r23, Y+8	; 0x08
    4cca:	89 85       	ldd	r24, Y+9	; 0x09
    4ccc:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cce:	20 e0       	ldi	r18, 0x00	; 0
    4cd0:	30 e0       	ldi	r19, 0x00	; 0
    4cd2:	40 e8       	ldi	r20, 0x80	; 128
    4cd4:	5f e3       	ldi	r21, 0x3F	; 63
    4cd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4cda:	88 23       	and	r24, r24
    4cdc:	2c f4       	brge	.+10     	; 0x4ce8 <main+0x222>
		__ticks = 1;
    4cde:	81 e0       	ldi	r24, 0x01	; 1
    4ce0:	90 e0       	ldi	r25, 0x00	; 0
    4ce2:	9e 83       	std	Y+6, r25	; 0x06
    4ce4:	8d 83       	std	Y+5, r24	; 0x05
    4ce6:	3f c0       	rjmp	.+126    	; 0x4d66 <main+0x2a0>
	else if (__tmp > 65535)
    4ce8:	6f 81       	ldd	r22, Y+7	; 0x07
    4cea:	78 85       	ldd	r23, Y+8	; 0x08
    4cec:	89 85       	ldd	r24, Y+9	; 0x09
    4cee:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cf0:	20 e0       	ldi	r18, 0x00	; 0
    4cf2:	3f ef       	ldi	r19, 0xFF	; 255
    4cf4:	4f e7       	ldi	r20, 0x7F	; 127
    4cf6:	57 e4       	ldi	r21, 0x47	; 71
    4cf8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4cfc:	18 16       	cp	r1, r24
    4cfe:	4c f5       	brge	.+82     	; 0x4d52 <main+0x28c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d00:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d02:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d04:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d06:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d08:	20 e0       	ldi	r18, 0x00	; 0
    4d0a:	30 e0       	ldi	r19, 0x00	; 0
    4d0c:	40 e2       	ldi	r20, 0x20	; 32
    4d0e:	51 e4       	ldi	r21, 0x41	; 65
    4d10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d14:	dc 01       	movw	r26, r24
    4d16:	cb 01       	movw	r24, r22
    4d18:	bc 01       	movw	r22, r24
    4d1a:	cd 01       	movw	r24, r26
    4d1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d20:	dc 01       	movw	r26, r24
    4d22:	cb 01       	movw	r24, r22
    4d24:	9e 83       	std	Y+6, r25	; 0x06
    4d26:	8d 83       	std	Y+5, r24	; 0x05
    4d28:	0f c0       	rjmp	.+30     	; 0x4d48 <main+0x282>
    4d2a:	88 ec       	ldi	r24, 0xC8	; 200
    4d2c:	90 e0       	ldi	r25, 0x00	; 0
    4d2e:	9c 83       	std	Y+4, r25	; 0x04
    4d30:	8b 83       	std	Y+3, r24	; 0x03
    4d32:	8b 81       	ldd	r24, Y+3	; 0x03
    4d34:	9c 81       	ldd	r25, Y+4	; 0x04
    4d36:	01 97       	sbiw	r24, 0x01	; 1
    4d38:	f1 f7       	brne	.-4      	; 0x4d36 <main+0x270>
    4d3a:	9c 83       	std	Y+4, r25	; 0x04
    4d3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d3e:	8d 81       	ldd	r24, Y+5	; 0x05
    4d40:	9e 81       	ldd	r25, Y+6	; 0x06
    4d42:	01 97       	sbiw	r24, 0x01	; 1
    4d44:	9e 83       	std	Y+6, r25	; 0x06
    4d46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d48:	8d 81       	ldd	r24, Y+5	; 0x05
    4d4a:	9e 81       	ldd	r25, Y+6	; 0x06
    4d4c:	00 97       	sbiw	r24, 0x00	; 0
    4d4e:	69 f7       	brne	.-38     	; 0x4d2a <main+0x264>
    4d50:	14 c0       	rjmp	.+40     	; 0x4d7a <main+0x2b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d52:	6f 81       	ldd	r22, Y+7	; 0x07
    4d54:	78 85       	ldd	r23, Y+8	; 0x08
    4d56:	89 85       	ldd	r24, Y+9	; 0x09
    4d58:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d5e:	dc 01       	movw	r26, r24
    4d60:	cb 01       	movw	r24, r22
    4d62:	9e 83       	std	Y+6, r25	; 0x06
    4d64:	8d 83       	std	Y+5, r24	; 0x05
    4d66:	8d 81       	ldd	r24, Y+5	; 0x05
    4d68:	9e 81       	ldd	r25, Y+6	; 0x06
    4d6a:	9a 83       	std	Y+2, r25	; 0x02
    4d6c:	89 83       	std	Y+1, r24	; 0x01
    4d6e:	89 81       	ldd	r24, Y+1	; 0x01
    4d70:	9a 81       	ldd	r25, Y+2	; 0x02
    4d72:	01 97       	sbiw	r24, 0x01	; 1
    4d74:	f1 f7       	brne	.-4      	; 0x4d72 <main+0x2ac>
    4d76:	9a 83       	std	Y+2, r25	; 0x02
    4d78:	89 83       	std	Y+1, r24	; 0x01
						_delay_ms(300);

						while(1)
						{

							LCD_voidGoTo_XY (0,0);
    4d7a:	80 e0       	ldi	r24, 0x00	; 0
    4d7c:	60 e0       	ldi	r22, 0x00	; 0
    4d7e:	0e 94 19 21 	call	0x4232	; 0x4232 <LCD_voidGoTo_XY>
							LCD_voidWriteString ("1-ROOM1 2-ROOM2");
    4d82:	8e e8       	ldi	r24, 0x8E	; 142
    4d84:	90 e0       	ldi	r25, 0x00	; 0
    4d86:	0e 94 81 20 	call	0x4102	; 0x4102 <LCD_voidWriteString>
							LCD_voidGoTo_XY (1,0);
    4d8a:	81 e0       	ldi	r24, 0x01	; 1
    4d8c:	60 e0       	ldi	r22, 0x00	; 0
    4d8e:	0e 94 19 21 	call	0x4232	; 0x4232 <LCD_voidGoTo_XY>
							LCD_voidWriteString ("3-Kitchen 4-More");
    4d92:	8e e9       	ldi	r24, 0x9E	; 158
    4d94:	90 e0       	ldi	r25, 0x00	; 0
    4d96:	0e 94 81 20 	call	0x4102	; 0x4102 <LCD_voidWriteString>
							ModeKey = KPAD_u8GetPressedKey ();
    4d9a:	0e 94 24 22 	call	0x4448	; 0x4448 <KPAD_u8GetPressedKey>
    4d9e:	80 93 55 02 	sts	0x0255, r24
							if ( ModeKey != 0xff  )
    4da2:	80 91 55 02 	lds	r24, 0x0255
    4da6:	8f 3f       	cpi	r24, 0xFF	; 255
    4da8:	41 f3       	breq	.-48     	; 0x4d7a <main+0x2b4>
							{
								if( ModeKey == '1' )
    4daa:	80 91 55 02 	lds	r24, 0x0255
    4dae:	81 33       	cpi	r24, 0x31	; 49
    4db0:	19 f4       	brne	.+6      	; 0x4db8 <main+0x2f2>
								{
									Room1();
    4db2:	0e 94 a6 28 	call	0x514c	; 0x514c <Room1>
    4db6:	e1 cf       	rjmp	.-62     	; 0x4d7a <main+0x2b4>
								}
								else if ( ModeKey == '2' )
    4db8:	80 91 55 02 	lds	r24, 0x0255
    4dbc:	82 33       	cpi	r24, 0x32	; 50
    4dbe:	19 f4       	brne	.+6      	; 0x4dc6 <main+0x300>
								{
									Room2();
    4dc0:	0e 94 e2 28 	call	0x51c4	; 0x51c4 <Room2>
    4dc4:	da cf       	rjmp	.-76     	; 0x4d7a <main+0x2b4>
								}
								else if ( ModeKey == '3' )
    4dc6:	80 91 55 02 	lds	r24, 0x0255
    4dca:	83 33       	cpi	r24, 0x33	; 51
    4dcc:	19 f4       	brne	.+6      	; 0x4dd4 <main+0x30e>
								{
									Kitchen();
    4dce:	0e 94 81 29 	call	0x5302	; 0x5302 <Kitchen>
    4dd2:	d3 cf       	rjmp	.-90     	; 0x4d7a <main+0x2b4>
								}
								else if ( ModeKey == '4' )
    4dd4:	80 91 55 02 	lds	r24, 0x0255
    4dd8:	84 33       	cpi	r24, 0x34	; 52
    4dda:	79 f6       	brne	.-98     	; 0x4d7a <main+0x2b4>
								{
									More();
    4ddc:	0e 94 1e 29 	call	0x523c	; 0x523c <More>
    4de0:	cc cf       	rjmp	.-104    	; 0x4d7a <main+0x2b4>
							}
						}
					}
					else
					{
						if (i==2)
    4de2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4de4:	82 30       	cpi	r24, 0x02	; 2
    4de6:	09 f5       	brne	.+66     	; 0x4e2a <main+0x364>
						{
							LCD_voidClearLine(0);
    4de8:	80 e0       	ldi	r24, 0x00	; 0
    4dea:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
							LCD_voidClearLine(1);
    4dee:	81 e0       	ldi	r24, 0x01	; 1
    4df0:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
							LCD_voidGoTo_XY (0,3);
    4df4:	80 e0       	ldi	r24, 0x00	; 0
    4df6:	63 e0       	ldi	r22, 0x03	; 3
    4df8:	0e 94 19 21 	call	0x4232	; 0x4232 <LCD_voidGoTo_XY>
							LCD_voidWriteString ("7aramy !!");
    4dfc:	8f ea       	ldi	r24, 0xAF	; 175
    4dfe:	90 e0       	ldi	r25, 0x00	; 0
    4e00:	0e 94 81 20 	call	0x4102	; 0x4102 <LCD_voidWriteString>
							LCD_voidGoTo_XY (1,0);
    4e04:	81 e0       	ldi	r24, 0x01	; 1
    4e06:	60 e0       	ldi	r22, 0x00	; 0
    4e08:	0e 94 19 21 	call	0x4232	; 0x4232 <LCD_voidGoTo_XY>
							LCD_voidWriteString ("Restart System..");
    4e0c:	89 eb       	ldi	r24, 0xB9	; 185
    4e0e:	90 e0       	ldi	r25, 0x00	; 0
    4e10:	0e 94 81 20 	call	0x4102	; 0x4102 <LCD_voidWriteString>
							USART_voidSendData('N');
    4e14:	8e e4       	ldi	r24, 0x4E	; 78
    4e16:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
							DIO_voidSetPinValue(DIO_PORTC,DIO_PIN3,DIO_HIGH);		// Buzzer ON
    4e1a:	82 e0       	ldi	r24, 0x02	; 2
    4e1c:	63 e0       	ldi	r22, 0x03	; 3
    4e1e:	41 e0       	ldi	r20, 0x01	; 1
    4e20:	0e 94 8a 13 	call	0x2714	; 0x2714 <DIO_voidSetPinValue>
							CloseDoor();
    4e24:	0e 94 c2 2b 	call	0x5784	; 0x5784 <CloseDoor>
    4e28:	8f ce       	rjmp	.-738    	; 0x4b48 <main+0x82>
							break;
						}
						else
						{
							LCD_voidClearLine(0);
    4e2a:	80 e0       	ldi	r24, 0x00	; 0
    4e2c:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
							LCD_voidClearLine(1);
    4e30:	81 e0       	ldi	r24, 0x01	; 1
    4e32:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
							LCD_voidGoTo_XY (0,0);
    4e36:	80 e0       	ldi	r24, 0x00	; 0
    4e38:	60 e0       	ldi	r22, 0x00	; 0
    4e3a:	0e 94 19 21 	call	0x4232	; 0x4232 <LCD_voidGoTo_XY>
							LCD_voidWriteString ("Try again....");
    4e3e:	8a ec       	ldi	r24, 0xCA	; 202
    4e40:	90 e0       	ldi	r25, 0x00	; 0
    4e42:	0e 94 81 20 	call	0x4102	; 0x4102 <LCD_voidWriteString>
							LCD_voidGoTo_XY (1,13);
    4e46:	81 e0       	ldi	r24, 0x01	; 1
    4e48:	6d e0       	ldi	r22, 0x0D	; 13
    4e4a:	0e 94 19 21 	call	0x4232	; 0x4232 <LCD_voidGoTo_XY>
							LCD_voidWriteString ("[");
    4e4e:	88 ed       	ldi	r24, 0xD8	; 216
    4e50:	90 e0       	ldi	r25, 0x00	; 0
    4e52:	0e 94 81 20 	call	0x4102	; 0x4102 <LCD_voidWriteString>
							LCD_voidWrite_u32Number(i+2);
    4e56:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4e58:	88 2f       	mov	r24, r24
    4e5a:	90 e0       	ldi	r25, 0x00	; 0
    4e5c:	02 96       	adiw	r24, 0x02	; 2
    4e5e:	aa 27       	eor	r26, r26
    4e60:	97 fd       	sbrc	r25, 7
    4e62:	a0 95       	com	r26
    4e64:	ba 2f       	mov	r27, r26
    4e66:	bc 01       	movw	r22, r24
    4e68:	cd 01       	movw	r24, r26
    4e6a:	0e 94 aa 20 	call	0x4154	; 0x4154 <LCD_voidWrite_u32Number>
							LCD_voidWriteString ("]");
    4e6e:	8a ed       	ldi	r24, 0xDA	; 218
    4e70:	90 e0       	ldi	r25, 0x00	; 0
    4e72:	0e 94 81 20 	call	0x4102	; 0x4102 <LCD_voidWriteString>
		LCD_voidWriteString (" Enter Password:");
		LCD_voidGoTo_XY (1,13);
		LCD_voidWriteString ("[1]");
		while (1)
			{
				for ( u8 i=0 ; i < 3 ; i++ )
    4e76:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4e78:	8f 5f       	subi	r24, 0xFF	; 255
    4e7a:	8d 8f       	std	Y+29, r24	; 0x1d
    4e7c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4e7e:	83 30       	cpi	r24, 0x03	; 3
    4e80:	08 f4       	brcc	.+2      	; 0x4e84 <main+0x3be>
    4e82:	64 ce       	rjmp	.-824    	; 0x4b4c <main+0x86>
    4e84:	61 ce       	rjmp	.-830    	; 0x4b48 <main+0x82>

00004e86 <StartProgram>:
		}


/* ------------------------------------------------------------- */
void StartProgram (void)
{
    4e86:	df 93       	push	r29
    4e88:	cf 93       	push	r28
    4e8a:	cd b7       	in	r28, 0x3d	; 61
    4e8c:	de b7       	in	r29, 0x3e	; 62
    4e8e:	6c 97       	sbiw	r28, 0x1c	; 28
    4e90:	0f b6       	in	r0, 0x3f	; 63
    4e92:	f8 94       	cli
    4e94:	de bf       	out	0x3e, r29	; 62
    4e96:	0f be       	out	0x3f, r0	; 63
    4e98:	cd bf       	out	0x3d, r28	; 61
	LCD_voidClearDisplay();
    4e9a:	0e 94 82 21 	call	0x4304	; 0x4304 <LCD_voidClearDisplay>
	LCD_voidGoTo_XY (0,1);
    4e9e:	80 e0       	ldi	r24, 0x00	; 0
    4ea0:	61 e0       	ldi	r22, 0x01	; 1
    4ea2:	0e 94 19 21 	call	0x4232	; 0x4232 <LCD_voidGoTo_XY>
	LCD_voidWriteString (" ITI Graduation");
    4ea6:	8c ed       	ldi	r24, 0xDC	; 220
    4ea8:	90 e0       	ldi	r25, 0x00	; 0
    4eaa:	0e 94 81 20 	call	0x4102	; 0x4102 <LCD_voidWriteString>
	LCD_voidGoTo_XY (1,0);
    4eae:	81 e0       	ldi	r24, 0x01	; 1
    4eb0:	60 e0       	ldi	r22, 0x00	; 0
    4eb2:	0e 94 19 21 	call	0x4232	; 0x4232 <LCD_voidGoTo_XY>
	LCD_voidWriteString ("    Project ");
    4eb6:	8c ee       	ldi	r24, 0xEC	; 236
    4eb8:	90 e0       	ldi	r25, 0x00	; 0
    4eba:	0e 94 81 20 	call	0x4102	; 0x4102 <LCD_voidWriteString>
    4ebe:	80 e0       	ldi	r24, 0x00	; 0
    4ec0:	90 e0       	ldi	r25, 0x00	; 0
    4ec2:	a6 e9       	ldi	r26, 0x96	; 150
    4ec4:	b3 e4       	ldi	r27, 0x43	; 67
    4ec6:	89 8f       	std	Y+25, r24	; 0x19
    4ec8:	9a 8f       	std	Y+26, r25	; 0x1a
    4eca:	ab 8f       	std	Y+27, r26	; 0x1b
    4ecc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ece:	69 8d       	ldd	r22, Y+25	; 0x19
    4ed0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4ed2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4ed4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4ed6:	20 e0       	ldi	r18, 0x00	; 0
    4ed8:	30 e0       	ldi	r19, 0x00	; 0
    4eda:	4a ef       	ldi	r20, 0xFA	; 250
    4edc:	54 e4       	ldi	r21, 0x44	; 68
    4ede:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ee2:	dc 01       	movw	r26, r24
    4ee4:	cb 01       	movw	r24, r22
    4ee6:	8d 8b       	std	Y+21, r24	; 0x15
    4ee8:	9e 8b       	std	Y+22, r25	; 0x16
    4eea:	af 8b       	std	Y+23, r26	; 0x17
    4eec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4eee:	6d 89       	ldd	r22, Y+21	; 0x15
    4ef0:	7e 89       	ldd	r23, Y+22	; 0x16
    4ef2:	8f 89       	ldd	r24, Y+23	; 0x17
    4ef4:	98 8d       	ldd	r25, Y+24	; 0x18
    4ef6:	20 e0       	ldi	r18, 0x00	; 0
    4ef8:	30 e0       	ldi	r19, 0x00	; 0
    4efa:	40 e8       	ldi	r20, 0x80	; 128
    4efc:	5f e3       	ldi	r21, 0x3F	; 63
    4efe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4f02:	88 23       	and	r24, r24
    4f04:	2c f4       	brge	.+10     	; 0x4f10 <StartProgram+0x8a>
		__ticks = 1;
    4f06:	81 e0       	ldi	r24, 0x01	; 1
    4f08:	90 e0       	ldi	r25, 0x00	; 0
    4f0a:	9c 8b       	std	Y+20, r25	; 0x14
    4f0c:	8b 8b       	std	Y+19, r24	; 0x13
    4f0e:	3f c0       	rjmp	.+126    	; 0x4f8e <StartProgram+0x108>
	else if (__tmp > 65535)
    4f10:	6d 89       	ldd	r22, Y+21	; 0x15
    4f12:	7e 89       	ldd	r23, Y+22	; 0x16
    4f14:	8f 89       	ldd	r24, Y+23	; 0x17
    4f16:	98 8d       	ldd	r25, Y+24	; 0x18
    4f18:	20 e0       	ldi	r18, 0x00	; 0
    4f1a:	3f ef       	ldi	r19, 0xFF	; 255
    4f1c:	4f e7       	ldi	r20, 0x7F	; 127
    4f1e:	57 e4       	ldi	r21, 0x47	; 71
    4f20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4f24:	18 16       	cp	r1, r24
    4f26:	4c f5       	brge	.+82     	; 0x4f7a <StartProgram+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f28:	69 8d       	ldd	r22, Y+25	; 0x19
    4f2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4f2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4f2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4f30:	20 e0       	ldi	r18, 0x00	; 0
    4f32:	30 e0       	ldi	r19, 0x00	; 0
    4f34:	40 e2       	ldi	r20, 0x20	; 32
    4f36:	51 e4       	ldi	r21, 0x41	; 65
    4f38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f3c:	dc 01       	movw	r26, r24
    4f3e:	cb 01       	movw	r24, r22
    4f40:	bc 01       	movw	r22, r24
    4f42:	cd 01       	movw	r24, r26
    4f44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f48:	dc 01       	movw	r26, r24
    4f4a:	cb 01       	movw	r24, r22
    4f4c:	9c 8b       	std	Y+20, r25	; 0x14
    4f4e:	8b 8b       	std	Y+19, r24	; 0x13
    4f50:	0f c0       	rjmp	.+30     	; 0x4f70 <StartProgram+0xea>
    4f52:	88 ec       	ldi	r24, 0xC8	; 200
    4f54:	90 e0       	ldi	r25, 0x00	; 0
    4f56:	9a 8b       	std	Y+18, r25	; 0x12
    4f58:	89 8b       	std	Y+17, r24	; 0x11
    4f5a:	89 89       	ldd	r24, Y+17	; 0x11
    4f5c:	9a 89       	ldd	r25, Y+18	; 0x12
    4f5e:	01 97       	sbiw	r24, 0x01	; 1
    4f60:	f1 f7       	brne	.-4      	; 0x4f5e <StartProgram+0xd8>
    4f62:	9a 8b       	std	Y+18, r25	; 0x12
    4f64:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f66:	8b 89       	ldd	r24, Y+19	; 0x13
    4f68:	9c 89       	ldd	r25, Y+20	; 0x14
    4f6a:	01 97       	sbiw	r24, 0x01	; 1
    4f6c:	9c 8b       	std	Y+20, r25	; 0x14
    4f6e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f70:	8b 89       	ldd	r24, Y+19	; 0x13
    4f72:	9c 89       	ldd	r25, Y+20	; 0x14
    4f74:	00 97       	sbiw	r24, 0x00	; 0
    4f76:	69 f7       	brne	.-38     	; 0x4f52 <StartProgram+0xcc>
    4f78:	14 c0       	rjmp	.+40     	; 0x4fa2 <StartProgram+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f7a:	6d 89       	ldd	r22, Y+21	; 0x15
    4f7c:	7e 89       	ldd	r23, Y+22	; 0x16
    4f7e:	8f 89       	ldd	r24, Y+23	; 0x17
    4f80:	98 8d       	ldd	r25, Y+24	; 0x18
    4f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f86:	dc 01       	movw	r26, r24
    4f88:	cb 01       	movw	r24, r22
    4f8a:	9c 8b       	std	Y+20, r25	; 0x14
    4f8c:	8b 8b       	std	Y+19, r24	; 0x13
    4f8e:	8b 89       	ldd	r24, Y+19	; 0x13
    4f90:	9c 89       	ldd	r25, Y+20	; 0x14
    4f92:	98 8b       	std	Y+16, r25	; 0x10
    4f94:	8f 87       	std	Y+15, r24	; 0x0f
    4f96:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f98:	98 89       	ldd	r25, Y+16	; 0x10
    4f9a:	01 97       	sbiw	r24, 0x01	; 1
    4f9c:	f1 f7       	brne	.-4      	; 0x4f9a <StartProgram+0x114>
    4f9e:	98 8b       	std	Y+16, r25	; 0x10
    4fa0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(300);
	LCD_voidClearLine(0);
    4fa2:	80 e0       	ldi	r24, 0x00	; 0
    4fa4:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
	LCD_voidClearLine(1);
    4fa8:	81 e0       	ldi	r24, 0x01	; 1
    4faa:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
	LCD_voidGoTo_XY (0,1);
    4fae:	80 e0       	ldi	r24, 0x00	; 0
    4fb0:	61 e0       	ldi	r22, 0x01	; 1
    4fb2:	0e 94 19 21 	call	0x4232	; 0x4232 <LCD_voidGoTo_XY>
	LCD_voidWriteString (" Hello Welcome  ");
    4fb6:	89 ef       	ldi	r24, 0xF9	; 249
    4fb8:	90 e0       	ldi	r25, 0x00	; 0
    4fba:	0e 94 81 20 	call	0x4102	; 0x4102 <LCD_voidWriteString>
	LCD_voidGoTo_XY (1,0);
    4fbe:	81 e0       	ldi	r24, 0x01	; 1
    4fc0:	60 e0       	ldi	r22, 0x00	; 0
    4fc2:	0e 94 19 21 	call	0x4232	; 0x4232 <LCD_voidGoTo_XY>
	LCD_voidWriteString ("To MY Smart Home  ");
    4fc6:	8a e0       	ldi	r24, 0x0A	; 10
    4fc8:	91 e0       	ldi	r25, 0x01	; 1
    4fca:	0e 94 81 20 	call	0x4102	; 0x4102 <LCD_voidWriteString>
    4fce:	80 e0       	ldi	r24, 0x00	; 0
    4fd0:	90 e0       	ldi	r25, 0x00	; 0
    4fd2:	a6 e9       	ldi	r26, 0x96	; 150
    4fd4:	b3 e4       	ldi	r27, 0x43	; 67
    4fd6:	8b 87       	std	Y+11, r24	; 0x0b
    4fd8:	9c 87       	std	Y+12, r25	; 0x0c
    4fda:	ad 87       	std	Y+13, r26	; 0x0d
    4fdc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4fde:	6b 85       	ldd	r22, Y+11	; 0x0b
    4fe0:	7c 85       	ldd	r23, Y+12	; 0x0c
    4fe2:	8d 85       	ldd	r24, Y+13	; 0x0d
    4fe4:	9e 85       	ldd	r25, Y+14	; 0x0e
    4fe6:	20 e0       	ldi	r18, 0x00	; 0
    4fe8:	30 e0       	ldi	r19, 0x00	; 0
    4fea:	4a ef       	ldi	r20, 0xFA	; 250
    4fec:	54 e4       	ldi	r21, 0x44	; 68
    4fee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ff2:	dc 01       	movw	r26, r24
    4ff4:	cb 01       	movw	r24, r22
    4ff6:	8f 83       	std	Y+7, r24	; 0x07
    4ff8:	98 87       	std	Y+8, r25	; 0x08
    4ffa:	a9 87       	std	Y+9, r26	; 0x09
    4ffc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4ffe:	6f 81       	ldd	r22, Y+7	; 0x07
    5000:	78 85       	ldd	r23, Y+8	; 0x08
    5002:	89 85       	ldd	r24, Y+9	; 0x09
    5004:	9a 85       	ldd	r25, Y+10	; 0x0a
    5006:	20 e0       	ldi	r18, 0x00	; 0
    5008:	30 e0       	ldi	r19, 0x00	; 0
    500a:	40 e8       	ldi	r20, 0x80	; 128
    500c:	5f e3       	ldi	r21, 0x3F	; 63
    500e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5012:	88 23       	and	r24, r24
    5014:	2c f4       	brge	.+10     	; 0x5020 <StartProgram+0x19a>
		__ticks = 1;
    5016:	81 e0       	ldi	r24, 0x01	; 1
    5018:	90 e0       	ldi	r25, 0x00	; 0
    501a:	9e 83       	std	Y+6, r25	; 0x06
    501c:	8d 83       	std	Y+5, r24	; 0x05
    501e:	3f c0       	rjmp	.+126    	; 0x509e <StartProgram+0x218>
	else if (__tmp > 65535)
    5020:	6f 81       	ldd	r22, Y+7	; 0x07
    5022:	78 85       	ldd	r23, Y+8	; 0x08
    5024:	89 85       	ldd	r24, Y+9	; 0x09
    5026:	9a 85       	ldd	r25, Y+10	; 0x0a
    5028:	20 e0       	ldi	r18, 0x00	; 0
    502a:	3f ef       	ldi	r19, 0xFF	; 255
    502c:	4f e7       	ldi	r20, 0x7F	; 127
    502e:	57 e4       	ldi	r21, 0x47	; 71
    5030:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5034:	18 16       	cp	r1, r24
    5036:	4c f5       	brge	.+82     	; 0x508a <StartProgram+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5038:	6b 85       	ldd	r22, Y+11	; 0x0b
    503a:	7c 85       	ldd	r23, Y+12	; 0x0c
    503c:	8d 85       	ldd	r24, Y+13	; 0x0d
    503e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5040:	20 e0       	ldi	r18, 0x00	; 0
    5042:	30 e0       	ldi	r19, 0x00	; 0
    5044:	40 e2       	ldi	r20, 0x20	; 32
    5046:	51 e4       	ldi	r21, 0x41	; 65
    5048:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    504c:	dc 01       	movw	r26, r24
    504e:	cb 01       	movw	r24, r22
    5050:	bc 01       	movw	r22, r24
    5052:	cd 01       	movw	r24, r26
    5054:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5058:	dc 01       	movw	r26, r24
    505a:	cb 01       	movw	r24, r22
    505c:	9e 83       	std	Y+6, r25	; 0x06
    505e:	8d 83       	std	Y+5, r24	; 0x05
    5060:	0f c0       	rjmp	.+30     	; 0x5080 <StartProgram+0x1fa>
    5062:	88 ec       	ldi	r24, 0xC8	; 200
    5064:	90 e0       	ldi	r25, 0x00	; 0
    5066:	9c 83       	std	Y+4, r25	; 0x04
    5068:	8b 83       	std	Y+3, r24	; 0x03
    506a:	8b 81       	ldd	r24, Y+3	; 0x03
    506c:	9c 81       	ldd	r25, Y+4	; 0x04
    506e:	01 97       	sbiw	r24, 0x01	; 1
    5070:	f1 f7       	brne	.-4      	; 0x506e <StartProgram+0x1e8>
    5072:	9c 83       	std	Y+4, r25	; 0x04
    5074:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5076:	8d 81       	ldd	r24, Y+5	; 0x05
    5078:	9e 81       	ldd	r25, Y+6	; 0x06
    507a:	01 97       	sbiw	r24, 0x01	; 1
    507c:	9e 83       	std	Y+6, r25	; 0x06
    507e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5080:	8d 81       	ldd	r24, Y+5	; 0x05
    5082:	9e 81       	ldd	r25, Y+6	; 0x06
    5084:	00 97       	sbiw	r24, 0x00	; 0
    5086:	69 f7       	brne	.-38     	; 0x5062 <StartProgram+0x1dc>
    5088:	14 c0       	rjmp	.+40     	; 0x50b2 <StartProgram+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    508a:	6f 81       	ldd	r22, Y+7	; 0x07
    508c:	78 85       	ldd	r23, Y+8	; 0x08
    508e:	89 85       	ldd	r24, Y+9	; 0x09
    5090:	9a 85       	ldd	r25, Y+10	; 0x0a
    5092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5096:	dc 01       	movw	r26, r24
    5098:	cb 01       	movw	r24, r22
    509a:	9e 83       	std	Y+6, r25	; 0x06
    509c:	8d 83       	std	Y+5, r24	; 0x05
    509e:	8d 81       	ldd	r24, Y+5	; 0x05
    50a0:	9e 81       	ldd	r25, Y+6	; 0x06
    50a2:	9a 83       	std	Y+2, r25	; 0x02
    50a4:	89 83       	std	Y+1, r24	; 0x01
    50a6:	89 81       	ldd	r24, Y+1	; 0x01
    50a8:	9a 81       	ldd	r25, Y+2	; 0x02
    50aa:	01 97       	sbiw	r24, 0x01	; 1
    50ac:	f1 f7       	brne	.-4      	; 0x50aa <StartProgram+0x224>
    50ae:	9a 83       	std	Y+2, r25	; 0x02
    50b0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(300);
}
    50b2:	6c 96       	adiw	r28, 0x1c	; 28
    50b4:	0f b6       	in	r0, 0x3f	; 63
    50b6:	f8 94       	cli
    50b8:	de bf       	out	0x3e, r29	; 62
    50ba:	0f be       	out	0x3f, r0	; 63
    50bc:	cd bf       	out	0x3d, r28	; 61
    50be:	cf 91       	pop	r28
    50c0:	df 91       	pop	r29
    50c2:	08 95       	ret

000050c4 <GetPassword>:

/* ------------------------------------------------------------- */
u16 GetPassword (void)
{
    50c4:	df 93       	push	r29
    50c6:	cf 93       	push	r28
    50c8:	00 d0       	rcall	.+0      	; 0x50ca <GetPassword+0x6>
    50ca:	00 d0       	rcall	.+0      	; 0x50cc <GetPassword+0x8>
    50cc:	0f 92       	push	r0
    50ce:	cd b7       	in	r28, 0x3d	; 61
    50d0:	de b7       	in	r29, 0x3e	; 62
	LCD_voidGoTo_XY (1,0);
    50d2:	81 e0       	ldi	r24, 0x01	; 1
    50d4:	60 e0       	ldi	r22, 0x00	; 0
    50d6:	0e 94 19 21 	call	0x4232	; 0x4232 <LCD_voidGoTo_XY>
	u16 Password = 0 ;
    50da:	1d 82       	std	Y+5, r1	; 0x05
    50dc:	1c 82       	std	Y+4, r1	; 0x04
	u16 Copy_u8Temp = 0 ;
    50de:	1b 82       	std	Y+3, r1	; 0x03
    50e0:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8PressedKey ;
	while(1)
	{
		Local_u8PressedKey = KPAD_u8GetPressedKey ();
    50e2:	0e 94 24 22 	call	0x4448	; 0x4448 <KPAD_u8GetPressedKey>
    50e6:	89 83       	std	Y+1, r24	; 0x01
		if ( Local_u8PressedKey != 0xff  )
    50e8:	89 81       	ldd	r24, Y+1	; 0x01
    50ea:	8f 3f       	cpi	r24, 0xFF	; 255
    50ec:	d1 f3       	breq	.-12     	; 0x50e2 <GetPassword+0x1e>
		{
			if( Local_u8PressedKey >= '0' && Local_u8PressedKey <= '9' )
    50ee:	89 81       	ldd	r24, Y+1	; 0x01
    50f0:	80 33       	cpi	r24, 0x30	; 48
    50f2:	f8 f0       	brcs	.+62     	; 0x5132 <GetPassword+0x6e>
    50f4:	89 81       	ldd	r24, Y+1	; 0x01
    50f6:	8a 33       	cpi	r24, 0x3A	; 58
    50f8:	e0 f4       	brcc	.+56     	; 0x5132 <GetPassword+0x6e>
			{
				LCD_voidWriteChar('*');
    50fa:	8a e2       	ldi	r24, 0x2A	; 42
    50fc:	0e 94 5f 20 	call	0x40be	; 0x40be <LCD_voidWriteChar>
				Copy_u8Temp = Copy_u8Temp*10 + (Local_u8PressedKey - '0') ;
    5100:	8a 81       	ldd	r24, Y+2	; 0x02
    5102:	9b 81       	ldd	r25, Y+3	; 0x03
    5104:	9c 01       	movw	r18, r24
    5106:	22 0f       	add	r18, r18
    5108:	33 1f       	adc	r19, r19
    510a:	c9 01       	movw	r24, r18
    510c:	88 0f       	add	r24, r24
    510e:	99 1f       	adc	r25, r25
    5110:	88 0f       	add	r24, r24
    5112:	99 1f       	adc	r25, r25
    5114:	28 0f       	add	r18, r24
    5116:	39 1f       	adc	r19, r25
    5118:	89 81       	ldd	r24, Y+1	; 0x01
    511a:	88 2f       	mov	r24, r24
    511c:	90 e0       	ldi	r25, 0x00	; 0
    511e:	82 0f       	add	r24, r18
    5120:	93 1f       	adc	r25, r19
    5122:	c0 97       	sbiw	r24, 0x30	; 48
    5124:	9b 83       	std	Y+3, r25	; 0x03
    5126:	8a 83       	std	Y+2, r24	; 0x02
				Password = Copy_u8Temp ;
    5128:	8a 81       	ldd	r24, Y+2	; 0x02
    512a:	9b 81       	ldd	r25, Y+3	; 0x03
    512c:	9d 83       	std	Y+5, r25	; 0x05
    512e:	8c 83       	std	Y+4, r24	; 0x04
    5130:	d8 cf       	rjmp	.-80     	; 0x50e2 <GetPassword+0x1e>
			}
			else if ( Local_u8PressedKey == '=' )
    5132:	89 81       	ldd	r24, Y+1	; 0x01
    5134:	8d 33       	cpi	r24, 0x3D	; 61
    5136:	a9 f6       	brne	.-86     	; 0x50e2 <GetPassword+0x1e>
			{
				break ;
			}
		}
	}
	return Password ;
    5138:	8c 81       	ldd	r24, Y+4	; 0x04
    513a:	9d 81       	ldd	r25, Y+5	; 0x05
}
    513c:	0f 90       	pop	r0
    513e:	0f 90       	pop	r0
    5140:	0f 90       	pop	r0
    5142:	0f 90       	pop	r0
    5144:	0f 90       	pop	r0
    5146:	cf 91       	pop	r28
    5148:	df 91       	pop	r29
    514a:	08 95       	ret

0000514c <Room1>:

/* ------------------------------------------------------------- */
void Room1 (void)
{
    514c:	df 93       	push	r29
    514e:	cf 93       	push	r28
    5150:	0f 92       	push	r0
    5152:	cd b7       	in	r28, 0x3d	; 61
    5154:	de b7       	in	r29, 0x3e	; 62
	u8 ActuatorKey = 0 ;
    5156:	19 82       	std	Y+1, r1	; 0x01
	USART_voidSendData('1');
    5158:	81 e3       	ldi	r24, 0x31	; 49
    515a:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
	LCD_voidClearLine(0);
    515e:	80 e0       	ldi	r24, 0x00	; 0
    5160:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
	LCD_voidClearLine(1);
    5164:	81 e0       	ldi	r24, 0x01	; 1
    5166:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>

	while(1)
	{
		LCD_voidGoTo_XY (0,0);
    516a:	80 e0       	ldi	r24, 0x00	; 0
    516c:	60 e0       	ldi	r22, 0x00	; 0
    516e:	0e 94 19 21 	call	0x4232	; 0x4232 <LCD_voidGoTo_XY>
		LCD_voidWriteString ("(1)Light       ");
    5172:	8d e1       	ldi	r24, 0x1D	; 29
    5174:	91 e0       	ldi	r25, 0x01	; 1
    5176:	0e 94 81 20 	call	0x4102	; 0x4102 <LCD_voidWriteString>
		LCD_voidGoTo_XY (1,0);
    517a:	81 e0       	ldi	r24, 0x01	; 1
    517c:	60 e0       	ldi	r22, 0x00	; 0
    517e:	0e 94 19 21 	call	0x4232	; 0x4232 <LCD_voidGoTo_XY>
		LCD_voidWriteString ("(2)Fan         ");
    5182:	8d e2       	ldi	r24, 0x2D	; 45
    5184:	91 e0       	ldi	r25, 0x01	; 1
    5186:	0e 94 81 20 	call	0x4102	; 0x4102 <LCD_voidWriteString>
		ActuatorKey = KPAD_u8GetPressedKey ();
    518a:	0e 94 24 22 	call	0x4448	; 0x4448 <KPAD_u8GetPressedKey>
    518e:	89 83       	std	Y+1, r24	; 0x01
		if ( ActuatorKey != 0xff  )
    5190:	89 81       	ldd	r24, Y+1	; 0x01
    5192:	8f 3f       	cpi	r24, 0xFF	; 255
    5194:	51 f3       	breq	.-44     	; 0x516a <Room1+0x1e>
		{
			if ( ActuatorKey == '1' )
    5196:	89 81       	ldd	r24, Y+1	; 0x01
    5198:	81 33       	cpi	r24, 0x31	; 49
    519a:	21 f4       	brne	.+8      	; 0x51a4 <Room1+0x58>
			{
				Control_Light(1);
    519c:	81 e0       	ldi	r24, 0x01	; 1
    519e:	0e 94 77 2a 	call	0x54ee	; 0x54ee <Control_Light>
    51a2:	e3 cf       	rjmp	.-58     	; 0x516a <Room1+0x1e>
			}
			else if ( ActuatorKey == '2' )
    51a4:	89 81       	ldd	r24, Y+1	; 0x01
    51a6:	82 33       	cpi	r24, 0x32	; 50
    51a8:	21 f4       	brne	.+8      	; 0x51b2 <Room1+0x66>
			{
				Control_Fan(1);
    51aa:	81 e0       	ldi	r24, 0x01	; 1
    51ac:	0e 94 40 2b 	call	0x5680	; 0x5680 <Control_Fan>
    51b0:	dc cf       	rjmp	.-72     	; 0x516a <Room1+0x1e>
			}
			else
			{
				USART_voidSendData('#');
    51b2:	83 e2       	ldi	r24, 0x23	; 35
    51b4:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
				ModeKey = 0 ;
    51b8:	10 92 55 02 	sts	0x0255, r1
				break;
			}
		}
	}
    51bc:	0f 90       	pop	r0
    51be:	cf 91       	pop	r28
    51c0:	df 91       	pop	r29
    51c2:	08 95       	ret

000051c4 <Room2>:
}
/* ------------------------------------------------------------- */
void Room2 (void)
{
    51c4:	df 93       	push	r29
    51c6:	cf 93       	push	r28
    51c8:	0f 92       	push	r0
    51ca:	cd b7       	in	r28, 0x3d	; 61
    51cc:	de b7       	in	r29, 0x3e	; 62
	u8 ActuatorKey = 0 ;
    51ce:	19 82       	std	Y+1, r1	; 0x01
	USART_voidSendData('2');
    51d0:	82 e3       	ldi	r24, 0x32	; 50
    51d2:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
	LCD_voidClearLine(0);
    51d6:	80 e0       	ldi	r24, 0x00	; 0
    51d8:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
	LCD_voidClearLine(1);
    51dc:	81 e0       	ldi	r24, 0x01	; 1
    51de:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>

	while(1)
	{
		LCD_voidGoTo_XY (0,0);
    51e2:	80 e0       	ldi	r24, 0x00	; 0
    51e4:	60 e0       	ldi	r22, 0x00	; 0
    51e6:	0e 94 19 21 	call	0x4232	; 0x4232 <LCD_voidGoTo_XY>
		LCD_voidWriteString ("(1)Light       ");
    51ea:	8d e1       	ldi	r24, 0x1D	; 29
    51ec:	91 e0       	ldi	r25, 0x01	; 1
    51ee:	0e 94 81 20 	call	0x4102	; 0x4102 <LCD_voidWriteString>
		LCD_voidGoTo_XY (1,0);
    51f2:	81 e0       	ldi	r24, 0x01	; 1
    51f4:	60 e0       	ldi	r22, 0x00	; 0
    51f6:	0e 94 19 21 	call	0x4232	; 0x4232 <LCD_voidGoTo_XY>
		LCD_voidWriteString ("(2)Fan         ");
    51fa:	8d e2       	ldi	r24, 0x2D	; 45
    51fc:	91 e0       	ldi	r25, 0x01	; 1
    51fe:	0e 94 81 20 	call	0x4102	; 0x4102 <LCD_voidWriteString>
		ActuatorKey = KPAD_u8GetPressedKey ();
    5202:	0e 94 24 22 	call	0x4448	; 0x4448 <KPAD_u8GetPressedKey>
    5206:	89 83       	std	Y+1, r24	; 0x01
		if ( ActuatorKey != 0xff  )
    5208:	89 81       	ldd	r24, Y+1	; 0x01
    520a:	8f 3f       	cpi	r24, 0xFF	; 255
    520c:	51 f3       	breq	.-44     	; 0x51e2 <Room2+0x1e>
		{
			if ( ActuatorKey == '1' )
    520e:	89 81       	ldd	r24, Y+1	; 0x01
    5210:	81 33       	cpi	r24, 0x31	; 49
    5212:	21 f4       	brne	.+8      	; 0x521c <Room2+0x58>
			{
				Control_Light(2);
    5214:	82 e0       	ldi	r24, 0x02	; 2
    5216:	0e 94 77 2a 	call	0x54ee	; 0x54ee <Control_Light>
    521a:	e3 cf       	rjmp	.-58     	; 0x51e2 <Room2+0x1e>
			}
			else if ( ActuatorKey == '2' )
    521c:	89 81       	ldd	r24, Y+1	; 0x01
    521e:	82 33       	cpi	r24, 0x32	; 50
    5220:	21 f4       	brne	.+8      	; 0x522a <Room2+0x66>
			{
				Control_Fan(2);
    5222:	82 e0       	ldi	r24, 0x02	; 2
    5224:	0e 94 40 2b 	call	0x5680	; 0x5680 <Control_Fan>
    5228:	dc cf       	rjmp	.-72     	; 0x51e2 <Room2+0x1e>
			}
			else
			{
				USART_voidSendData('#');
    522a:	83 e2       	ldi	r24, 0x23	; 35
    522c:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
				ModeKey = 0 ;
    5230:	10 92 55 02 	sts	0x0255, r1
				break;
			}
		}
	}
    5234:	0f 90       	pop	r0
    5236:	cf 91       	pop	r28
    5238:	df 91       	pop	r29
    523a:	08 95       	ret

0000523c <More>:
}
/* ------------------------------------------------------------- */
void More(void)
{
    523c:	df 93       	push	r29
    523e:	cf 93       	push	r28
    5240:	0f 92       	push	r0
    5242:	cd b7       	in	r28, 0x3d	; 61
    5244:	de b7       	in	r29, 0x3e	; 62
	u8 ActuatorKey=0;
    5246:	19 82       	std	Y+1, r1	; 0x01
	while(1)
		{
			LCD_voidGoTo_XY (0,0);
    5248:	80 e0       	ldi	r24, 0x00	; 0
    524a:	60 e0       	ldi	r22, 0x00	; 0
    524c:	0e 94 19 21 	call	0x4232	; 0x4232 <LCD_voidGoTo_XY>
			LCD_voidWriteString ("4-Reception       ");
    5250:	8d e3       	ldi	r24, 0x3D	; 61
    5252:	91 e0       	ldi	r25, 0x01	; 1
    5254:	0e 94 81 20 	call	0x4102	; 0x4102 <LCD_voidWriteString>
			LCD_voidGoTo_XY (1,0);
    5258:	81 e0       	ldi	r24, 0x01	; 1
    525a:	60 e0       	ldi	r22, 0x00	; 0
    525c:	0e 94 19 21 	call	0x4232	; 0x4232 <LCD_voidGoTo_XY>
			LCD_voidWriteString ("5-Auto          ");
    5260:	80 e5       	ldi	r24, 0x50	; 80
    5262:	91 e0       	ldi	r25, 0x01	; 1
    5264:	0e 94 81 20 	call	0x4102	; 0x4102 <LCD_voidWriteString>
			ActuatorKey = KPAD_u8GetPressedKey ();
    5268:	0e 94 24 22 	call	0x4448	; 0x4448 <KPAD_u8GetPressedKey>
    526c:	89 83       	std	Y+1, r24	; 0x01
			if ( ActuatorKey != 0xff  )
    526e:	89 81       	ldd	r24, Y+1	; 0x01
    5270:	8f 3f       	cpi	r24, 0xFF	; 255
    5272:	51 f3       	breq	.-44     	; 0x5248 <More+0xc>
			{
				if ( ActuatorKey == '4' )
    5274:	89 81       	ldd	r24, Y+1	; 0x01
    5276:	84 33       	cpi	r24, 0x34	; 52
    5278:	19 f4       	brne	.+6      	; 0x5280 <More+0x44>
				{
					Reception();
    527a:	0e 94 46 29 	call	0x528c	; 0x528c <Reception>
    527e:	e4 cf       	rjmp	.-56     	; 0x5248 <More+0xc>
				}
				else if ( ActuatorKey == '5' )
    5280:	89 81       	ldd	r24, Y+1	; 0x01
    5282:	85 33       	cpi	r24, 0x35	; 53
    5284:	09 f7       	brne	.-62     	; 0x5248 <More+0xc>
				{
					Auto();
    5286:	0e 94 bc 29 	call	0x5378	; 0x5378 <Auto>
    528a:	de cf       	rjmp	.-68     	; 0x5248 <More+0xc>

0000528c <Reception>:
		}
}


void Reception (void)
{
    528c:	df 93       	push	r29
    528e:	cf 93       	push	r28
    5290:	0f 92       	push	r0
    5292:	cd b7       	in	r28, 0x3d	; 61
    5294:	de b7       	in	r29, 0x3e	; 62
	u8 ActuatorKey = 0 ;
    5296:	19 82       	std	Y+1, r1	; 0x01
	USART_voidSendData('4');
    5298:	84 e3       	ldi	r24, 0x34	; 52
    529a:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
	LCD_voidClearLine(0);
    529e:	80 e0       	ldi	r24, 0x00	; 0
    52a0:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
	LCD_voidClearLine(1);
    52a4:	81 e0       	ldi	r24, 0x01	; 1
    52a6:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>

	while(1)
	{
		LCD_voidGoTo_XY (0,0);
    52aa:	80 e0       	ldi	r24, 0x00	; 0
    52ac:	60 e0       	ldi	r22, 0x00	; 0
    52ae:	0e 94 19 21 	call	0x4232	; 0x4232 <LCD_voidGoTo_XY>
		LCD_voidWriteString ("(1)Light       ");
    52b2:	8d e1       	ldi	r24, 0x1D	; 29
    52b4:	91 e0       	ldi	r25, 0x01	; 1
    52b6:	0e 94 81 20 	call	0x4102	; 0x4102 <LCD_voidWriteString>
		LCD_voidGoTo_XY (1,0);
    52ba:	81 e0       	ldi	r24, 0x01	; 1
    52bc:	60 e0       	ldi	r22, 0x00	; 0
    52be:	0e 94 19 21 	call	0x4232	; 0x4232 <LCD_voidGoTo_XY>
		LCD_voidWriteString ("(2)TV          ");
    52c2:	81 e6       	ldi	r24, 0x61	; 97
    52c4:	91 e0       	ldi	r25, 0x01	; 1
    52c6:	0e 94 81 20 	call	0x4102	; 0x4102 <LCD_voidWriteString>
		ActuatorKey = KPAD_u8GetPressedKey ();
    52ca:	0e 94 24 22 	call	0x4448	; 0x4448 <KPAD_u8GetPressedKey>
    52ce:	89 83       	std	Y+1, r24	; 0x01
		if ( ActuatorKey != 0xff  )
    52d0:	89 81       	ldd	r24, Y+1	; 0x01
    52d2:	8f 3f       	cpi	r24, 0xFF	; 255
    52d4:	51 f3       	breq	.-44     	; 0x52aa <Reception+0x1e>
		{
			if ( ActuatorKey == '1' )
    52d6:	89 81       	ldd	r24, Y+1	; 0x01
    52d8:	81 33       	cpi	r24, 0x31	; 49
    52da:	21 f4       	brne	.+8      	; 0x52e4 <Reception+0x58>
			{
				Control_Light(3);
    52dc:	83 e0       	ldi	r24, 0x03	; 3
    52de:	0e 94 77 2a 	call	0x54ee	; 0x54ee <Control_Light>
    52e2:	e3 cf       	rjmp	.-58     	; 0x52aa <Reception+0x1e>
			}
			else if ( ActuatorKey == '2' )
    52e4:	89 81       	ldd	r24, Y+1	; 0x01
    52e6:	82 33       	cpi	r24, 0x32	; 50
    52e8:	19 f4       	brne	.+6      	; 0x52f0 <Reception+0x64>
			{
				Control_TV();
    52ea:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <Control_TV>
    52ee:	dd cf       	rjmp	.-70     	; 0x52aa <Reception+0x1e>
			}
			else
			{
				USART_voidSendData('#');
    52f0:	83 e2       	ldi	r24, 0x23	; 35
    52f2:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
				ModeKey = 0 ;
    52f6:	10 92 55 02 	sts	0x0255, r1
				break;
			}
		}
	}
    52fa:	0f 90       	pop	r0
    52fc:	cf 91       	pop	r28
    52fe:	df 91       	pop	r29
    5300:	08 95       	ret

00005302 <Kitchen>:
}
/* ------------------------------------------------------------- */
void Kitchen (void)
{
    5302:	df 93       	push	r29
    5304:	cf 93       	push	r28
    5306:	0f 92       	push	r0
    5308:	cd b7       	in	r28, 0x3d	; 61
    530a:	de b7       	in	r29, 0x3e	; 62
	u8 ActuatorKey = 0 ;
    530c:	19 82       	std	Y+1, r1	; 0x01
	USART_voidSendData('3');
    530e:	83 e3       	ldi	r24, 0x33	; 51
    5310:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
	LCD_voidClearLine(0);
    5314:	80 e0       	ldi	r24, 0x00	; 0
    5316:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
	LCD_voidClearLine(1);
    531a:	81 e0       	ldi	r24, 0x01	; 1
    531c:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>

	while(1)
	{
		LCD_voidGoTo_XY (0,0);
    5320:	80 e0       	ldi	r24, 0x00	; 0
    5322:	60 e0       	ldi	r22, 0x00	; 0
    5324:	0e 94 19 21 	call	0x4232	; 0x4232 <LCD_voidGoTo_XY>
		LCD_voidWriteString ("(1)Light       ");
    5328:	8d e1       	ldi	r24, 0x1D	; 29
    532a:	91 e0       	ldi	r25, 0x01	; 1
    532c:	0e 94 81 20 	call	0x4102	; 0x4102 <LCD_voidWriteString>
		LCD_voidGoTo_XY (1,0);
    5330:	81 e0       	ldi	r24, 0x01	; 1
    5332:	60 e0       	ldi	r22, 0x00	; 0
    5334:	0e 94 19 21 	call	0x4232	; 0x4232 <LCD_voidGoTo_XY>
		LCD_voidWriteString ("(2)Oven         ");
    5338:	81 e7       	ldi	r24, 0x71	; 113
    533a:	91 e0       	ldi	r25, 0x01	; 1
    533c:	0e 94 81 20 	call	0x4102	; 0x4102 <LCD_voidWriteString>
		ActuatorKey = KPAD_u8GetPressedKey ();
    5340:	0e 94 24 22 	call	0x4448	; 0x4448 <KPAD_u8GetPressedKey>
    5344:	89 83       	std	Y+1, r24	; 0x01
		if ( ActuatorKey != 0xff  )
    5346:	89 81       	ldd	r24, Y+1	; 0x01
    5348:	8f 3f       	cpi	r24, 0xFF	; 255
    534a:	51 f3       	breq	.-44     	; 0x5320 <Kitchen+0x1e>
		{
			if ( ActuatorKey == '1' )
    534c:	89 81       	ldd	r24, Y+1	; 0x01
    534e:	81 33       	cpi	r24, 0x31	; 49
    5350:	21 f4       	brne	.+8      	; 0x535a <Kitchen+0x58>
			{
				Control_Light(4);
    5352:	84 e0       	ldi	r24, 0x04	; 4
    5354:	0e 94 77 2a 	call	0x54ee	; 0x54ee <Control_Light>
    5358:	e3 cf       	rjmp	.-58     	; 0x5320 <Kitchen+0x1e>
			}
			else if ( ActuatorKey == '2' )
    535a:	89 81       	ldd	r24, Y+1	; 0x01
    535c:	82 33       	cpi	r24, 0x32	; 50
    535e:	19 f4       	brne	.+6      	; 0x5366 <Kitchen+0x64>
			{
				Control_Oven();
    5360:	0e 94 35 2a 	call	0x546a	; 0x546a <Control_Oven>
    5364:	dd cf       	rjmp	.-70     	; 0x5320 <Kitchen+0x1e>
			}
			else
			{
				USART_voidSendData('#');
    5366:	83 e2       	ldi	r24, 0x23	; 35
    5368:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
				ModeKey = 0 ;
    536c:	10 92 55 02 	sts	0x0255, r1
				break;
			}
		}
	}
    5370:	0f 90       	pop	r0
    5372:	cf 91       	pop	r28
    5374:	df 91       	pop	r29
    5376:	08 95       	ret

00005378 <Auto>:
}
/* ------------------------------------------------------------- */
void Auto (void)
{
    5378:	df 93       	push	r29
    537a:	cf 93       	push	r28
    537c:	0f 92       	push	r0
    537e:	cd b7       	in	r28, 0x3d	; 61
    5380:	de b7       	in	r29, 0x3e	; 62
	u8 ExitAutoKey = 0 ;
    5382:	19 82       	std	Y+1, r1	; 0x01
	USART_voidSendData('5');
    5384:	85 e3       	ldi	r24, 0x35	; 53
    5386:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
	LCD_voidClearLine(0);
    538a:	80 e0       	ldi	r24, 0x00	; 0
    538c:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
	LCD_voidClearLine(1);
    5390:	81 e0       	ldi	r24, 0x01	; 1
    5392:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
	LCD_voidGoTo_XY (0,0);
    5396:	80 e0       	ldi	r24, 0x00	; 0
    5398:	60 e0       	ldi	r22, 0x00	; 0
    539a:	0e 94 19 21 	call	0x4232	; 0x4232 <LCD_voidGoTo_XY>
	LCD_voidWriteString ("  Home is");
    539e:	82 e8       	ldi	r24, 0x82	; 130
    53a0:	91 e0       	ldi	r25, 0x01	; 1
    53a2:	0e 94 81 20 	call	0x4102	; 0x4102 <LCD_voidWriteString>
	LCD_voidGoTo_XY (1,0);
    53a6:	81 e0       	ldi	r24, 0x01	; 1
    53a8:	60 e0       	ldi	r22, 0x00	; 0
    53aa:	0e 94 19 21 	call	0x4232	; 0x4232 <LCD_voidGoTo_XY>
	LCD_voidWriteString (" Auto Mode");
    53ae:	8c e8       	ldi	r24, 0x8C	; 140
    53b0:	91 e0       	ldi	r25, 0x01	; 1
    53b2:	0e 94 81 20 	call	0x4102	; 0x4102 <LCD_voidWriteString>
	while(1)
	{
		ExitAutoKey = KPAD_u8GetPressedKey ();
    53b6:	0e 94 24 22 	call	0x4448	; 0x4448 <KPAD_u8GetPressedKey>
    53ba:	89 83       	std	Y+1, r24	; 0x01
		if ( ExitAutoKey != 0xff  )
    53bc:	89 81       	ldd	r24, Y+1	; 0x01
    53be:	8f 3f       	cpi	r24, 0xFF	; 255
    53c0:	d1 f3       	breq	.-12     	; 0x53b6 <Auto+0x3e>
		{
			if ( ExitAutoKey == '#' )
    53c2:	89 81       	ldd	r24, Y+1	; 0x01
    53c4:	83 32       	cpi	r24, 0x23	; 35
    53c6:	b9 f7       	brne	.-18     	; 0x53b6 <Auto+0x3e>
			{
				USART_voidSendData('#');
    53c8:	83 e2       	ldi	r24, 0x23	; 35
    53ca:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
				LCD_voidClearLine(0);
    53ce:	80 e0       	ldi	r24, 0x00	; 0
    53d0:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
				LCD_voidClearLine(1);
    53d4:	81 e0       	ldi	r24, 0x01	; 1
    53d6:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
				ModeKey = 0 ;
    53da:	10 92 55 02 	sts	0x0255, r1
				break;
			}
		}
	}
    53de:	0f 90       	pop	r0
    53e0:	cf 91       	pop	r28
    53e2:	df 91       	pop	r29
    53e4:	08 95       	ret

000053e6 <Control_TV>:
}
/* ------------------------------------------------------------- */
void Control_TV (void)
{
    53e6:	df 93       	push	r29
    53e8:	cf 93       	push	r28
    53ea:	0f 92       	push	r0
    53ec:	cd b7       	in	r28, 0x3d	; 61
    53ee:	de b7       	in	r29, 0x3e	; 62
	u8 TVKey = 0 ;
    53f0:	19 82       	std	Y+1, r1	; 0x01
	USART_voidSendData('T');
    53f2:	84 e5       	ldi	r24, 0x54	; 84
    53f4:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
	LCD_voidClearLine(0);
    53f8:	80 e0       	ldi	r24, 0x00	; 0
    53fa:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
	LCD_voidClearLine(1);
    53fe:	81 e0       	ldi	r24, 0x01	; 1
    5400:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
	LCD_voidGoTo_XY (0,0);
    5404:	80 e0       	ldi	r24, 0x00	; 0
    5406:	60 e0       	ldi	r22, 0x00	; 0
    5408:	0e 94 19 21 	call	0x4232	; 0x4232 <LCD_voidGoTo_XY>
	LCD_voidWriteString ("(1)TV: ON ");
    540c:	87 e9       	ldi	r24, 0x97	; 151
    540e:	91 e0       	ldi	r25, 0x01	; 1
    5410:	0e 94 81 20 	call	0x4102	; 0x4102 <LCD_voidWriteString>
	LCD_voidGoTo_XY (1,0);
    5414:	81 e0       	ldi	r24, 0x01	; 1
    5416:	60 e0       	ldi	r22, 0x00	; 0
    5418:	0e 94 19 21 	call	0x4232	; 0x4232 <LCD_voidGoTo_XY>
	LCD_voidWriteString ("(0)TV: OFF");
    541c:	82 ea       	ldi	r24, 0xA2	; 162
    541e:	91 e0       	ldi	r25, 0x01	; 1
    5420:	0e 94 81 20 	call	0x4102	; 0x4102 <LCD_voidWriteString>
	while(1)
	{
		TVKey = KPAD_u8GetPressedKey ();
    5424:	0e 94 24 22 	call	0x4448	; 0x4448 <KPAD_u8GetPressedKey>
    5428:	89 83       	std	Y+1, r24	; 0x01
		if ( TVKey != 0xff  )
    542a:	89 81       	ldd	r24, Y+1	; 0x01
    542c:	8f 3f       	cpi	r24, 0xFF	; 255
    542e:	d1 f3       	breq	.-12     	; 0x5424 <Control_TV+0x3e>
		{
			if ( TVKey == '1' )
    5430:	89 81       	ldd	r24, Y+1	; 0x01
    5432:	81 33       	cpi	r24, 0x31	; 49
    5434:	51 f4       	brne	.+20     	; 0x544a <Control_TV+0x64>
			{
				USART_voidSendData('1');
    5436:	81 e3       	ldi	r24, 0x31	; 49
    5438:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
				LCD_voidClearLine(0);
    543c:	80 e0       	ldi	r24, 0x00	; 0
    543e:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
				LCD_voidClearLine(1);
    5442:	81 e0       	ldi	r24, 0x01	; 1
    5444:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
    5448:	0c c0       	rjmp	.+24     	; 0x5462 <Control_TV+0x7c>
				break;
			}
			else if ( TVKey == '0' )
    544a:	89 81       	ldd	r24, Y+1	; 0x01
    544c:	80 33       	cpi	r24, 0x30	; 48
    544e:	51 f7       	brne	.-44     	; 0x5424 <Control_TV+0x3e>
			{
				USART_voidSendData('0');
    5450:	80 e3       	ldi	r24, 0x30	; 48
    5452:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
				LCD_voidClearLine(0);
    5456:	80 e0       	ldi	r24, 0x00	; 0
    5458:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
				LCD_voidClearLine(1);
    545c:	81 e0       	ldi	r24, 0x01	; 1
    545e:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
				break;
			}
		}
	}
}
    5462:	0f 90       	pop	r0
    5464:	cf 91       	pop	r28
    5466:	df 91       	pop	r29
    5468:	08 95       	ret

0000546a <Control_Oven>:
/* ------------------------------------------------------------- */
void Control_Oven (void)
{
    546a:	df 93       	push	r29
    546c:	cf 93       	push	r28
    546e:	0f 92       	push	r0
    5470:	cd b7       	in	r28, 0x3d	; 61
    5472:	de b7       	in	r29, 0x3e	; 62
	u8 OvenKey = 0 ;
    5474:	19 82       	std	Y+1, r1	; 0x01
	USART_voidSendData('O');
    5476:	8f e4       	ldi	r24, 0x4F	; 79
    5478:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
	LCD_voidClearLine(0);
    547c:	80 e0       	ldi	r24, 0x00	; 0
    547e:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
	LCD_voidClearLine(1);
    5482:	81 e0       	ldi	r24, 0x01	; 1
    5484:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
	LCD_voidGoTo_XY (0,0);
    5488:	80 e0       	ldi	r24, 0x00	; 0
    548a:	60 e0       	ldi	r22, 0x00	; 0
    548c:	0e 94 19 21 	call	0x4232	; 0x4232 <LCD_voidGoTo_XY>
	LCD_voidWriteString ("(1)Oven: ON ");
    5490:	8d ea       	ldi	r24, 0xAD	; 173
    5492:	91 e0       	ldi	r25, 0x01	; 1
    5494:	0e 94 81 20 	call	0x4102	; 0x4102 <LCD_voidWriteString>
	LCD_voidGoTo_XY (1,0);
    5498:	81 e0       	ldi	r24, 0x01	; 1
    549a:	60 e0       	ldi	r22, 0x00	; 0
    549c:	0e 94 19 21 	call	0x4232	; 0x4232 <LCD_voidGoTo_XY>
	LCD_voidWriteString ("(0)Oven: OFF");
    54a0:	8a eb       	ldi	r24, 0xBA	; 186
    54a2:	91 e0       	ldi	r25, 0x01	; 1
    54a4:	0e 94 81 20 	call	0x4102	; 0x4102 <LCD_voidWriteString>
	while(1)
	{
		OvenKey = KPAD_u8GetPressedKey ();
    54a8:	0e 94 24 22 	call	0x4448	; 0x4448 <KPAD_u8GetPressedKey>
    54ac:	89 83       	std	Y+1, r24	; 0x01
		if ( OvenKey != 0xff  )
    54ae:	89 81       	ldd	r24, Y+1	; 0x01
    54b0:	8f 3f       	cpi	r24, 0xFF	; 255
    54b2:	d1 f3       	breq	.-12     	; 0x54a8 <Control_Oven+0x3e>
		{
			if ( OvenKey == '1' )
    54b4:	89 81       	ldd	r24, Y+1	; 0x01
    54b6:	81 33       	cpi	r24, 0x31	; 49
    54b8:	51 f4       	brne	.+20     	; 0x54ce <Control_Oven+0x64>
			{
				USART_voidSendData('1');
    54ba:	81 e3       	ldi	r24, 0x31	; 49
    54bc:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
				LCD_voidClearLine(0);
    54c0:	80 e0       	ldi	r24, 0x00	; 0
    54c2:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
				LCD_voidClearLine(1);
    54c6:	81 e0       	ldi	r24, 0x01	; 1
    54c8:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
    54cc:	0c c0       	rjmp	.+24     	; 0x54e6 <Control_Oven+0x7c>
				break;
			}
			else if ( OvenKey == '0' )
    54ce:	89 81       	ldd	r24, Y+1	; 0x01
    54d0:	80 33       	cpi	r24, 0x30	; 48
    54d2:	51 f7       	brne	.-44     	; 0x54a8 <Control_Oven+0x3e>
			{
				USART_voidSendData('0');
    54d4:	80 e3       	ldi	r24, 0x30	; 48
    54d6:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
				LCD_voidClearLine(0);
    54da:	80 e0       	ldi	r24, 0x00	; 0
    54dc:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
				LCD_voidClearLine(1);
    54e0:	81 e0       	ldi	r24, 0x01	; 1
    54e2:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
				break;
			}
		}
	}
}
    54e6:	0f 90       	pop	r0
    54e8:	cf 91       	pop	r28
    54ea:	df 91       	pop	r29
    54ec:	08 95       	ret

000054ee <Control_Light>:

/* ------------------------------------------------------------- */
void Control_Light (u8 CopyNumber)
{
    54ee:	df 93       	push	r29
    54f0:	cf 93       	push	r28
    54f2:	00 d0       	rcall	.+0      	; 0x54f4 <Control_Light+0x6>
    54f4:	00 d0       	rcall	.+0      	; 0x54f6 <Control_Light+0x8>
    54f6:	cd b7       	in	r28, 0x3d	; 61
    54f8:	de b7       	in	r29, 0x3e	; 62
    54fa:	8a 83       	std	Y+2, r24	; 0x02
	u8 LightKey = 0 ;
    54fc:	19 82       	std	Y+1, r1	; 0x01
	USART_voidSendData('L');
    54fe:	8c e4       	ldi	r24, 0x4C	; 76
    5500:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
	LCD_voidClearLine(0);
    5504:	80 e0       	ldi	r24, 0x00	; 0
    5506:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
	LCD_voidClearLine(1);
    550a:	81 e0       	ldi	r24, 0x01	; 1
    550c:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
	LCD_voidGoTo_XY (0,0);
    5510:	80 e0       	ldi	r24, 0x00	; 0
    5512:	60 e0       	ldi	r22, 0x00	; 0
    5514:	0e 94 19 21 	call	0x4232	; 0x4232 <LCD_voidGoTo_XY>
	LCD_voidWriteString ("(1)Light: ON ");
    5518:	87 ec       	ldi	r24, 0xC7	; 199
    551a:	91 e0       	ldi	r25, 0x01	; 1
    551c:	0e 94 81 20 	call	0x4102	; 0x4102 <LCD_voidWriteString>
	LCD_voidGoTo_XY (1,0);
    5520:	81 e0       	ldi	r24, 0x01	; 1
    5522:	60 e0       	ldi	r22, 0x00	; 0
    5524:	0e 94 19 21 	call	0x4232	; 0x4232 <LCD_voidGoTo_XY>
	LCD_voidWriteString ("(0)Light: OFF");
    5528:	85 ed       	ldi	r24, 0xD5	; 213
    552a:	91 e0       	ldi	r25, 0x01	; 1
    552c:	0e 94 81 20 	call	0x4102	; 0x4102 <LCD_voidWriteString>
	switch(CopyNumber)
    5530:	8a 81       	ldd	r24, Y+2	; 0x02
    5532:	28 2f       	mov	r18, r24
    5534:	30 e0       	ldi	r19, 0x00	; 0
    5536:	3c 83       	std	Y+4, r19	; 0x04
    5538:	2b 83       	std	Y+3, r18	; 0x03
    553a:	8b 81       	ldd	r24, Y+3	; 0x03
    553c:	9c 81       	ldd	r25, Y+4	; 0x04
    553e:	82 30       	cpi	r24, 0x02	; 2
    5540:	91 05       	cpc	r25, r1
    5542:	c1 f1       	breq	.+112    	; 0x55b4 <Control_Light+0xc6>
    5544:	2b 81       	ldd	r18, Y+3	; 0x03
    5546:	3c 81       	ldd	r19, Y+4	; 0x04
    5548:	23 30       	cpi	r18, 0x03	; 3
    554a:	31 05       	cpc	r19, r1
    554c:	34 f4       	brge	.+12     	; 0x555a <Control_Light+0x6c>
    554e:	8b 81       	ldd	r24, Y+3	; 0x03
    5550:	9c 81       	ldd	r25, Y+4	; 0x04
    5552:	81 30       	cpi	r24, 0x01	; 1
    5554:	91 05       	cpc	r25, r1
    5556:	71 f0       	breq	.+28     	; 0x5574 <Control_Light+0x86>
    5558:	8c c0       	rjmp	.+280    	; 0x5672 <Control_Light+0x184>
    555a:	2b 81       	ldd	r18, Y+3	; 0x03
    555c:	3c 81       	ldd	r19, Y+4	; 0x04
    555e:	23 30       	cpi	r18, 0x03	; 3
    5560:	31 05       	cpc	r19, r1
    5562:	09 f4       	brne	.+2      	; 0x5566 <Control_Light+0x78>
    5564:	47 c0       	rjmp	.+142    	; 0x55f4 <Control_Light+0x106>
    5566:	8b 81       	ldd	r24, Y+3	; 0x03
    5568:	9c 81       	ldd	r25, Y+4	; 0x04
    556a:	84 30       	cpi	r24, 0x04	; 4
    556c:	91 05       	cpc	r25, r1
    556e:	09 f4       	brne	.+2      	; 0x5572 <Control_Light+0x84>
    5570:	61 c0       	rjmp	.+194    	; 0x5634 <Control_Light+0x146>
    5572:	7f c0       	rjmp	.+254    	; 0x5672 <Control_Light+0x184>
	{
		case 1 :
				while(1)
				{
					LightKey = KPAD_u8GetPressedKey ();
    5574:	0e 94 24 22 	call	0x4448	; 0x4448 <KPAD_u8GetPressedKey>
    5578:	89 83       	std	Y+1, r24	; 0x01
					if ( LightKey != 0xff  )
    557a:	89 81       	ldd	r24, Y+1	; 0x01
    557c:	8f 3f       	cpi	r24, 0xFF	; 255
    557e:	d1 f3       	breq	.-12     	; 0x5574 <Control_Light+0x86>
					{
						if ( LightKey == '1' )
    5580:	89 81       	ldd	r24, Y+1	; 0x01
    5582:	81 33       	cpi	r24, 0x31	; 49
    5584:	51 f4       	brne	.+20     	; 0x559a <Control_Light+0xac>
						{
							USART_voidSendData('1');
    5586:	81 e3       	ldi	r24, 0x31	; 49
    5588:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
							LCD_voidClearLine(0);
    558c:	80 e0       	ldi	r24, 0x00	; 0
    558e:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
							LCD_voidClearLine(1);
    5592:	81 e0       	ldi	r24, 0x01	; 1
    5594:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
    5598:	6c c0       	rjmp	.+216    	; 0x5672 <Control_Light+0x184>
							break;
						}
						else if ( LightKey == '0' )
    559a:	89 81       	ldd	r24, Y+1	; 0x01
    559c:	80 33       	cpi	r24, 0x30	; 48
    559e:	51 f7       	brne	.-44     	; 0x5574 <Control_Light+0x86>
						{
							USART_voidSendData('0');
    55a0:	80 e3       	ldi	r24, 0x30	; 48
    55a2:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
							LCD_voidClearLine(0);
    55a6:	80 e0       	ldi	r24, 0x00	; 0
    55a8:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
							LCD_voidClearLine(1);
    55ac:	81 e0       	ldi	r24, 0x01	; 1
    55ae:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
    55b2:	5f c0       	rjmp	.+190    	; 0x5672 <Control_Light+0x184>
				}
				break;
		case 2 :
				while(1)
				{
					LightKey = KPAD_u8GetPressedKey ();
    55b4:	0e 94 24 22 	call	0x4448	; 0x4448 <KPAD_u8GetPressedKey>
    55b8:	89 83       	std	Y+1, r24	; 0x01
					if ( LightKey != 0xff  )
    55ba:	89 81       	ldd	r24, Y+1	; 0x01
    55bc:	8f 3f       	cpi	r24, 0xFF	; 255
    55be:	d1 f3       	breq	.-12     	; 0x55b4 <Control_Light+0xc6>
					{
						if ( LightKey == '1' )
    55c0:	89 81       	ldd	r24, Y+1	; 0x01
    55c2:	81 33       	cpi	r24, 0x31	; 49
    55c4:	51 f4       	brne	.+20     	; 0x55da <Control_Light+0xec>
						{
							USART_voidSendData('1');
    55c6:	81 e3       	ldi	r24, 0x31	; 49
    55c8:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
							LCD_voidClearLine(0);
    55cc:	80 e0       	ldi	r24, 0x00	; 0
    55ce:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
							LCD_voidClearLine(1);
    55d2:	81 e0       	ldi	r24, 0x01	; 1
    55d4:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
    55d8:	4c c0       	rjmp	.+152    	; 0x5672 <Control_Light+0x184>
							break;
						}
						else if ( LightKey == '0' )
    55da:	89 81       	ldd	r24, Y+1	; 0x01
    55dc:	80 33       	cpi	r24, 0x30	; 48
    55de:	51 f7       	brne	.-44     	; 0x55b4 <Control_Light+0xc6>
						{
							USART_voidSendData('0');
    55e0:	80 e3       	ldi	r24, 0x30	; 48
    55e2:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
							LCD_voidClearLine(0);
    55e6:	80 e0       	ldi	r24, 0x00	; 0
    55e8:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
							LCD_voidClearLine(1);
    55ec:	81 e0       	ldi	r24, 0x01	; 1
    55ee:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
    55f2:	3f c0       	rjmp	.+126    	; 0x5672 <Control_Light+0x184>
				}
				break;
		case 3 :
				while(1)
				{
					LightKey = KPAD_u8GetPressedKey ();
    55f4:	0e 94 24 22 	call	0x4448	; 0x4448 <KPAD_u8GetPressedKey>
    55f8:	89 83       	std	Y+1, r24	; 0x01
					if ( LightKey != 0xff  )
    55fa:	89 81       	ldd	r24, Y+1	; 0x01
    55fc:	8f 3f       	cpi	r24, 0xFF	; 255
    55fe:	d1 f3       	breq	.-12     	; 0x55f4 <Control_Light+0x106>
					{
						if ( LightKey == '1' )
    5600:	89 81       	ldd	r24, Y+1	; 0x01
    5602:	81 33       	cpi	r24, 0x31	; 49
    5604:	51 f4       	brne	.+20     	; 0x561a <Control_Light+0x12c>
						{
							USART_voidSendData('1');
    5606:	81 e3       	ldi	r24, 0x31	; 49
    5608:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
							LCD_voidClearLine(0);
    560c:	80 e0       	ldi	r24, 0x00	; 0
    560e:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
							LCD_voidClearLine(1);
    5612:	81 e0       	ldi	r24, 0x01	; 1
    5614:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
    5618:	2c c0       	rjmp	.+88     	; 0x5672 <Control_Light+0x184>
							break;
						}
						else if ( LightKey == '0' )
    561a:	89 81       	ldd	r24, Y+1	; 0x01
    561c:	80 33       	cpi	r24, 0x30	; 48
    561e:	51 f7       	brne	.-44     	; 0x55f4 <Control_Light+0x106>
						{
							USART_voidSendData('0');
    5620:	80 e3       	ldi	r24, 0x30	; 48
    5622:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
							LCD_voidClearLine(0);
    5626:	80 e0       	ldi	r24, 0x00	; 0
    5628:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
							LCD_voidClearLine(1);
    562c:	81 e0       	ldi	r24, 0x01	; 1
    562e:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
    5632:	1f c0       	rjmp	.+62     	; 0x5672 <Control_Light+0x184>
				}
				break;
		case 4 :
				while(1)
				{
					LightKey = KPAD_u8GetPressedKey ();
    5634:	0e 94 24 22 	call	0x4448	; 0x4448 <KPAD_u8GetPressedKey>
    5638:	89 83       	std	Y+1, r24	; 0x01
					if ( LightKey != 0xff  )
    563a:	89 81       	ldd	r24, Y+1	; 0x01
    563c:	8f 3f       	cpi	r24, 0xFF	; 255
    563e:	d1 f3       	breq	.-12     	; 0x5634 <Control_Light+0x146>
					{
						if ( LightKey == '1' )
    5640:	89 81       	ldd	r24, Y+1	; 0x01
    5642:	81 33       	cpi	r24, 0x31	; 49
    5644:	51 f4       	brne	.+20     	; 0x565a <Control_Light+0x16c>
						{
							USART_voidSendData('1');
    5646:	81 e3       	ldi	r24, 0x31	; 49
    5648:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
							LCD_voidClearLine(0);
    564c:	80 e0       	ldi	r24, 0x00	; 0
    564e:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
							LCD_voidClearLine(1);
    5652:	81 e0       	ldi	r24, 0x01	; 1
    5654:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
    5658:	0c c0       	rjmp	.+24     	; 0x5672 <Control_Light+0x184>
							break;
						}
						else if ( LightKey == '0' )
    565a:	89 81       	ldd	r24, Y+1	; 0x01
    565c:	80 33       	cpi	r24, 0x30	; 48
    565e:	51 f7       	brne	.-44     	; 0x5634 <Control_Light+0x146>
						{
							USART_voidSendData('0');
    5660:	80 e3       	ldi	r24, 0x30	; 48
    5662:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
							LCD_voidClearLine(0);
    5666:	80 e0       	ldi	r24, 0x00	; 0
    5668:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
							LCD_voidClearLine(1);
    566c:	81 e0       	ldi	r24, 0x01	; 1
    566e:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
				}
				break;
		default :
				break;
	}
}
    5672:	0f 90       	pop	r0
    5674:	0f 90       	pop	r0
    5676:	0f 90       	pop	r0
    5678:	0f 90       	pop	r0
    567a:	cf 91       	pop	r28
    567c:	df 91       	pop	r29
    567e:	08 95       	ret

00005680 <Control_Fan>:

/* ------------------------------------------------------------- */
void Control_Fan	(u8 CopyNumber)
{
    5680:	df 93       	push	r29
    5682:	cf 93       	push	r28
    5684:	00 d0       	rcall	.+0      	; 0x5686 <Control_Fan+0x6>
    5686:	00 d0       	rcall	.+0      	; 0x5688 <Control_Fan+0x8>
    5688:	cd b7       	in	r28, 0x3d	; 61
    568a:	de b7       	in	r29, 0x3e	; 62
    568c:	8a 83       	std	Y+2, r24	; 0x02
	u8 FanKey = 0 ;
    568e:	19 82       	std	Y+1, r1	; 0x01
	USART_voidSendData('F');
    5690:	86 e4       	ldi	r24, 0x46	; 70
    5692:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
	LCD_voidClearLine(0);
    5696:	80 e0       	ldi	r24, 0x00	; 0
    5698:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
	LCD_voidClearLine(1);
    569c:	81 e0       	ldi	r24, 0x01	; 1
    569e:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
	LCD_voidGoTo_XY (0,0);
    56a2:	80 e0       	ldi	r24, 0x00	; 0
    56a4:	60 e0       	ldi	r22, 0x00	; 0
    56a6:	0e 94 19 21 	call	0x4232	; 0x4232 <LCD_voidGoTo_XY>
	LCD_voidWriteString ("(1)Fan: ON ");
    56aa:	83 ee       	ldi	r24, 0xE3	; 227
    56ac:	91 e0       	ldi	r25, 0x01	; 1
    56ae:	0e 94 81 20 	call	0x4102	; 0x4102 <LCD_voidWriteString>
	LCD_voidGoTo_XY (1,0);
    56b2:	81 e0       	ldi	r24, 0x01	; 1
    56b4:	60 e0       	ldi	r22, 0x00	; 0
    56b6:	0e 94 19 21 	call	0x4232	; 0x4232 <LCD_voidGoTo_XY>
	LCD_voidWriteString ("(0)Fan: OFF");
    56ba:	8f ee       	ldi	r24, 0xEF	; 239
    56bc:	91 e0       	ldi	r25, 0x01	; 1
    56be:	0e 94 81 20 	call	0x4102	; 0x4102 <LCD_voidWriteString>
	switch(CopyNumber)
    56c2:	8a 81       	ldd	r24, Y+2	; 0x02
    56c4:	28 2f       	mov	r18, r24
    56c6:	30 e0       	ldi	r19, 0x00	; 0
    56c8:	3c 83       	std	Y+4, r19	; 0x04
    56ca:	2b 83       	std	Y+3, r18	; 0x03
    56cc:	8b 81       	ldd	r24, Y+3	; 0x03
    56ce:	9c 81       	ldd	r25, Y+4	; 0x04
    56d0:	81 30       	cpi	r24, 0x01	; 1
    56d2:	91 05       	cpc	r25, r1
    56d4:	31 f0       	breq	.+12     	; 0x56e2 <Control_Fan+0x62>
    56d6:	2b 81       	ldd	r18, Y+3	; 0x03
    56d8:	3c 81       	ldd	r19, Y+4	; 0x04
    56da:	22 30       	cpi	r18, 0x02	; 2
    56dc:	31 05       	cpc	r19, r1
    56de:	09 f1       	breq	.+66     	; 0x5722 <Control_Fan+0xa2>
    56e0:	3f c0       	rjmp	.+126    	; 0x5760 <Control_Fan+0xe0>
	{
		case 1:
				while(1)
				{
					FanKey = KPAD_u8GetPressedKey ();
    56e2:	0e 94 24 22 	call	0x4448	; 0x4448 <KPAD_u8GetPressedKey>
    56e6:	89 83       	std	Y+1, r24	; 0x01
					if ( FanKey != 0xff  )
    56e8:	89 81       	ldd	r24, Y+1	; 0x01
    56ea:	8f 3f       	cpi	r24, 0xFF	; 255
    56ec:	d1 f3       	breq	.-12     	; 0x56e2 <Control_Fan+0x62>
					{
						if ( FanKey == '1' )
    56ee:	89 81       	ldd	r24, Y+1	; 0x01
    56f0:	81 33       	cpi	r24, 0x31	; 49
    56f2:	51 f4       	brne	.+20     	; 0x5708 <Control_Fan+0x88>
						{
							USART_voidSendData('1');
    56f4:	81 e3       	ldi	r24, 0x31	; 49
    56f6:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
							LCD_voidClearLine(0);
    56fa:	80 e0       	ldi	r24, 0x00	; 0
    56fc:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
							LCD_voidClearLine(1);
    5700:	81 e0       	ldi	r24, 0x01	; 1
    5702:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
    5706:	2c c0       	rjmp	.+88     	; 0x5760 <Control_Fan+0xe0>
							break;
						}
						else if ( FanKey == '0' )
    5708:	89 81       	ldd	r24, Y+1	; 0x01
    570a:	80 33       	cpi	r24, 0x30	; 48
    570c:	51 f7       	brne	.-44     	; 0x56e2 <Control_Fan+0x62>
						{
							USART_voidSendData('0');
    570e:	80 e3       	ldi	r24, 0x30	; 48
    5710:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
							LCD_voidClearLine(0);
    5714:	80 e0       	ldi	r24, 0x00	; 0
    5716:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
							LCD_voidClearLine(1);
    571a:	81 e0       	ldi	r24, 0x01	; 1
    571c:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
    5720:	1f c0       	rjmp	.+62     	; 0x5760 <Control_Fan+0xe0>

				break;
		case 2:
				while(1)
				{
					FanKey = KPAD_u8GetPressedKey ();
    5722:	0e 94 24 22 	call	0x4448	; 0x4448 <KPAD_u8GetPressedKey>
    5726:	89 83       	std	Y+1, r24	; 0x01
					if ( FanKey != 0xff  )
    5728:	89 81       	ldd	r24, Y+1	; 0x01
    572a:	8f 3f       	cpi	r24, 0xFF	; 255
    572c:	d1 f3       	breq	.-12     	; 0x5722 <Control_Fan+0xa2>
					{
						if ( FanKey == '1' )
    572e:	89 81       	ldd	r24, Y+1	; 0x01
    5730:	81 33       	cpi	r24, 0x31	; 49
    5732:	51 f4       	brne	.+20     	; 0x5748 <Control_Fan+0xc8>
						{
							USART_voidSendData('1');
    5734:	81 e3       	ldi	r24, 0x31	; 49
    5736:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
							LCD_voidClearLine(0);
    573a:	80 e0       	ldi	r24, 0x00	; 0
    573c:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
							LCD_voidClearLine(1);
    5740:	81 e0       	ldi	r24, 0x01	; 1
    5742:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
    5746:	0c c0       	rjmp	.+24     	; 0x5760 <Control_Fan+0xe0>
							break;
						}
						else if ( FanKey == '0' )
    5748:	89 81       	ldd	r24, Y+1	; 0x01
    574a:	80 33       	cpi	r24, 0x30	; 48
    574c:	51 f7       	brne	.-44     	; 0x5722 <Control_Fan+0xa2>
						{
							USART_voidSendData('0');
    574e:	80 e3       	ldi	r24, 0x30	; 48
    5750:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
							LCD_voidClearLine(0);
    5754:	80 e0       	ldi	r24, 0x00	; 0
    5756:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
							LCD_voidClearLine(1);
    575a:	81 e0       	ldi	r24, 0x01	; 1
    575c:	0e 94 b3 21 	call	0x4366	; 0x4366 <LCD_voidClearLine>
				break;
		default :
			break;

	}
}
    5760:	0f 90       	pop	r0
    5762:	0f 90       	pop	r0
    5764:	0f 90       	pop	r0
    5766:	0f 90       	pop	r0
    5768:	cf 91       	pop	r28
    576a:	df 91       	pop	r29
    576c:	08 95       	ret

0000576e <OpenDoor>:

/* ------------------------------------------------------------- */
void OpenDoor (void)
{
    576e:	df 93       	push	r29
    5770:	cf 93       	push	r28
    5772:	cd b7       	in	r28, 0x3d	; 61
    5774:	de b7       	in	r29, 0x3e	; 62
		SERVO_voidRotateSpecificAngle_OC1A ( 90 );
    5776:	8a e5       	ldi	r24, 0x5A	; 90
    5778:	90 e0       	ldi	r25, 0x00	; 0
    577a:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <SERVO_voidRotateSpecificAngle_OC1A>

}
    577e:	cf 91       	pop	r28
    5780:	df 91       	pop	r29
    5782:	08 95       	ret

00005784 <CloseDoor>:
/* ------------------------------------------------------------- */
void CloseDoor (void)
{
    5784:	df 93       	push	r29
    5786:	cf 93       	push	r28
    5788:	cd b7       	in	r28, 0x3d	; 61
    578a:	de b7       	in	r29, 0x3e	; 62
		SERVO_voidRotateSpecificAngle_OC1A ( 0 );
    578c:	80 e0       	ldi	r24, 0x00	; 0
    578e:	90 e0       	ldi	r25, 0x00	; 0
    5790:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <SERVO_voidRotateSpecificAngle_OC1A>

}
    5794:	cf 91       	pop	r28
    5796:	df 91       	pop	r29
    5798:	08 95       	ret

0000579a <__mulsi3>:
    579a:	62 9f       	mul	r22, r18
    579c:	d0 01       	movw	r26, r0
    579e:	73 9f       	mul	r23, r19
    57a0:	f0 01       	movw	r30, r0
    57a2:	82 9f       	mul	r24, r18
    57a4:	e0 0d       	add	r30, r0
    57a6:	f1 1d       	adc	r31, r1
    57a8:	64 9f       	mul	r22, r20
    57aa:	e0 0d       	add	r30, r0
    57ac:	f1 1d       	adc	r31, r1
    57ae:	92 9f       	mul	r25, r18
    57b0:	f0 0d       	add	r31, r0
    57b2:	83 9f       	mul	r24, r19
    57b4:	f0 0d       	add	r31, r0
    57b6:	74 9f       	mul	r23, r20
    57b8:	f0 0d       	add	r31, r0
    57ba:	65 9f       	mul	r22, r21
    57bc:	f0 0d       	add	r31, r0
    57be:	99 27       	eor	r25, r25
    57c0:	72 9f       	mul	r23, r18
    57c2:	b0 0d       	add	r27, r0
    57c4:	e1 1d       	adc	r30, r1
    57c6:	f9 1f       	adc	r31, r25
    57c8:	63 9f       	mul	r22, r19
    57ca:	b0 0d       	add	r27, r0
    57cc:	e1 1d       	adc	r30, r1
    57ce:	f9 1f       	adc	r31, r25
    57d0:	bd 01       	movw	r22, r26
    57d2:	cf 01       	movw	r24, r30
    57d4:	11 24       	eor	r1, r1
    57d6:	08 95       	ret

000057d8 <__udivmodsi4>:
    57d8:	a1 e2       	ldi	r26, 0x21	; 33
    57da:	1a 2e       	mov	r1, r26
    57dc:	aa 1b       	sub	r26, r26
    57de:	bb 1b       	sub	r27, r27
    57e0:	fd 01       	movw	r30, r26
    57e2:	0d c0       	rjmp	.+26     	; 0x57fe <__udivmodsi4_ep>

000057e4 <__udivmodsi4_loop>:
    57e4:	aa 1f       	adc	r26, r26
    57e6:	bb 1f       	adc	r27, r27
    57e8:	ee 1f       	adc	r30, r30
    57ea:	ff 1f       	adc	r31, r31
    57ec:	a2 17       	cp	r26, r18
    57ee:	b3 07       	cpc	r27, r19
    57f0:	e4 07       	cpc	r30, r20
    57f2:	f5 07       	cpc	r31, r21
    57f4:	20 f0       	brcs	.+8      	; 0x57fe <__udivmodsi4_ep>
    57f6:	a2 1b       	sub	r26, r18
    57f8:	b3 0b       	sbc	r27, r19
    57fa:	e4 0b       	sbc	r30, r20
    57fc:	f5 0b       	sbc	r31, r21

000057fe <__udivmodsi4_ep>:
    57fe:	66 1f       	adc	r22, r22
    5800:	77 1f       	adc	r23, r23
    5802:	88 1f       	adc	r24, r24
    5804:	99 1f       	adc	r25, r25
    5806:	1a 94       	dec	r1
    5808:	69 f7       	brne	.-38     	; 0x57e4 <__udivmodsi4_loop>
    580a:	60 95       	com	r22
    580c:	70 95       	com	r23
    580e:	80 95       	com	r24
    5810:	90 95       	com	r25
    5812:	9b 01       	movw	r18, r22
    5814:	ac 01       	movw	r20, r24
    5816:	bd 01       	movw	r22, r26
    5818:	cf 01       	movw	r24, r30
    581a:	08 95       	ret

0000581c <__prologue_saves__>:
    581c:	2f 92       	push	r2
    581e:	3f 92       	push	r3
    5820:	4f 92       	push	r4
    5822:	5f 92       	push	r5
    5824:	6f 92       	push	r6
    5826:	7f 92       	push	r7
    5828:	8f 92       	push	r8
    582a:	9f 92       	push	r9
    582c:	af 92       	push	r10
    582e:	bf 92       	push	r11
    5830:	cf 92       	push	r12
    5832:	df 92       	push	r13
    5834:	ef 92       	push	r14
    5836:	ff 92       	push	r15
    5838:	0f 93       	push	r16
    583a:	1f 93       	push	r17
    583c:	cf 93       	push	r28
    583e:	df 93       	push	r29
    5840:	cd b7       	in	r28, 0x3d	; 61
    5842:	de b7       	in	r29, 0x3e	; 62
    5844:	ca 1b       	sub	r28, r26
    5846:	db 0b       	sbc	r29, r27
    5848:	0f b6       	in	r0, 0x3f	; 63
    584a:	f8 94       	cli
    584c:	de bf       	out	0x3e, r29	; 62
    584e:	0f be       	out	0x3f, r0	; 63
    5850:	cd bf       	out	0x3d, r28	; 61
    5852:	09 94       	ijmp

00005854 <__epilogue_restores__>:
    5854:	2a 88       	ldd	r2, Y+18	; 0x12
    5856:	39 88       	ldd	r3, Y+17	; 0x11
    5858:	48 88       	ldd	r4, Y+16	; 0x10
    585a:	5f 84       	ldd	r5, Y+15	; 0x0f
    585c:	6e 84       	ldd	r6, Y+14	; 0x0e
    585e:	7d 84       	ldd	r7, Y+13	; 0x0d
    5860:	8c 84       	ldd	r8, Y+12	; 0x0c
    5862:	9b 84       	ldd	r9, Y+11	; 0x0b
    5864:	aa 84       	ldd	r10, Y+10	; 0x0a
    5866:	b9 84       	ldd	r11, Y+9	; 0x09
    5868:	c8 84       	ldd	r12, Y+8	; 0x08
    586a:	df 80       	ldd	r13, Y+7	; 0x07
    586c:	ee 80       	ldd	r14, Y+6	; 0x06
    586e:	fd 80       	ldd	r15, Y+5	; 0x05
    5870:	0c 81       	ldd	r16, Y+4	; 0x04
    5872:	1b 81       	ldd	r17, Y+3	; 0x03
    5874:	aa 81       	ldd	r26, Y+2	; 0x02
    5876:	b9 81       	ldd	r27, Y+1	; 0x01
    5878:	ce 0f       	add	r28, r30
    587a:	d1 1d       	adc	r29, r1
    587c:	0f b6       	in	r0, 0x3f	; 63
    587e:	f8 94       	cli
    5880:	de bf       	out	0x3e, r29	; 62
    5882:	0f be       	out	0x3f, r0	; 63
    5884:	cd bf       	out	0x3d, r28	; 61
    5886:	ed 01       	movw	r28, r26
    5888:	08 95       	ret

0000588a <_exit>:
    588a:	f8 94       	cli

0000588c <__stop_program>:
    588c:	ff cf       	rjmp	.-2      	; 0x588c <__stop_program>
